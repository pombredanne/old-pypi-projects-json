{
    "info": {
        "author": "BinBin",
        "author_email": "binh58500@gmail.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 4 - Beta",
            "License :: OSI Approved :: Apache Software License",
            "Operating System :: OS Independent",
            "Programming Language :: Python",
            "Topic :: Software Development :: Testing"
        ],
        "description": "Apecs-DbBot-SQLAlchemy\r\n================\r\n\r\nApecsDbBot-SQLAlchemy is a fork of DbBot-SQLAlchemy project that is using SQLAlchemy in order to store test run results in any of the major supported database systems. Especially, adding two column are jenkinjobno and environment to TEST_RUNS table.\r\n\r\nThe goal is to support the following databases:\r\n\r\n-  PostgreSQL\r\n-  MySQL\r\n-  Oracle\r\n-  MS SQL\r\n-  SQLite\r\n\r\nRequirements\r\n------------\r\nApecsDbBot-SQLAlchemy is tested on\r\n\r\n-  `Python`__ 3.5+\r\n-  `Robot Framework`_ 3.0+\r\n-  `SQLAlchemy`_ 1.2+\r\n\r\nIt may (though it is not guaranteed) work with older versions of dependencies.\r\n\r\nHow it works\r\n------------\r\n\r\nThe script takes one or more `output.xml` files as input, initializes the\r\ndatabase schema, and stores the respective results into a database\r\n(`robot\\_results.db` by default, can be changed by specifying SQLAlchemy database URL with options `-b` or `--database`).\r\nIf database schema is already existing, it will insert the new\r\nresults into that database.\r\n\r\nInstallation\r\n------------\r\n\r\nThis tool is installed with pip with command:\r\n\r\n::\r\n\r\n    $ pip install apecsdbbot-sqlalchemy\r\n\r\nAlternatively you can download the `source distribution`__, extract it and\r\ninstall using:\r\n\r\n::\r\n\r\n    $ python setup.py install\r\n\r\nWhat is stored\r\n--------------\r\n\r\nBoth the test data (names, content) and test statistics (how many did pass or\r\nfail, possible errors occurred, how long it took to run, etc.) related to\r\nsuites and test cases are stored by default. However, keywords and related\r\ndata are not stored as it might take order of magnitude longer for massive\r\ntest runs. You can choose to store keywords and related data by using `-k` or\r\n`--also-keywords` flag.\r\n\r\nUsage examples\r\n--------------\r\n\r\nTypical usage with a single output.xml file:\r\n\r\n::\r\n\r\n    python -m dbbot.run atests/testdata/one_suite/test_output.xml\r\n\r\nIf the database does not already exist, it's created. Otherwise the test\r\nresults are just inserted into the existing database. Only new results are\r\ninserted.\r\n\r\nAdditional options are:\r\n\r\n+-------------------+---------------------------+--------------------------+\r\n| Short format      | Long format               | Description              |\r\n+===================+===========================+==========================+\r\n| `-k`              | `--also-keywords`         | Parse also suites' and   |\r\n|                   |                           | tests' keywords          |\r\n+-------------------+---------------------------+--------------------------+\r\n| `-v`              | `--verbose`               | Print output to the      |\r\n|                   |                           | console.                 |\r\n+-------------------+---------------------------+--------------------------+\r\n| `-b DB_URL`       | `--database=DB_URL`       | SQLAlchemy database URL  |\r\n|                   |                           | for test run results     |\r\n+-------------------+---------------------------+--------------------------+\r\n| `-d`              | `--dry-run`               | Do everything except     |\r\n|                   |                           | store the results.       |\r\n+-------------------+---------------------------+--------------------------+\r\n| `-j`              | `--jenkins_job_no`        | The build number         |\r\n|                   |                           | on Jenkins               |\r\n+-------------------+---------------------------+--------------------------+\r\n| `-e`              | `--environment`           | Environment of the build |\r\n|                   |                           | number                   |\r\n+-------------------+---------------------------+--------------------------+\r\n\r\n\r\nSpecifying custom database name:\r\n\r\n::\r\n\r\n    $ python -m dbbot.run  -b oracle://bin:123456@localhost:1522/oracle12c output.xml -j 116 -e DEV\r\n    $ python -m dbbot.run  -b sqlite:///my_own_database.db atests/testdata/one_suite/test_output.xml\r\n    $ python -m dbbot.run  -b postgresql://postgres:postgres@localhost:5432/postgres atests/testdata/one_suite/test_output.xml\r\n\r\n\r\nLicense\r\n-------\r\n\r\nDbBot is released under the `Apache License, Version 2.0`__.\r\n\r\nSee LICENSE.TXT for details.\r\n\r\n__ https://www.python.org/\r\n__ https://pypi.python.org/pypi/dbbot-sqlalchemy\r\n__ https://pypi.org/project/apecsdbbot-sqlalchemy/\r\n__ https://github.com/pbylicki/DbBot-SQLAlchemy/blob/master/doc/robot_database.md\r\n__ http://www.tldrlegal.com/license/apache-license-2.0\r\n.. _`Robot Framework`: http://www.robotframework.org\r\n.. _`pip`: http://www.pip-installer.org\r\n.. _`sqlite3`: https://www.sqlite.org/sqlite.html\r\n.. _`SQLAlchemy`: http://www.sqlalchemy.org\r\n\r\n\r\n",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "https://pypi.org/project/apecsdbbot-sqlalchemy/",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/Binh2909/Apecs-DbBot-SQLAlchemy",
        "keywords": "robotframework testing automation",
        "license": "Apache License 2.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "apecsdbbot-sqlalchemy",
        "package_url": "https://pypi.org/project/apecsdbbot-sqlalchemy/",
        "platform": "any",
        "project_url": "https://pypi.org/project/apecsdbbot-sqlalchemy/",
        "project_urls": {
            "Download": "https://pypi.org/project/apecsdbbot-sqlalchemy/",
            "Homepage": "https://github.com/Binh2909/Apecs-DbBot-SQLAlchemy"
        },
        "release_url": "https://pypi.org/project/apecsdbbot-sqlalchemy/0.3/",
        "requires_dist": [
            "robotframework",
            "sqlalchemy"
        ],
        "requires_python": "",
        "summary": "A tool for inserting Robot Framework test run results from xml output file into SQL database using SQLAlchemy. Adding two column are jenkinjobno and environment to TEST_RUNS table",
        "version": "0.3"
    },
    "last_serial": 4923850,
    "releases": {
        "0.3": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c38e92f2dbe990f41a76666d6dfd0b90",
                    "sha256": "0192d25fe5ee17dccc9f803216ed7139507ba17799d5087a298090793e64d0d7"
                },
                "downloads": -1,
                "filename": "apecsdbbot_sqlalchemy-0.3-py2-none-any.whl",
                "has_sig": false,
                "md5_digest": "c38e92f2dbe990f41a76666d6dfd0b90",
                "packagetype": "bdist_wheel",
                "python_version": "py2",
                "requires_python": null,
                "size": 17871,
                "upload_time": "2019-03-11T07:01:48",
                "url": "https://files.pythonhosted.org/packages/48/f5/1a6aa4d54f55bd5e28cb0121c0d9d08d87f7a501ed96b0de6cc996bcdcf0/apecsdbbot_sqlalchemy-0.3-py2-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e975fbca6623c1751e36f8a46938b4e",
                    "sha256": "c5a69fcee1c25a684a7f00980d481ec61d37b2feb5434ef392fc8fc656a00be1"
                },
                "downloads": -1,
                "filename": "apecsdbbot-sqlalchemy-0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "4e975fbca6623c1751e36f8a46938b4e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10169,
                "upload_time": "2019-03-11T07:01:50",
                "url": "https://files.pythonhosted.org/packages/e6/09/4d3fb3693bda31d631a3d0686e17041867a0cc3830661620200bfc86aa4a/apecsdbbot-sqlalchemy-0.3.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "c38e92f2dbe990f41a76666d6dfd0b90",
                "sha256": "0192d25fe5ee17dccc9f803216ed7139507ba17799d5087a298090793e64d0d7"
            },
            "downloads": -1,
            "filename": "apecsdbbot_sqlalchemy-0.3-py2-none-any.whl",
            "has_sig": false,
            "md5_digest": "c38e92f2dbe990f41a76666d6dfd0b90",
            "packagetype": "bdist_wheel",
            "python_version": "py2",
            "requires_python": null,
            "size": 17871,
            "upload_time": "2019-03-11T07:01:48",
            "url": "https://files.pythonhosted.org/packages/48/f5/1a6aa4d54f55bd5e28cb0121c0d9d08d87f7a501ed96b0de6cc996bcdcf0/apecsdbbot_sqlalchemy-0.3-py2-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "4e975fbca6623c1751e36f8a46938b4e",
                "sha256": "c5a69fcee1c25a684a7f00980d481ec61d37b2feb5434ef392fc8fc656a00be1"
            },
            "downloads": -1,
            "filename": "apecsdbbot-sqlalchemy-0.3.tar.gz",
            "has_sig": false,
            "md5_digest": "4e975fbca6623c1751e36f8a46938b4e",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": null,
            "size": 10169,
            "upload_time": "2019-03-11T07:01:50",
            "url": "https://files.pythonhosted.org/packages/e6/09/4d3fb3693bda31d631a3d0686e17041867a0cc3830661620200bfc86aa4a/apecsdbbot-sqlalchemy-0.3.tar.gz"
        }
    ]
}