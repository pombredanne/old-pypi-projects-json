{
    "info": {
        "author": "Kaleb McKinney",
        "author_email": "",
        "bugtrack_url": null,
        "classifiers": [],
        "description": "# nightsky\n\nQuickly create large amounts of unique serial numbers.  \nForked from [JosephTLyons/andromeda](https://github.com/JosephTLyons/andromeda)\n\n## Creating Unique Serial Numbers\n\nDocumentation has not been completed at this time.\n\n## How it Works\n\n1. Check to make sure that it is possible to create the amount of unique\n   licenses requested based on the the serial number length and character set.  \n   For example, if the user requests `1,000,000` unique licenses, but only asks\n   for serial numbers of length `4` and wants only numbers as characters, it\n   will not be possible, as `10^4 < 1,000,000`.  We must have more possible\n   combinations than the number of licenses requested in order to ensure all\n   licenses will be unique.\n2. Make a `characterList` that is comprised of all the symbols the user wishes\n   to use in their serial numbers (numbers, lowercase letters, uppercase\n   letters, and symbols).\n3. Shuffle this list and push a copy of it into another list, called\n   `listOfCharacterLists`.  This step is executed as many times as the length of\n   the serial number requested.\n4. Create a new list of numbers called `indexList`.  Each cell in this list\n   holds an index that corresponds to a `characterList` in the\n   `listOfCharacterLists`.\n5. A serial number is generated by using the `indexList` to provide an index\n   to each of the corresponding internal `characterList`s in\n   `listOfCharacterLists`.  The `listOfCharacterLists` contains as many internal\n   `characterList`s as the length of our serial number.  This can be seen sort\n   of as a speedometer that starts with `0000` miles.  As we roll through the\n   miles in the rightmost column, it resets back to zero and the next value to\n   the left increments by `1`.  This is exactly how the `indexList` and\n   `listOfCharacterLists` work to obtain serial numbers.\n\nIn order to avoid printing serial numbers that look like this:\n\n```text\nPWZdySrxntWyBxYYZAlT\nPWZdySrxntWyBxYYZAlB\nPWZdySrxntWyBxYYZAlZ\nPWZdySrxntWyBxYYZAlJ\n...\n```\n\nwe need to pull serial numbers evenly over the entire spectrum of possible\ncombinations.  We can do this by taking the total possible combinations based\non the user settings and dividing it by the number of licenses needed.  This\nwill give us the value that we need to be apply to the `indexList` before\nprinting the next serial number to the file.  Using the example from earlier:\n\n```text\nSerial number amount: 1000\nSerial number length: 20\nEnter 'y' to use numbers: y\nEnter 'y' to use uppercase letters: y\nEnter 'y' to use lowercase letters: y\nEnter 'y' to use symbols: n\n```\n\nOur licenses are of length `20` and use `62` types of symbols (`10` numbers +\n`26` lowercase letters + `26` uppercase letters).  We have `62^20` possible\nunique serial number combinations.  Because we want `1000` licenses, the spacing\nbetween serial numbers to be printed to the file is\n`(62^20)/1000 = 704423425546998022968330264616370`.  If we set\n`n = 704423425546998022968330264616370`, then the function\n`increaseIndexVectorBy()` efficiently applies this number to the `indexList` in\nroughly `log(n) with base 62` operations.  Using this method, we are able to\nprint licenses that are equally spaced apart in the total combination space, as\nshown in the first sample output earlier.\n\nWe can even print all of the values of the `indexListr` to the terminal to see\nthe patterns better by uncommenting the function `printIndexList()`:\n\n```text\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 03 52 20 20 51 36 12 55 34 13 55 03 29 16 22 50 36 43 40\n00 07 42 40 41 41 10 25 49 06 27 48 06 58 32 45 39 11 25 18\n00 11 32 61 00 30 46 38 42 40 41 41 10 25 49 06 27 48 06 58\n00 15 23 19 21 20 20 51 36 12 55 34 13 55 03 29 16 22 50 36\n00 19 13 39 42 09 57 02 29 47 07 27 17 22 19 52 04 59 32 14\n00 23 03 60 00 61 31 15 23 19 21 20 20 51 36 12 55 34 13 54\n00 26 56 18 21 51 05 28 16 53 35 13 24 18 52 35 44 08 57 32\n00 30 46 38 42 40 41 41 10 25 49 06 27 48 06 58 32 45 39 10\n00 34 36 59 01 30 15 54 03 60 00 61 31 15 23 19 21 20 20 50\n00 38 27 17 22 19 52 04 59 32 14 54 34 44 39 42 09 57 02 28\n00 42 17 37 43 09 26 17 53 04 28 47 38 11 56 02 60 31 46 06\n00 46 07 58 01 61 00 30 46 38 42 40 41 41 10 25 49 06 27 46\n00 49 60 16 22 50 36 43 40 10 56 33 45 08 26 48 37 43 09 24\n00 53 50 36 43 40 10 56 33 45 08 26 48 37 43 09 26 17 53 02\n00 57 40 57 02 29 47 07 27 17 22 19 52 04 59 32 14 54 34 42\n...\n```\n\n## Pitfalls to be Aware of\n\nAndromeda does not care if you choose settings that result in a very low pool of\nlicense combinations.  You should be aware of this.  If you run the application\nwith the following options:\n\n```text\nSerial number amount: 1000\nSerial number length: 4\nEnter 'y' to use numbers: y\nEnter 'y' to use uppercase letters: n\nEnter 'y' to use lowercase letters: n\nEnter 'y' to use symbols: n\n```\n\nthe output will be:\n\n```text\n9444\n9474\n9494\n9464\n9484\n9434\n9424\n9404\n9414\n9454\n9244\n9274\n9294\n9264\n9284\n9234\n...\n```\n\nNotice that the licenses are fairly similar.  Also, note that it would be fairly\neasy to guess a serial number.  The probability that a random guess would be an\nactual serial number is `1000/(10^4) = 0.1`.  It is up to the user to understand\nthis and adjust the settings to increase the complexity of the output and\ndecrease the chances of guessing a license number.  Using the example from\nearlier with `1000` serial numbers of length `20` using all symbols, the\nprobability that a random guess would be an actual serial number is\n`1000/(62^20) = 1.4196007e-33`.\n\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/mckkaleb/andromeda",
        "keywords": "",
        "license": "",
        "maintainer": "",
        "maintainer_email": "",
        "name": "nightsky",
        "package_url": "https://pypi.org/project/nightsky/",
        "platform": "",
        "project_url": "https://pypi.org/project/nightsky/",
        "project_urls": {
            "Homepage": "https://github.com/mckkaleb/andromeda"
        },
        "release_url": "https://pypi.org/project/nightsky/1.0.1/",
        "requires_dist": null,
        "requires_python": ">=3.4",
        "summary": "Quickly create large amounts of unique serial numbers.",
        "version": "1.0.1"
    },
    "last_serial": 5796692,
    "releases": {
        "1.0.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "78f299f4e27fbbf8fd3dc3d5e517a9cb",
                    "sha256": "b18d379a5523b35411e5a91d7e83efed5a762a9e289c2c66e51402570d9a32b7"
                },
                "downloads": -1,
                "filename": "nightsky-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "78f299f4e27fbbf8fd3dc3d5e517a9cb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.4",
                "size": 15732,
                "upload_time": "2019-09-07T16:36:06",
                "url": "https://files.pythonhosted.org/packages/c1/c2/9f6a0639f6c7460cbc52f489f7b519fcfe5988a3302036c0db6c525cce24/nightsky-1.0.0-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "253ab1e6abf1fe83e41f4f1a5b9f5a74",
                    "sha256": "dc0b8f6b7f9151ee2e7c49ee48d0538de55786cc3c2bbd16694d928f67ee91e7"
                },
                "downloads": -1,
                "filename": "nightsky-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "253ab1e6abf1fe83e41f4f1a5b9f5a74",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.4",
                "size": 3508,
                "upload_time": "2019-09-07T16:36:08",
                "url": "https://files.pythonhosted.org/packages/ca/87/9b6f258411b53426a65c709e6e5b624df9e3fa6212146d756666b05d6e44/nightsky-1.0.0.tar.gz"
            }
        ],
        "1.0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6b1724800eeabe22f7110f7674a21a34",
                    "sha256": "cb265aeae9fbebb6d470e62c53e312801664a29b6c291881a4b205081e4ca6f2"
                },
                "downloads": -1,
                "filename": "nightsky-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6b1724800eeabe22f7110f7674a21a34",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.4",
                "size": 15730,
                "upload_time": "2019-09-07T16:50:16",
                "url": "https://files.pythonhosted.org/packages/39/08/0bff8eee04bab732c13d9347b8fef16afe99147a7ba661d82a1fb80e2aab/nightsky-1.0.1-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2e1da8187d0703e5b34c807f665f9f25",
                    "sha256": "b82f01c5d5751489d89a2cfcbc739d34f79e56731a2026d48a28260b5e07b653"
                },
                "downloads": -1,
                "filename": "nightsky-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "2e1da8187d0703e5b34c807f665f9f25",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.4",
                "size": 3514,
                "upload_time": "2019-09-07T16:50:18",
                "url": "https://files.pythonhosted.org/packages/c8/95/71c841f43c1add6e8f6d8b6ed79d47e8f9dfecbeedf439e581968819a0a5/nightsky-1.0.1.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "6b1724800eeabe22f7110f7674a21a34",
                "sha256": "cb265aeae9fbebb6d470e62c53e312801664a29b6c291881a4b205081e4ca6f2"
            },
            "downloads": -1,
            "filename": "nightsky-1.0.1-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "6b1724800eeabe22f7110f7674a21a34",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.4",
            "size": 15730,
            "upload_time": "2019-09-07T16:50:16",
            "url": "https://files.pythonhosted.org/packages/39/08/0bff8eee04bab732c13d9347b8fef16afe99147a7ba661d82a1fb80e2aab/nightsky-1.0.1-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "2e1da8187d0703e5b34c807f665f9f25",
                "sha256": "b82f01c5d5751489d89a2cfcbc739d34f79e56731a2026d48a28260b5e07b653"
            },
            "downloads": -1,
            "filename": "nightsky-1.0.1.tar.gz",
            "has_sig": false,
            "md5_digest": "2e1da8187d0703e5b34c807f665f9f25",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.4",
            "size": 3514,
            "upload_time": "2019-09-07T16:50:18",
            "url": "https://files.pythonhosted.org/packages/c8/95/71c841f43c1add6e8f6d8b6ed79d47e8f9dfecbeedf439e581968819a0a5/nightsky-1.0.1.tar.gz"
        }
    ]
}