{
    "info": {
        "author": "Kyle James Catterall",
        "author_email": "kylejamescatterall@protonmail.com",
        "bugtrack_url": null,
        "classifiers": [
            "License :: OSI Approved :: MIT License",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3"
        ],
        "description": "# kjc-harmony\nkjc-harmony is a small project I made in a day for personal use. Eventually I thought I might as well upload it as a package as practice for package management so here we are. It isn't too much but it gets the job done. You can see installation at the bottom of this README.md file.\n\n# Scales\nThese tuples hold all the musical notes in either sharp or flat form. It is in a tuple because you can not change the names of note. If beethoven isn't allowed to invent notes, neither are you. The two values for scales are `sharp_scale` and `flat_scale`.\n\n```\nsharp_scale = ('C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B')\nflat_scale = ('C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B')\n```\n\n\n# CheckNote\ncheckNote() is a function that checks notes the user inputs to see if they're actually notes using the scale tuples. From there, it can be customized to show an error message, whether it should exit after an error is ran and how long it should wait should the program be exited. The `checkNoteError` variable can be used to customize what happens if an error is detected if you chose for the function to not exit after detecting a wrong note (this is the default option).\n\n```\ncheckNoteError = False  # This variable can be used to chose what happens if checkNote() has exitOnError set to False. This variable is also used by checkNote().\n\n# checkNote(): This function checks if note entered by the user (stored in a variable) is a real note or not. It can be configured on what to do if the note is false.\ndef checkNote(base_note, showErrorMessage=True, errorMessage=\"\\nThe note you have entered does not exist.\", exitOnError=False, timeBeforeExit=2):\n    global checkNoteError\n    if base_note not in sharp_scale and base_note not in flat_scale:  # Looks through the scale tuples and compares the notes to the note the user inputted.\n        checkNoteError = True\n    else:\n        checkNoteError = False\n    if checkNoteError == True:\n        if showErrorMessage:\n            print(errorMessage)   # This can be disabled and have its message changed.\n        if exitOnError == True:\n            time.sleep(timeBeforeExit)   # This can be disabled and have its time changed.\n            os._exit(0)   # This can be disabled.\n```\n\n\n# swapEquivilance\nswapEquivilance is a short and simple function that takes one parameter, the note the user inputs. If the note is a normal note, like a C or G, nothing happens. If the note is a sharp note like G# or F#, they will be converted to their equivilant opposites: Ab or Gb. If the note is a flat note like Db or Eb, they will be converted to their equivilant opposites: C# or D#.\n\n```\n# swapEquivilance: This function will swap a note from its respective sign to the equivilant oposite. For example: C# -> Db.\ndef swapEquivilance(base_note):\n    checkNote(base_note, exitOnError=False)  # Checks if the note you entered was even a real note.\n    # SHARPS -> FLATS.\n    if base_note == 'C#':\n        base_note = 'Db'\n        return(base_note)\n    elif base_note == 'D#':\n        base_note = 'Eb'\n        return(base_note)\n    elif base_note == 'F#':\n        base_note = 'Gb'\n        return(base_note)\n    elif base_note == 'G#':\n        base_note = 'Ab'\n        return(base_note)\n    elif base_note == 'A#':\n        base_note = 'Bb'\n        return(base_note)\n\n    # FLATS -> SHARPS.\n    elif base_note == 'Db':\n        base_note = 'C#'\n        return(base_note)\n    elif base_note == 'Eb':\n        base_note = 'D#'\n        return(base_note)\n    elif base_note == 'Gb':\n        base_note = 'F#'\n        return(base_note)\n    elif base_note == 'Ab':\n        base_note = 'G#'\n        return(base_note)\n    elif base_note == 'Bb':\n        base_note = 'A#'\n        return(base_note)\n\n    # If the note is normal, we don't want the note to change. If the checkNote function spotted an error earlier one, we don't want to return the random note.\n    else:\n        if checkNoteError == False:\n            return(base_note)\n        else:\n            # Error message from the checkNote function will be displayed one line above this message:\n            return('The list of notes you can use are C, C#/Db, D#/Eb, E, F, F#/Gb, G, G#/Ab, A, A#/Bb and B.\\n')\n```\n\n# All Chord Functions\nEach chord function takes two parameters, the note the user wants chords for and the scale (determines whether the chords use sharps or flats. This parameter should be equal to either `sharp_scale` or `flat_scale`.\n\n**The Chord Functions are:**\nmajor()\nminor()\naugmented()\ndiminished()\nsus2()\nsus4()\nmajor7()\nminor7()\ndominant7()\nhalfDiminished7()\ndiminished7()\nminorMajor7()\naugmented7()\nsevenSus2()\nsevenSus4()\nmajorAdd9()\nminorAdd9()\ndominant9()\nnineSus4()\nnineSus2()\nsevenFlat9()\nsevenSharp9()\nmajor9()\nminor9()\nminor7minor9()\nhalfDiminished9()\ndiminished9()\nmajor69()\nminor69()\naugmented9()\naugmented7major9()\nminorMajor7major9()\nmajor11()\nminor11()\ndominant11()\nelevenSus4()\nelevenSus2()\nmajor13()\nminor13()\ndominant13()\nthirteenSus4()\nthirteenSus2()\n\n# Example (major())\n```\ndef major(base_note, scale=sharp_scale):  # Takes the note given by the user (base_note) and either the sharp or flat scale tuple.\n    if scale == sharp_scale:\n        try:\n            base_note_index = scale.index(base_note)  # Goes to the first index of that note.\n        except ValueError:  # If there is a value error, due to perhaps the wrong scale being used, it'll try the equivilant opposite.\n            base_note = swapEquivilance(base_note)\n            base_note_index = scale.index(base_note)  # If there's another value error, the program will crash. You can prevent this by using checkNote() before these functions are called to filter bad results out.\n        secondNote = scale[base_note_index + 4]  # Second Note is (+ x) semitones away from root.\n        finalNote = scale[base_note_index + 7]  # Thrid Note is (+ x) semitones away from root.\n        return f\"{base_note} maj: {base_note} {secondNote} {finalNote}\"  # Prints out the chord name and the notes in the chord.\n\n    if scale == flat_scale:\n        try:\n            base_note_index = scale.index(base_note)\n        except ValueError:\n            base_note = swapEquivilance(base_note)\n            base_note_index = scale.index(base_note)  # Does all the stuff again but this time using the flat scale.\n        secondNote = scale[base_note_index + 4]\n        finalNote = scale[base_note_index + 7]  # Notes will be different due to the different tuples.\n        return f\"{base_note} maj: {base_note} {secondNote} {finalNote}\"\n```\n\n\n# Key Function\nThe key function takes two parameters. Key is simply what note the key should be (i.e C Major = C). Tonality should either be set to `major` or `minor`.\n\n```\ndef key(key, tonality):  # Takes in the key (A note) and a tonality (Major or Minor).\n    checkNote(key)\n    if checkNoteError == True:\n        return('The list of notes you can use are C, C#/Db, D#/Eb, E, F, F#/Gb, G, G#/Ab, A, A#/Bb and B.\\n')\n    if tonality.lower() == 'major':\n        if key == 'C':\n            return('\\nKey: C Major\\nSharps: 0\\nFlats: 0\\nNotes: C D E F G A B\\n')\n        elif key == 'G':\n            return('\\nKey: G Major\\nSharps: 1\\nFlats: 0\\nNotes: G A B C D E F#\\n')\n        elif key == 'D':\n            return('\\nKey: D Major\\nSharps: 2\\nFlats: 0\\nNotes: D E F# G A B C#\\n')\n        elif key == 'A':\n            return('\\nKey: A Major\\nSharps: 3\\nFlats: 0\\nNotes: A B C# D E F# G#\\n')\n        elif key == 'E':\n            return('\\nKey: E Major\\nSharps: 4\\nFlats: 0\\nNotes: E F# G# A B C# D#\\n')\n        elif key == 'B':\n            return('\\nKey: B Major\\nSharps: 5\\nFlats: 0\\nNotes: B C# D# E F# G# A#\\n')\n        elif key == 'Gb':\n            return('\\nKey: Gb Major\\nSharps: 0\\nFlats: 6\\nNotes: Gb Ab Bb Cb Db Eb F\\n')\n        elif key == 'F#':\n            return('\\nKey: F# Major\\nSharps: 6\\nFlats: 0\\nNotes: F# G# A# B C# D# E#\\n')\n        elif key == 'Db':\n            return('\\nKey: Db Major\\nSharps: 0\\nFlats: 5\\nNotes: Db Eb F Gb Ab Bb C\\n')\n        elif key == 'C#':\n            return('\\nKey: C# Major\\nSharps: 7\\nFlats: 0\\nNotes: C# D# E# F# G# A# B#\\n')\n        elif key == 'Ab':\n            return('\\nKey: Ab Major\\nSharps: 0\\nFlats: 4\\nNotes: Ab Bb C Db Eb F G\\n')\n        elif key == 'Eb':\n            return('\\nKey: Eb Major\\nSharps: 0\\nFlats: 3\\nNotes: Eb F G Ab Bb C D\\n')\n        elif key == 'Bb':\n            return('\\nKey: Bb Major\\nSharps: 0\\nFlats: 2\\nNotes: Bb C D Eb F G A\\n')\n        elif key == 'F':\n            return('\\nKey: F Major\\nSharps: 0\\nFlats: 1\\nNotes: F G A Bb C D E\\n')\n        else:\n            return(f'\\n{key} {tonality.lower()} is not a valid key.\\n')\n    elif tonality.lower() == 'minor':\n        if key == 'A':\n            return('\\nKey: A Minor\\nSharps: 0\\nFlats: 0\\nNotes: A B C D E F G\\n')\n        elif key == 'E':\n            return('\\nKey: E Minor\\nSharps: 1\\nFlats: 0\\nNotes: E F# G A B C D\\n')\n        elif key == 'B':\n            return('\\nKey: B Minor\\nSharps: 2\\nFlats: 0\\nNotes: B C# D E F# G A\\n')\n        elif key == 'F#':\n            return('\\nKey: F# Minor\\nSharps: 3\\nFlats: 0\\nNotes: F# G# A B C# D E\\n')\n        elif key == 'C#':\n            return('\\nKey: C# Minor\\nSharps: 4\\nFlats: 0\\nNotes: C# D# E F# G# A B\\n')\n        elif key == 'G#':\n            return('\\nKey: G# Minor\\nSharps: 5\\nFlats: 0\\nNotes: G# A B# C# D# E F#\\n')\n        elif key == 'Eb':\n            return('\\nKey: Eb Minor\\nSharps: 0\\nFlats: 6\\nNotes: Eb F Gb Ab Bb Cb Db\\n')\n        elif key == 'D#':\n            return('\\nKey: D# Minor\\nSharps: 6\\nFlats: 0\\nNotes: D# E# F# G# A# B C#\\n')\n        elif key == 'Bb':\n            return('\\nKey: Bb Minor\\nSharps: 0\\nFlats: 5\\nNotes: Bb C Db Eb F Gb Ab\\n')\n        elif key == 'A#':\n            return('\\nKey: A# Minor\\nSharps: 7\\nFlats: 0\\nNotes: A# B# C# D# E# F# G#\\n')\n        elif key == 'F':\n            return('\\nKey: F Minor\\nSharps: 0\\nFlats: 4\\nNotes: F G Ab Bb C Db Eb\\n')\n        elif key == 'C':\n            return('\\nKey: C Minor\\nSharps: 0\\nFlats: 3\\nNotes: C D Eb F G Ab Bb\\n')\n        elif key == 'G':\n            return('\\nKey: G Minor\\nSharps: 0\\nFlats: 2\\nNotes: G A Bb C D Eb F\\n')\n        elif key == 'D':\n            return('\\nKey: D Minor\\nSharps: 0\\nFlats: 1\\nNotes: D E F G A Bb C\\n')\n        else:\n            return(f'\\n{key} {tonality.lower()} is not a valid key.\\n')\n    else:\n        return(f'\\n\"{tonality}\" is not a tonality recognised by kjc-harmonics. Please use either major or minor.\\n')\n```\n\n\n# Installation\nDo `pip install kjc-harmony` to install the module.\nDo `from kjc_harmony.kjc_harmony import *` to use the functions within the module.\n\n\n# GitHub\n[Click here to visit the GitHub for this project.](https://github.com/TheLoveableBananaNoodle/kjc-harmony)\n\n\n# Thanks for reading. If you like this, give it a star.\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/TheLoveableBananaNoodle/kjc-harmony",
        "keywords": "",
        "license": "",
        "maintainer": "",
        "maintainer_email": "",
        "name": "kjc-harmony",
        "package_url": "https://pypi.org/project/kjc-harmony/",
        "platform": "",
        "project_url": "https://pypi.org/project/kjc-harmony/",
        "project_urls": {
            "Homepage": "https://github.com/TheLoveableBananaNoodle/kjc-harmony"
        },
        "release_url": "https://pypi.org/project/kjc-harmony/1.0.0/",
        "requires_dist": null,
        "requires_python": ">=3.6",
        "summary": "A small package containing some musical functions such as viewing chords of a note and key information.",
        "version": "1.0.0"
    },
    "last_serial": 6026203,
    "releases": {
        "1.0.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4c4f7d5954a73f899262ef0ca9c9ce8e",
                    "sha256": "4de24cb66caf3e4d3513a0582fb753b2227aa7c9715dfa32d8a1dfba76b4fded"
                },
                "downloads": -1,
                "filename": "kjc_harmony-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4c4f7d5954a73f899262ef0ca9c9ce8e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 9026,
                "upload_time": "2019-10-24T21:39:13",
                "url": "https://files.pythonhosted.org/packages/02/47/eae2292c44b2e9903c07626be34e4a4de69bc9dfe4e0c755e84f51475ecb/kjc_harmony-1.0.0-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "742288b5c56ccdd7adb23cb2f7fa01f1",
                    "sha256": "bfb7e561ad9c4a8305d68f5c9f3cf19e1dd8ab16bff79c7fb8108caba7adacd1"
                },
                "downloads": -1,
                "filename": "kjc-harmony-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "742288b5c56ccdd7adb23cb2f7fa01f1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 9964,
                "upload_time": "2019-10-24T21:39:15",
                "url": "https://files.pythonhosted.org/packages/6a/f9/49690aec5f996d22d01c301119315262fc260293ef09777b6f0fc600a94f/kjc-harmony-1.0.0.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "4c4f7d5954a73f899262ef0ca9c9ce8e",
                "sha256": "4de24cb66caf3e4d3513a0582fb753b2227aa7c9715dfa32d8a1dfba76b4fded"
            },
            "downloads": -1,
            "filename": "kjc_harmony-1.0.0-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "4c4f7d5954a73f899262ef0ca9c9ce8e",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.6",
            "size": 9026,
            "upload_time": "2019-10-24T21:39:13",
            "url": "https://files.pythonhosted.org/packages/02/47/eae2292c44b2e9903c07626be34e4a4de69bc9dfe4e0c755e84f51475ecb/kjc_harmony-1.0.0-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "742288b5c56ccdd7adb23cb2f7fa01f1",
                "sha256": "bfb7e561ad9c4a8305d68f5c9f3cf19e1dd8ab16bff79c7fb8108caba7adacd1"
            },
            "downloads": -1,
            "filename": "kjc-harmony-1.0.0.tar.gz",
            "has_sig": false,
            "md5_digest": "742288b5c56ccdd7adb23cb2f7fa01f1",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.6",
            "size": 9964,
            "upload_time": "2019-10-24T21:39:15",
            "url": "https://files.pythonhosted.org/packages/6a/f9/49690aec5f996d22d01c301119315262fc260293ef09777b6f0fc600a94f/kjc-harmony-1.0.0.tar.gz"
        }
    ]
}