{
    "info": {
        "author": "Cox Communications Inc.",
        "author_email": "jason.cole@cox.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 3 - Alpha",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3.7",
            "Topic :: System :: Networking"
        ],
        "description": "## Network Automation Simplified\n\n### Why Another Library? \nThere are several existing tools written to perform network automation such as Ansible, NAPALM, Nornir, etc.  Each tool has has strengths in different categories. This Python library leverages those strengths, for a more flexible and simpler solution with less development time required.\n\nThe following Python libraries are leveraged by NAMS:\n\n* ncclient\n* Nornir\n* Jsnapy \n\n#### ncclient\nncclient is Python library for interfacing with a NETCONF device.  ncclient is leveraged by tools like Jsnapy and Ansible.  It is vendor neutral and provides a 'raw', or unabstracted interface.  The downside of working with ncclient is that it requires the user to perform inventory management, multiprocessing, error-handling, encoding conversions, file saving, etc. \n\nhttps://ncclient.readthedocs.io/en/latest/index.html\n\n#### Nornir\nNornir is a relatively new Python framework developed by the same creators of NAPALM and netmiko.  It's primary role is to provide inventory management and multiprocessing for APIs like ncclient, NAPALM, netmiko, and others.  One downfall of Nornir the ability to integrate Jsnapy.  This is a critical component for health checks on Juniper devices.  Because Nornir is an Open framework, a component of the framework, like inventory, can be re-used by others.  Nornir's inventory is re-used by NAMS.\n\nhttps://nornir.readthedocs.io/en/stable/\n\n#### Jsnapy\nJsnapy is an excellent Python tool for executing health checks against JunOS platforms.  It abstracts netconf requests and responses, by allowing test case definitions via a 'yaml' file.  In the yaml file, various parameters state parameters of 'show' output can be validated.  When a response is received and the test case passes, the node is considered health (vice versa for a failure).  Jsnapy uses ncclient to interface with a device.  \n\nhttps://github.com/Juniper/jsnapy\n\n#### NAPALM\nNAPALM is unified API for multi-vendor network environments.  It translates high-level 'orders' into CLI commands.  Additionally, it returns output as Python objects e.g. lists, dictionaries, etc. for easy parsing. This output is the same for all vendors.  However, because there are so many results that would have to be translated into Python objects, not all commands are supported.  Additionally, some vendors have support than others.  The majority of support is in EOS systems which are uncommon to most network environments.  To workaround this, the developers allow interfacing with devices through Netconf or netmiko without translating results but while performing with error handling.  In a network domain of Juniper routers, it makes more sense to avoid the NAPALM API and leverage Juniper's Jsnapy interface with ncclient.  This is because Jsnapy cannot easily be integrated into NAPALM without developer involvement.\n\nhttps://napalm.readthedocs.io/en/latest/\n\n#### Ansible\nAnsible is a YAML driven, network automation solution that supports native commands and Netconf for multiple vendors.  It has an excellent inventory system for device management and generating configurations.  YAML is a simple 'language' that users interface with; this hides the underlying Python code.  Because of YAML abstraction, Ansible sacrifices flexibility.  YAML is also not a 'programming language'.  This can make seemingly simple tasks quite difficult to 'program' or even impossible.  Another downside of Ansible is that an operation is executed on *all* routers before the next operation is performed. Examples below describe some scenarios that become quite challenging or impossible with Ansible:\n\n1. *Group Operations*:  Executing multiple operations on a single router before moving to the next.  Additionally, user prompting at each device.\n\n\n2. *Conditional Operations*: Suppose you want you want to get the configuration from all routers, find routers with 'X' configuration, and then make a change to only those select routers. \n\n\n3. *Speed*: Each operation requires a new SSH / NETCONF session.  Suppose you have two tasks (1) get configuration (2) edit configuration.  Each operation requires a new session.  \n\nhttps://docs.ansible.com/\n\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/pypa/sampleproject",
        "keywords": "ncclient,nornir,jsnapy",
        "license": "",
        "maintainer": "",
        "maintainer_email": "",
        "name": "nammy",
        "package_url": "https://pypi.org/project/nammy/",
        "platform": "",
        "project_url": "https://pypi.org/project/nammy/",
        "project_urls": {
            "Homepage": "https://github.com/pypa/sampleproject"
        },
        "release_url": "https://pypi.org/project/nammy/0.0.2/",
        "requires_dist": [
            "jsnapy",
            "xmltodict",
            "nornir"
        ],
        "requires_python": ">=3.7",
        "summary": "Network Automation Simplified",
        "version": "0.0.2"
    },
    "last_serial": 5887336,
    "releases": {
        "0.0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ce295998414ab9e5214e6ea1b5623085",
                    "sha256": "ae44711e42e0e145b19f5c2b404c881edb4de4b1125d61814af10714a009f4fb"
                },
                "downloads": -1,
                "filename": "nammy-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ce295998414ab9e5214e6ea1b5623085",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 18264,
                "upload_time": "2019-09-25T21:30:12",
                "url": "https://files.pythonhosted.org/packages/69/56/cde8bc998d5b791581c49803ccf4d814eab58aad772925c629b380ff72f3/nammy-0.0.1-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f178ed922e7ab157ec884d85b667c74c",
                    "sha256": "40f557239abaa5cc5f6eb718229ed4084ec9a832559a9efac49ffdb7c943aefa"
                },
                "downloads": -1,
                "filename": "nammy-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "f178ed922e7ab157ec884d85b667c74c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 17364,
                "upload_time": "2019-09-25T21:30:14",
                "url": "https://files.pythonhosted.org/packages/fb/0d/768b376b47a1a980c2b70008332b5bc76afd5e61c93311d61a262b07d7de/nammy-0.0.1.tar.gz"
            }
        ],
        "0.0.2": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f3fac95b8f1127bcf0d3a6b1e2fefe1",
                    "sha256": "8ca02bc40d8feea92d56b8e75ecc85b4d4d6694c385d2f00276ef33b4b2892f2"
                },
                "downloads": -1,
                "filename": "nammy-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4f3fac95b8f1127bcf0d3a6b1e2fefe1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 17452,
                "upload_time": "2019-09-25T21:35:29",
                "url": "https://files.pythonhosted.org/packages/17/d4/96e226039ee648f2aff5bd7635c4c4748c63b97938276cdc9f48d6e31af1/nammy-0.0.2-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5b84197ad7e7530690dc41e9276d0810",
                    "sha256": "92a2d0c2d7e12248dcdc2d318c52aa57c3658472081ac227a715edd4446f2590"
                },
                "downloads": -1,
                "filename": "nammy-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "5b84197ad7e7530690dc41e9276d0810",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 17252,
                "upload_time": "2019-09-25T21:35:30",
                "url": "https://files.pythonhosted.org/packages/2f/eb/fad010f28b3b6f5e43ca416d8900f70ed2e75f9ffd458c851548b104915d/nammy-0.0.2.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "4f3fac95b8f1127bcf0d3a6b1e2fefe1",
                "sha256": "8ca02bc40d8feea92d56b8e75ecc85b4d4d6694c385d2f00276ef33b4b2892f2"
            },
            "downloads": -1,
            "filename": "nammy-0.0.2-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "4f3fac95b8f1127bcf0d3a6b1e2fefe1",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.7",
            "size": 17452,
            "upload_time": "2019-09-25T21:35:29",
            "url": "https://files.pythonhosted.org/packages/17/d4/96e226039ee648f2aff5bd7635c4c4748c63b97938276cdc9f48d6e31af1/nammy-0.0.2-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "5b84197ad7e7530690dc41e9276d0810",
                "sha256": "92a2d0c2d7e12248dcdc2d318c52aa57c3658472081ac227a715edd4446f2590"
            },
            "downloads": -1,
            "filename": "nammy-0.0.2.tar.gz",
            "has_sig": false,
            "md5_digest": "5b84197ad7e7530690dc41e9276d0810",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.7",
            "size": 17252,
            "upload_time": "2019-09-25T21:35:30",
            "url": "https://files.pythonhosted.org/packages/2f/eb/fad010f28b3b6f5e43ca416d8900f70ed2e75f9ffd458c851548b104915d/nammy-0.0.2.tar.gz"
        }
    ]
}