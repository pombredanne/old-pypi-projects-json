{
    "info": {
        "author": "Bishwamittra Ghosh",
        "author_email": "bishwamittra.ghosh@gmail.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 3 - Alpha",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.4",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Topic :: Software Development :: Build Tools"
        ],
        "description": "# MLICv2\n\nMLICv2 is an incremental learning framework based on  MaxSAT  for generating interpretable classification rules via partition-based training methodology. This tool  is based on our [paper](https://bishwamittra.github.io/publication/imli-ghosh.pdf) published in AAAI/ACM Conference on AI, Ethics, and Society(AIES), 2019. We have introduced this framework as imli in the paper.\n\n\n\n\n\n# Directory Description\n\nThe directory `benchmarks/` consists of all the benchmark files used for the experiment. \n\nThe directory `rulelearning` contains all the scripts that are employed in testing and required for reproducibility. \nIn the `rulelearning` directory, we have added `imli.py` which is the incremental learning framework for generating interpretable rules. To run `imli.py`, you will need an off the self MaxSAT solver (e.g., MaxHS, Open-Wbo) to be in the PATH variable.\n\n# PIP Install\nRun the following command to install this framework.\n\n```\npip install rulelearning\n```\n\n# Install MaxSAT solvers\n\nTo install Open-wbo, follow the instructions in the official [link](http://sat.inesc-id.pt/open-wbo/).\nTo install MaxHS, follow the instructions in the official [link](http://www.maxhs.org/docs/overview.html).\nAfter the installation is complete, add the path of the binary in the PATH variable. \n```\nexport PATH=$PATH:'/path/to/open-wbo/'\n```\nOr\n```\nexport PATH=$PATH:'/path/to/maxhs/'\n```\nOther off the shelf MaxSAT solvers can also be used for this framework.\n# Usage\n\nImport rulelearning in Python.\n```\nimport rulelearning\n```\n\nCall an instance of `imli` object. Specify the parameters in `imli()` if needed. For example, in order to  set `open-wbo` as the MaxSAT solver, pass the parameter `solver=\"open-wbo\"`.\n```\nmodel=rulelearning.imli()\n```\nDiscretize any dataset in csv format by calling the following function. `benchmarks/` contains  a set of sample datasets.\n```\nX,y=model.discretize(\"benchmarks/iris_bintarget.csv\")\n```\n If the dataset contains categorical features, specify the index of such categorical features as a list in the parameter. Look for other parameter choices if needed. For example:\n```\nX,y=model.discretize(\"benchmarks/credit_card_clients.csv\",categoricalColumnIndex=[2,3,4])\n```\nTrain the model as follows. \n```\nmodel.fit(X,y)\n```\nTo retrive the learned rule, call the `getRule()` function.\n```\nmodel.getRule()\n```\nTo compute the predictions on a test set e.g., `{XTest,yTest}`, call `predict(Xtest,yTest)` function.\n```\nyhat=model.predict(XTest,yTest)\n```\nPlay with other getter functions to learn various attributes of the trained model.\n\n\nFor more details, refer to the source code.\n\n# Issues, questions, bugs, etc.\nPlease click on \"issues\" at the top and [create a new issue](https://github.com/meelgroup/MLIC/issues). All issues are responded to promptly.\n\n# Contact\n[Bishwamittra Ghosh](https://bishwamittra.github.io/) (bishwa@comp.nus.edu.sg)\n\n# How to cite\n@inproceedings{GM19,<br />\nauthor={Ghosh, Bishwamittra and  Meel, Kuldeep S.},<br />\ntitle={imli: An Incremental Framework for MaxSAT-Based Learning of Interpretable Classification Rules},<br />\nbooktitle={Proceedings of AAAI/ACM Conference on AI, Ethics, and Society(AIES)},<br />\nmonth={1},<br />\nyear={2019},}\n\n# Old Versions\nThe old version, MLIC is available under the branch \"MLIC\". Please read the README of the old release to know how to compile the code.",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "https://github.com/meelgroup/MLIC/archive/v1.0.tar.gz",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/meelgroup/MLIC",
        "keywords": "Classification Rules,Interpretable Rules,CNF Classification Rules,DNF Classification Rules,MaxSAT-based Rule Learning",
        "license": "MIT",
        "maintainer": "",
        "maintainer_email": "",
        "name": "rulelearning",
        "package_url": "https://pypi.org/project/rulelearning/",
        "platform": "",
        "project_url": "https://pypi.org/project/rulelearning/",
        "project_urls": {
            "Download": "https://github.com/meelgroup/MLIC/archive/v1.0.tar.gz",
            "Homepage": "https://github.com/meelgroup/MLIC"
        },
        "release_url": "https://pypi.org/project/rulelearning/1.0/",
        "requires_dist": null,
        "requires_python": "",
        "summary": "This library can be used to generate interpretable classification rules expressed as CNF/DNF",
        "version": "1.0"
    },
    "last_serial": 4899287,
    "releases": {
        "1.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2f593bc6e794c6649ff197b595ee8152",
                    "sha256": "4dbd89ec89c3d879d0d6b98a6fbbb9d38388e6284f99919dd9a25482e3f3d231"
                },
                "downloads": -1,
                "filename": "rulelearning-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "2f593bc6e794c6649ff197b595ee8152",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 8187,
                "upload_time": "2019-03-05T12:56:25",
                "url": "https://files.pythonhosted.org/packages/dd/60/48ec08580d398059104e181057f99d3b9b2e503cf48a139ed16829019c5d/rulelearning-1.0.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "2f593bc6e794c6649ff197b595ee8152",
                "sha256": "4dbd89ec89c3d879d0d6b98a6fbbb9d38388e6284f99919dd9a25482e3f3d231"
            },
            "downloads": -1,
            "filename": "rulelearning-1.0.tar.gz",
            "has_sig": false,
            "md5_digest": "2f593bc6e794c6649ff197b595ee8152",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": null,
            "size": 8187,
            "upload_time": "2019-03-05T12:56:25",
            "url": "https://files.pythonhosted.org/packages/dd/60/48ec08580d398059104e181057f99d3b9b2e503cf48a139ed16829019c5d/rulelearning-1.0.tar.gz"
        }
    ]
}