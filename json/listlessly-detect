{
    "info": {
        "author": "<xiewenzhen>",
        "author_email": "<1078207098@qq.com>",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 4 - Beta",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: BSD License",
            "Operating System :: OS Independent",
            "Programming Language :: Python",
            "Programming Language :: Python :: 2",
            "Programming Language :: Python :: 2.7",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.4",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: Implementation",
            "Topic :: Software Development :: Libraries"
        ],
        "description": "nghttp2 - HTTP/2 C Library\n==========================\n\nThis is an implementation of the Hypertext Transfer Protocol version 2\nin C.\n\nThe framing layer of HTTP/2 is implemented as a reusable C library.\nOn top of that, we have implemented an HTTP/2 client, server and\nproxy.  We have also developed load test and benchmarking tools for\nHTTP/2.\n\nAn HPACK encoder and decoder are available as a public API.\n\nAn experimental high level C++ library is also available.\n\nWe have Python bindings of this library, but we do not have full\ncode coverage yet.\n\nDevelopment Status\n------------------\n\nWe have implemented `RFC 7540 <https://tools.ietf.org/html/rfc7540>`_\nHTTP/2 and `RFC 7541 <https://tools.ietf.org/html/rfc7541>`_ HPACK -\nHeader Compression for HTTP/2\n\nThe nghttp2 code base was forked from the spdylay\n(https://github.com/tatsuhiro-t/spdylay) project.\n\nPublic Test Server\n------------------\n\nThe following endpoints are available to try out our nghttp2\nimplementation.\n\n* https://nghttp2.org/ (TLS + ALPN/NPN)\n\n  This endpoint supports ``h2``, ``h2-16``, ``h2-14``, and\n  ``http/1.1`` via ALPN/NPN and requires TLSv1.2 for HTTP/2\n  connection.\n\n* http://nghttp2.org/ (HTTP Upgrade and HTTP/2 Direct)\n\n  ``h2c`` and ``http/1.1``.\n\nRequirements\n------------\n\nThe following package is required to build the libnghttp2 library:\n\n* pkg-config >= 0.20\n\nTo build and run the unit test programs, the following package is\nrequired:\n\n* cunit >= 2.1\n\nTo build the documentation, you need to install:\n\n* sphinx (http://sphinx-doc.org/)\n\nIf you need libnghttp2 (C library) only, then the above packages are\nall you need.  Use ``--enable-lib-only`` to ensure that only\nlibnghttp2 is built.  This avoids potential build error related to\nbuilding bundled applications.\n\nTo build and run the application programs (``nghttp``, ``nghttpd``,\n``nghttpx`` and ``h2load``) in the ``src`` directory, the following packages\nare required:\n\n* OpenSSL >= 1.0.1\n* libev >= 4.11\n* zlib >= 1.2.3\n* libc-ares >= 1.7.5\n\nALPN support requires OpenSSL >= 1.0.2 (released 22 January 2015).\nLibreSSL >= 2.2.0 can be used instead of OpenSSL, but OpenSSL has more\nfeatures than LibreSSL at the time of this writing.\n\nTo enable ``-a`` option (getting linked assets from the downloaded\nresource) in ``nghttp``, the following package is required:\n\n* libxml2 >= 2.6.26\n\nTo enable systemd support in nghttpx, the following package is\nrequired:\n\n* libsystemd-dev >= 209\n\nThe HPACK tools require the following package:\n\n* jansson >= 2.5\n\nTo build sources under the examples directory, libevent is required:\n\n* libevent-openssl >= 2.0.8\n\nTo mitigate heap fragmentation in long running server programs\n(``nghttpd`` and ``nghttpx``), jemalloc is recommended:\n\n* jemalloc\n\n  .. note::\n\n     Alpine Linux currently does not support malloc replacement\n     due to musl limitations. See details in issue `#762 <https://github.com/nghttp2/nghttp2/issues/762>`_.\n\nlibnghttp2_asio C++ library requires the following packages:\n\n* libboost-dev >= 1.54.0\n* libboost-thread-dev >= 1.54.0\n\nThe Python bindings require the following packages:\n\n* cython >= 0.19\n* python >= 2.7\n* python-setuptools\n\nIf you are using Ubuntu 16.04 LTS (Xenial Xerus) or Debian 8 (jessie)\nand above, run the following to install the required packages:\n\n.. code-block:: text\n\n    sudo apt-get install g++ make binutils autoconf automake autotools-dev libtool pkg-config \\\n      zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev \\\n      libc-ares-dev libjemalloc-dev libsystemd-dev \\\n      cython python3-dev python-setuptools\n\nTo enable mruby support for nghttpx, `mruby\n<https://github.com/mruby/mruby>`_ is required.  We need to build\nmruby with C++ ABI explicitly turned on, and probably need other\nmrgems, mruby is manged by git submodule under third-party/mruby\ndirectory.  Currently, mruby support for nghttpx is disabled by\ndefault.  To enable mruby support, use ``--with-mruby`` configure\noption.  Note that at the time of this writing, libmruby-dev and mruby\npackages in Debian/Ubuntu are not usable for nghttp2, since they do\nnot enable C++ ABI.  To build mruby, the following packages are\nrequired:\n\n* ruby\n* bison\n\nnghttpx supports `neverbleed <https://github.com/h2o/neverbleed>`_,\nprivilege separation engine for OpenSSL / LibreSSL.  In short, it\nminimizes the risk of private key leakage when serious bug like\nHeartbleed is exploited.  The neverbleed is disabled by default.  To\nenable it, use ``--with-neverbleed`` configure option.\n\nIn order to compile the source code, gcc >= 6.0 or clang >= 6.0 is\nrequired.  C++ source code requires C++14 language features.\n\n.. note::\n\n   To enable mruby support in nghttpx, and use ``--with-mruby``\n   configure option.\n\n.. note::\n\n   Mac OS X users may need the ``--disable-threads`` configure option to\n   disable multi-threading in nghttpd, nghttpx and h2load to prevent\n   them from crashing. A patch is welcome to make multi threading work\n   on Mac OS X platform.\n\n.. note::\n\n   To compile the associated applications (nghttp, nghttpd, nghttpx\n   and h2load), you must use the ``--enable-app`` configure option and\n   ensure that the specified requirements above are met.  Normally,\n   configure script checks required dependencies to build these\n   applications, and enable ``--enable-app`` automatically, so you\n   don't have to use it explicitly.  But if you found that\n   applications were not built, then using ``--enable-app`` may find\n   that cause, such as the missing dependency.\n\n.. note::\n\n   In order to detect third party libraries, pkg-config is used\n   (however we don't use pkg-config for some libraries (e.g., libev)).\n   By default, pkg-config searches ``*.pc`` file in the standard\n   locations (e.g., /usr/lib/pkgconfig).  If it is necessary to use\n   ``*.pc`` file in the custom location, specify paths to\n   ``PKG_CONFIG_PATH`` environment variable, and pass it to configure\n   script, like so:\n\n   .. code-block:: text\n\n       $ ./configure PKG_CONFIG_PATH=/path/to/pkgconfig\n\n   For pkg-config managed libraries, ``*_CFLAG`` and ``*_LIBS``\n   environment variables are defined (e.g., ``OPENSSL_CFLAGS``,\n   ``OPENSSL_LIBS``).  Specifying non-empty string to these variables\n   completely overrides pkg-config.  In other words, if they are\n   specified, pkg-config is not used for detection, and user is\n   responsible to specify the correct values to these variables.  For\n   complete list of these variables, run ``./configure -h``.\n\nBuilding nghttp2 from release tar archive\n-----------------------------------------\n\nThe nghttp2 project regularly releases tar archives which includes\nnghttp2 source code, and generated build files.  They can be\ndownloaded from `Releases\n<https://github.com/nghttp2/nghttp2/releases>`_ page.\n\nBuilding nghttp2 from git requires autotools development packages.\nBuilding from tar archives does not require them, and thus it is much\neasier.  The usual build step is as follows:\n\n.. code-block:: text\n\n    $ tar xf nghttp2-X.Y.Z.tar.bz2\n    $ cd nghttp2-X.Y.Z\n    $ ./configure\n    $ make\n\nBuilding from git\n-----------------\n\nBuilding from git is easy, but please be sure that at least autoconf 2.68 is\nused:\n\n.. code-block:: text\n\n    $ git submodule update --init\n    $ autoreconf -i\n    $ automake\n    $ autoconf\n    $ ./configure\n    $ make\n\nNotes for building on Windows (MSVC)\n------------------------------------\n\nThe easiest way to build native Windows nghttp2 dll is use `cmake\n<https://cmake.org/>`_.  The free version of `Visual C++ Build Tools\n<http://landinghub.visualstudio.com/visual-cpp-build-tools>`_ works\nfine.\n\n1. Install cmake for windows\n2. Open \"Visual C++ ... Native Build Tool Command Prompt\", and inside\n   nghttp2 directly, run ``cmake``.\n3. Then run ``cmake --build`` to build library.\n4. nghttp2.dll, nghttp2.lib, nghttp2.exp are placed under lib directory.\n\nNote that the above steps most likely produce nghttp2 library only.\nNo bundled applications are compiled.\n\nNotes for building on Windows (Mingw/Cygwin)\n--------------------------------------------\n\nUnder Mingw environment, you can only compile the library, it's\n``libnghttp2-X.dll`` and ``libnghttp2.a``.\n\nIf you want to compile the applications(``h2load``, ``nghttp``,\n``nghttpx``, ``nghttpd``), you need to use the Cygwin environment.\n\nUnder Cygwin environment, to compile the applications you need to\ncompile and install the libev first.\n\nSecondly, you need to undefine the macro ``__STRICT_ANSI__``, if you\nnot, the functions ``fdopen``, ``fileno`` and ``strptime`` will not\navailable.\n\nthe sample command like this:\n\n.. code-block:: text\n\n    $ export CFLAGS=\"-U__STRICT_ANSI__ -I$libev_PREFIX/include -L$libev_PREFIX/lib\"\n    $ export CXXFLAGS=$CFLAGS\n    $ ./configure\n    $ make\n\nIf you want to compile the applications under ``examples/``, you need\nto remove or rename the ``event.h`` from libev's installation, because\nit conflicts with libevent's installation.\n\nNotes for installation on Linux systems\n--------------------------------------------\nAfter installing nghttp2 tool suite with ``make install`` one might experience a similar error:\n\n.. code-block:: text\n\n    nghttpx: error while loading shared libraries: libnghttp2.so.14: cannot open shared object file: No such file or directory\n\nThis means that the tool is unable to locate the ``libnghttp2.so`` shared library.\n\nTo update the shared library cache run ``sudo ldconfig``.\n\nBuilding the documentation\n--------------------------\n\n.. note::\n\n   Documentation is still incomplete.\n\nTo build the documentation, run:\n\n.. code-block:: text\n\n    $ make html\n\nThe documents will be generated under ``doc/manual/html/``.\n\nThe generated documents will not be installed with ``make install``.\n\nThe online documentation is available at\nhttps://nghttp2.org/documentation/\n\nUnit tests\n----------\n\nUnit tests are done by simply running ``make check``.\n\nIntegration tests\n-----------------\n\nWe have the integration tests for the nghttpx proxy server.  The tests are\nwritten in the `Go programming language <http://golang.org/>`_ and uses\nits testing framework.  We depend on the following libraries:\n\n* golang.org/x/net/http2\n* golang.org/x/net/websocket\n* https://github.com/tatsuhiro-t/go-nghttp2\n\nTo download the above packages, after settings ``GOPATH``, run the\nfollowing command under ``integration-tests`` directory:\n\n.. code-block:: text\n\n    $ make itprep\n\nTo run the tests, run the following command under\n``integration-tests`` directory:\n\n.. code-block:: text\n\n    $ make it\n\nInside the tests, we use port 3009 to run the test subject server.\n\nMigration from v0.7.15 or earlier\n---------------------------------\n\nnghttp2 v1.0.0 introduced several backward incompatible changes.  In\nthis section, we describe these changes and how to migrate to v1.0.0.\n\nALPN protocol ID is now ``h2`` and ``h2c``\n++++++++++++++++++++++++++++++++++++++++++\n\nPreviously we announced ``h2-14`` and ``h2c-14``.  v1.0.0 implements\nfinal protocol version, and we changed ALPN ID to ``h2`` and ``h2c``.\nThe macros ``NGHTTP2_PROTO_VERSION_ID``,\n``NGHTTP2_PROTO_VERSION_ID_LEN``,\n``NGHTTP2_CLEARTEXT_PROTO_VERSION_ID``, and\n``NGHTTP2_CLEARTEXT_PROTO_VERSION_ID_LEN`` have been updated to\nreflect this change.\n\nBasically, existing applications do not have to do anything, just\nrecompiling is enough for this change.\n\nUse word \"client magic\" where we use \"client connection preface\"\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nWe use \"client connection preface\" to mean first 24 bytes of client\nconnection preface.  This is technically not correct, since client\nconnection preface is composed of 24 bytes client magic byte string\nfollowed by SETTINGS frame.  For clarification, we call \"client magic\"\nfor this 24 bytes byte string and updated API.\n\n* ``NGHTTP2_CLIENT_CONNECTION_PREFACE`` was replaced with\n  ``NGHTTP2_CLIENT_MAGIC``.\n* ``NGHTTP2_CLIENT_CONNECTION_PREFACE_LEN`` was replaced with\n  ``NGHTTP2_CLIENT_MAGIC_LEN``.\n* ``NGHTTP2_BAD_PREFACE`` was renamed as ``NGHTTP2_BAD_CLIENT_MAGIC``\n\nThe already deprecated ``NGHTTP2_CLIENT_CONNECTION_HEADER`` and\n``NGHTTP2_CLIENT_CONNECTION_HEADER_LEN`` were removed.\n\nIf application uses these macros, just replace old ones with new ones.\nSince v1.0.0, client magic is sent by library (see next subsection),\nso client application may just remove these macro use.\n\nClient magic is sent by library\n+++++++++++++++++++++++++++++++\n\nPreviously nghttp2 library did not send client magic, which is first\n24 bytes byte string of client connection preface, and client\napplications have to send it by themselves.  Since v1.0.0, client\nmagic is sent by library via first call of ``nghttp2_session_send()``\nor ``nghttp2_session_mem_send()``.\n\nThe client applications which send client magic must remove the\nrelevant code.\n\nRemove HTTP Alternative Services (Alt-Svc) related code\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nAlt-Svc specification is not finalized yet.  To make our API stable,\nwe have decided to remove all Alt-Svc related API from nghttp2.\n\n* ``NGHTTP2_EXT_ALTSVC`` was removed.\n* ``nghttp2_ext_altsvc`` was removed.\n\nWe have already removed the functionality of Alt-Svc in v0.7 series\nand they have been essentially noop.  The application using these\nmacro and struct, remove those lines.\n\nUse nghttp2_error in nghttp2_on_invalid_frame_recv_callback\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nPreviously ``nghttp2_on_invalid_frame_recv_cb_called`` took the\n``error_code``, defined in ``nghttp2_error_code``, as parameter.  But\nthey are not detailed enough to debug.  Therefore, we decided to use\nmore detailed ``nghttp2_error`` values instead.\n\nThe application using this callback should update the callback\nsignature.  If it treats ``error_code`` as HTTP/2 error code, update\nthe code so that it is treated as ``nghttp2_error``.\n\nReceive client magic by default\n+++++++++++++++++++++++++++++++\n\nPreviously nghttp2 did not process client magic (24 bytes byte\nstring).  To make it deal with it, we had to use\n``nghttp2_option_set_recv_client_preface()``.  Since v1.0.0, nghttp2\nprocesses client magic by default and\n``nghttp2_option_set_recv_client_preface()`` was removed.\n\nSome application may want to disable this behaviour, so we added\n``nghttp2_option_set_no_recv_client_magic()`` to achieve this.\n\nThe application using ``nghttp2_option_set_recv_client_preface()``\nwith nonzero value, just remove it.\n\nThe application using ``nghttp2_option_set_recv_client_preface()``\nwith zero value or not using it must use\n``nghttp2_option_set_no_recv_client_magic()`` with nonzero value.\n\nClient, Server and Proxy programs\n---------------------------------\n\nThe ``src`` directory contains the HTTP/2 client, server and proxy programs.\n\nnghttp - client\n+++++++++++++++\n\n``nghttp`` is a HTTP/2 client.  It can connect to the HTTP/2 server\nwith prior knowledge, HTTP Upgrade and NPN/ALPN TLS extension.\n\nIt has verbose output mode for framing information.  Here is sample\noutput from ``nghttp`` client:\n\n.. code-block:: text\n\n    $ nghttp -nv https://nghttp2.org\n    [  0.190] Connected\n    The negotiated protocol: h2\n    [  0.212] recv SETTINGS frame <length=12, flags=0x00, stream_id=0>\n\t      (niv=2)\n\t      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n\t      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n    [  0.212] send SETTINGS frame <length=12, flags=0x00, stream_id=0>\n\t      (niv=2)\n\t      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n\t      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n    [  0.212] send SETTINGS frame <length=0, flags=0x01, stream_id=0>\n\t      ; ACK\n\t      (niv=0)\n    [  0.212] send PRIORITY frame <length=5, flags=0x00, stream_id=3>\n\t      (dep_stream_id=0, weight=201, exclusive=0)\n    [  0.212] send PRIORITY frame <length=5, flags=0x00, stream_id=5>\n\t      (dep_stream_id=0, weight=101, exclusive=0)\n    [  0.212] send PRIORITY frame <length=5, flags=0x00, stream_id=7>\n\t      (dep_stream_id=0, weight=1, exclusive=0)\n    [  0.212] send PRIORITY frame <length=5, flags=0x00, stream_id=9>\n\t      (dep_stream_id=7, weight=1, exclusive=0)\n    [  0.212] send PRIORITY frame <length=5, flags=0x00, stream_id=11>\n\t      (dep_stream_id=3, weight=1, exclusive=0)\n    [  0.212] send HEADERS frame <length=39, flags=0x25, stream_id=13>\n\t      ; END_STREAM | END_HEADERS | PRIORITY\n\t      (padlen=0, dep_stream_id=11, weight=16, exclusive=0)\n\t      ; Open new stream\n\t      :method: GET\n\t      :path: /\n\t      :scheme: https\n\t      :authority: nghttp2.org\n\t      accept: */*\n\t      accept-encoding: gzip, deflate\n\t      user-agent: nghttp2/1.0.1-DEV\n    [  0.221] recv SETTINGS frame <length=0, flags=0x01, stream_id=0>\n\t      ; ACK\n\t      (niv=0)\n    [  0.221] recv (stream_id=13) :method: GET\n    [  0.221] recv (stream_id=13) :scheme: https\n    [  0.221] recv (stream_id=13) :path: /stylesheets/screen.css\n    [  0.221] recv (stream_id=13) :authority: nghttp2.org\n    [  0.221] recv (stream_id=13) accept-encoding: gzip, deflate\n    [  0.222] recv (stream_id=13) user-agent: nghttp2/1.0.1-DEV\n    [  0.222] recv PUSH_PROMISE frame <length=50, flags=0x04, stream_id=13>\n\t      ; END_HEADERS\n\t      (padlen=0, promised_stream_id=2)\n    [  0.222] recv (stream_id=13) :status: 200\n    [  0.222] recv (stream_id=13) date: Thu, 21 May 2015 16:38:14 GMT\n    [  0.222] recv (stream_id=13) content-type: text/html\n    [  0.222] recv (stream_id=13) last-modified: Fri, 15 May 2015 15:38:06 GMT\n    [  0.222] recv (stream_id=13) etag: W/\"555612de-19f6\"\n    [  0.222] recv (stream_id=13) link: </stylesheets/screen.css>; rel=preload; as=stylesheet\n    [  0.222] recv (stream_id=13) content-encoding: gzip\n    [  0.222] recv (stream_id=13) server: nghttpx nghttp2/1.0.1-DEV\n    [  0.222] recv (stream_id=13) via: 1.1 nghttpx\n    [  0.222] recv (stream_id=13) strict-transport-security: max-age=31536000\n    [  0.222] recv HEADERS frame <length=166, flags=0x04, stream_id=13>\n\t      ; END_HEADERS\n\t      (padlen=0)\n\t      ; First response header\n    [  0.222] recv DATA frame <length=2601, flags=0x01, stream_id=13>\n\t      ; END_STREAM\n    [  0.222] recv (stream_id=2) :status: 200\n    [  0.222] recv (stream_id=2) date: Thu, 21 May 2015 16:38:14 GMT\n    [  0.222] recv (stream_id=2) content-type: text/css\n    [  0.222] recv (stream_id=2) last-modified: Fri, 15 May 2015 15:38:06 GMT\n    [  0.222] recv (stream_id=2) etag: W/\"555612de-9845\"\n    [  0.222] recv (stream_id=2) content-encoding: gzip\n    [  0.222] recv (stream_id=2) server: nghttpx nghttp2/1.0.1-DEV\n    [  0.222] recv (stream_id=2) via: 1.1 nghttpx\n    [  0.222] recv (stream_id=2) strict-transport-security: max-age=31536000\n    [  0.222] recv HEADERS frame <length=32, flags=0x04, stream_id=2>\n\t      ; END_HEADERS\n\t      (padlen=0)\n\t      ; First push response header\n    [  0.228] recv DATA frame <length=8715, flags=0x01, stream_id=2>\n\t      ; END_STREAM\n    [  0.228] send GOAWAY frame <length=8, flags=0x00, stream_id=0>\n\t      (last_stream_id=2, error_code=NO_ERROR(0x00), opaque_data(0)=[])\n\nThe HTTP Upgrade is performed like so:\n\n.. code-block:: text\n\n    $ nghttp -nvu http://nghttp2.org\n    [  0.011] Connected\n    [  0.011] HTTP Upgrade request\n    GET / HTTP/1.1\n    Host: nghttp2.org\n    Connection: Upgrade, HTTP2-Settings\n    Upgrade: h2c\n    HTTP2-Settings: AAMAAABkAAQAAP__\n    Accept: */*\n    User-Agent: nghttp2/1.0.1-DEV\n\n\n    [  0.018] HTTP Upgrade response\n    HTTP/1.1 101 Switching Protocols\n    Connection: Upgrade\n    Upgrade: h2c\n\n\n    [  0.018] HTTP Upgrade success\n    [  0.018] recv SETTINGS frame <length=12, flags=0x00, stream_id=0>\n\t      (niv=2)\n\t      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n\t      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n    [  0.018] send SETTINGS frame <length=12, flags=0x00, stream_id=0>\n\t      (niv=2)\n\t      [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n\t      [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n    [  0.018] send SETTINGS frame <length=0, flags=0x01, stream_id=0>\n\t      ; ACK\n\t      (niv=0)\n    [  0.018] send PRIORITY frame <length=5, flags=0x00, stream_id=3>\n\t      (dep_stream_id=0, weight=201, exclusive=0)\n    [  0.018] send PRIORITY frame <length=5, flags=0x00, stream_id=5>\n\t      (dep_stream_id=0, weight=101, exclusive=0)\n    [  0.018] send PRIORITY frame <length=5, flags=0x00, stream_id=7>\n\t      (dep_stream_id=0, weight=1, exclusive=0)\n    [  0.018] send PRIORITY frame <length=5, flags=0x00, stream_id=9>\n\t      (dep_stream_id=7, weight=1, exclusive=0)\n    [  0.018] send PRIORITY frame <length=5, flags=0x00, stream_id=11>\n\t      (dep_stream_id=3, weight=1, exclusive=0)\n    [  0.018] send PRIORITY frame <length=5, flags=0x00, stream_id=1>\n\t      (dep_stream_id=11, weight=16, exclusive=0)\n    [  0.019] recv (stream_id=1) :method: GET\n    [  0.019] recv (stream_id=1) :scheme: http\n    [  0.019] recv (stream_id=1) :path: /stylesheets/screen.css\n    [  0.019] recv (stream_id=1) host: nghttp2.org\n    [  0.019] recv (stream_id=1) user-agent: nghttp2/1.0.1-DEV\n    [  0.019] recv PUSH_PROMISE frame <length=49, flags=0x04, stream_id=1>\n\t      ; END_HEADERS\n\t      (padlen=0, promised_stream_id=2)\n    [  0.019] recv (stream_id=1) :status: 200\n    [  0.019] recv (stream_id=1) date: Thu, 21 May 2015 16:39:16 GMT\n    [  0.019] recv (stream_id=1) content-type: text/html\n    [  0.019] recv (stream_id=1) content-length: 6646\n    [  0.019] recv (stream_id=1) last-modified: Fri, 15 May 2015 15:38:06 GMT\n    [  0.019] recv (stream_id=1) etag: \"555612de-19f6\"\n    [  0.019] recv (stream_id=1) link: </stylesheets/screen.css>; rel=preload; as=stylesheet\n    [  0.019] recv (stream_id=1) accept-ranges: bytes\n    [  0.019] recv (stream_id=1) server: nghttpx nghttp2/1.0.1-DEV\n    [  0.019] recv (stream_id=1) via: 1.1 nghttpx\n    [  0.019] recv HEADERS frame <length=157, flags=0x04, stream_id=1>\n\t      ; END_HEADERS\n\t      (padlen=0)\n\t      ; First response header\n    [  0.019] recv DATA frame <length=6646, flags=0x01, stream_id=1>\n\t      ; END_STREAM\n    [  0.019] recv (stream_id=2) :status: 200\n    [  0.019] recv (stream_id=2) date: Thu, 21 May 2015 16:39:16 GMT\n    [  0.019] recv (stream_id=2) content-type: text/css\n    [  0.019] recv (stream_id=2) content-length: 38981\n    [  0.019] recv (stream_id=2) last-modified: Fri, 15 May 2015 15:38:06 GMT\n    [  0.019] recv (stream_id=2) etag: \"555612de-9845\"\n    [  0.019] recv (stream_id=2) accept-ranges: bytes\n    [  0.019] recv (stream_id=2) server: nghttpx nghttp2/1.0.1-DEV\n    [  0.019] recv (stream_id=2) via: 1.1 nghttpx\n    [  0.019] recv HEADERS frame <length=36, flags=0x04, stream_id=2>\n\t      ; END_HEADERS\n\t      (padlen=0)\n\t      ; First push response header\n    [  0.026] recv DATA frame <length=16384, flags=0x00, stream_id=2>\n    [  0.027] recv DATA frame <length=7952, flags=0x00, stream_id=2>\n    [  0.027] send WINDOW_UPDATE frame <length=4, flags=0x00, stream_id=0>\n\t      (window_size_increment=33343)\n    [  0.032] send WINDOW_UPDATE frame <length=4, flags=0x00, stream_id=2>\n\t      (window_size_increment=33707)\n    [  0.032] recv DATA frame <length=14645, flags=0x01, stream_id=2>\n\t      ; END_STREAM\n    [  0.032] recv SETTINGS frame <length=0, flags=0x01, stream_id=0>\n\t      ; ACK\n\t      (niv=0)\n    [  0.032] send GOAWAY frame <length=8, flags=0x00, stream_id=0>\n\t      (last_stream_id=2, error_code=NO_ERROR(0x00), opaque_data(0)=[])\n\nUsing the ``-s`` option, ``nghttp`` prints out some timing information for\nrequests, sorted by completion time:\n\n.. code-block:: text\n\n    $ nghttp -nas https://nghttp2.org/\n    ***** Statistics *****\n\n    Request timing:\n      responseEnd: the  time  when  last  byte of  response  was  received\n                   relative to connectEnd\n     requestStart: the time  just before  first byte  of request  was sent\n                   relative  to connectEnd.   If  '*' is  shown, this  was\n                   pushed by server.\n          process: responseEnd - requestStart\n             code: HTTP status code\n             size: number  of  bytes  received as  response  body  without\n                   inflation.\n              URI: request URI\n\n    see http://www.w3.org/TR/resource-timing/#processing-model\n\n    sorted by 'complete'\n\n    id  responseEnd requestStart  process code size request path\n     13    +37.19ms       +280us  36.91ms  200   2K /\n      2    +72.65ms *   +36.38ms  36.26ms  200   8K /stylesheets/screen.css\n     17    +77.43ms     +38.67ms  38.75ms  200   3K /javascripts/octopress.js\n     15    +78.12ms     +38.66ms  39.46ms  200   3K /javascripts/modernizr-2.0.js\n\nUsing the ``-r`` option, ``nghttp`` writes more detailed timing data to\nthe given file in HAR format.\n\nnghttpd - server\n++++++++++++++++\n\n``nghttpd`` is a multi-threaded static web server.\n\nBy default, it uses SSL/TLS connection.  Use ``--no-tls`` option to\ndisable it.\n\n``nghttpd`` only accepts HTTP/2 connections via NPN/ALPN or direct\nHTTP/2 connections.  No HTTP Upgrade is supported.\n\nThe ``-p`` option allows users to configure server push.\n\nJust like ``nghttp``, it has a verbose output mode for framing\ninformation.  Here is sample output from ``nghttpd``:\n\n.. code-block:: text\n\n    $ nghttpd --no-tls -v 8080\n    IPv4: listen 0.0.0.0:8080\n    IPv6: listen :::8080\n    [id=1] [  1.521] send SETTINGS frame <length=6, flags=0x00, stream_id=0>\n              (niv=1)\n              [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n    [id=1] [  1.521] recv SETTINGS frame <length=12, flags=0x00, stream_id=0>\n              (niv=2)\n              [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n              [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n    [id=1] [  1.521] recv SETTINGS frame <length=0, flags=0x01, stream_id=0>\n              ; ACK\n              (niv=0)\n    [id=1] [  1.521] recv PRIORITY frame <length=5, flags=0x00, stream_id=3>\n              (dep_stream_id=0, weight=201, exclusive=0)\n    [id=1] [  1.521] recv PRIORITY frame <length=5, flags=0x00, stream_id=5>\n              (dep_stream_id=0, weight=101, exclusive=0)\n    [id=1] [  1.521] recv PRIORITY frame <length=5, flags=0x00, stream_id=7>\n              (dep_stream_id=0, weight=1, exclusive=0)\n    [id=1] [  1.521] recv PRIORITY frame <length=5, flags=0x00, stream_id=9>\n              (dep_stream_id=7, weight=1, exclusive=0)\n    [id=1] [  1.521] recv PRIORITY frame <length=5, flags=0x00, stream_id=11>\n              (dep_stream_id=3, weight=1, exclusive=0)\n    [id=1] [  1.521] recv (stream_id=13) :method: GET\n    [id=1] [  1.521] recv (stream_id=13) :path: /\n    [id=1] [  1.521] recv (stream_id=13) :scheme: http\n    [id=1] [  1.521] recv (stream_id=13) :authority: localhost:8080\n    [id=1] [  1.521] recv (stream_id=13) accept: */*\n    [id=1] [  1.521] recv (stream_id=13) accept-encoding: gzip, deflate\n    [id=1] [  1.521] recv (stream_id=13) user-agent: nghttp2/1.0.0-DEV\n    [id=1] [  1.521] recv HEADERS frame <length=41, flags=0x25, stream_id=13>\n              ; END_STREAM | END_HEADERS | PRIORITY\n              (padlen=0, dep_stream_id=11, weight=16, exclusive=0)\n              ; Open new stream\n    [id=1] [  1.521] send SETTINGS frame <length=0, flags=0x01, stream_id=0>\n              ; ACK\n              (niv=0)\n    [id=1] [  1.521] send HEADERS frame <length=86, flags=0x04, stream_id=13>\n              ; END_HEADERS\n              (padlen=0)\n              ; First response header\n              :status: 200\n              server: nghttpd nghttp2/1.0.0-DEV\n              content-length: 10\n              cache-control: max-age=3600\n              date: Fri, 15 May 2015 14:49:04 GMT\n              last-modified: Tue, 30 Sep 2014 12:40:52 GMT\n    [id=1] [  1.522] send DATA frame <length=10, flags=0x01, stream_id=13>\n              ; END_STREAM\n    [id=1] [  1.522] stream_id=13 closed\n    [id=1] [  1.522] recv GOAWAY frame <length=8, flags=0x00, stream_id=0>\n              (last_stream_id=0, error_code=NO_ERROR(0x00), opaque_data(0)=[])\n    [id=1] [  1.522] closed\n\nnghttpx - proxy\n+++++++++++++++\n\n``nghttpx`` is a multi-threaded reverse proxy for HTTP/2, and\nHTTP/1.1, and powers http://nghttp2.org and supports HTTP/2 server\npush.\n\nWe reworked ``nghttpx`` command-line interface, and as a result, there\nare several incompatibles from 1.8.0 or earlier.  This is necessary to\nextend its capability, and secure the further feature enhancements in\nthe future release.  Please read `Migration from nghttpx v1.8.0 or\nearlier\n<https://nghttp2.org/documentation/nghttpx-howto.html#migration-from-nghttpx-v1-8-0-or-earlier>`_\nto know how to migrate from earlier releases.\n\n``nghttpx`` implements `important performance-oriented features\n<https://istlsfastyet.com/#server-performance>`_ in TLS, such as\nsession IDs, session tickets (with automatic key rotation), OCSP\nstapling, dynamic record sizing, ALPN/NPN, forward secrecy and HTTP/2.\n``nghttpx`` also offers the functionality to share session cache and\nticket keys among multiple ``nghttpx`` instances via memcached.\n\n``nghttpx`` has 2 operation modes:\n\n================== ================ ================ =============\nMode option        Frontend         Backend          Note\n================== ================ ================ =============\ndefault mode       HTTP/2, HTTP/1.1 HTTP/1.1, HTTP/2 Reverse proxy\n``--http2-proxy``  HTTP/2, HTTP/1.1 HTTP/1.1, HTTP/2 Forward proxy\n================== ================ ================ =============\n\nThe interesting mode at the moment is the default mode.  It works like\na reverse proxy and listens for HTTP/2, and HTTP/1.1 and can be\ndeployed as a SSL/TLS terminator for existing web server.\n\nIn all modes, the frontend connections are encrypted by SSL/TLS by\ndefault.  To disable encryption, use the ``no-tls`` keyword in\n``--frontend`` option.  If encryption is disabled, incoming HTTP/1.1\nconnections can be upgraded to HTTP/2 through HTTP Upgrade.  On the\nother hard, backend connections are not encrypted by default.  To\nencrypt backend connections, use ``tls`` keyword in ``--backend``\noption.\n\n``nghttpx`` supports a configuration file.  See the ``--conf`` option and\nsample configuration file ``nghttpx.conf.sample``.\n\nIn the default mode, ``nghttpx`` works as reverse proxy to the backend\nserver:\n\n.. code-block:: text\n\n    Client <-- (HTTP/2, HTTP/1.1) --> nghttpx <-- (HTTP/1.1, HTTP/2) --> Web Server\n                                    [reverse proxy]\n\nWith the ``--http2-proxy`` option, it works as forward proxy, and it\nis so called secure HTTP/2 proxy:\n\n.. code-block:: text\n\n    Client <-- (HTTP/2, HTTP/1.1) --> nghttpx <-- (HTTP/1.1) --> Proxy\n                                     [secure proxy]          (e.g., Squid, ATS)\n\nThe ``Client`` in the above example needs to be configured to use\n``nghttpx`` as secure proxy.\n\nAt the time of this writing, both Chrome and Firefox support secure\nHTTP/2 proxy.  One way to configure Chrome to use a secure proxy is to\ncreate a proxy.pac script like this:\n\n.. code-block:: javascript\n\n    function FindProxyForURL(url, host) {\n        return \"HTTPS SERVERADDR:PORT\";\n    }\n\n``SERVERADDR`` and ``PORT`` is the hostname/address and port of the\nmachine nghttpx is running on.  Please note that Chrome requires a valid\ncertificate for secure proxy.\n\nThen run Chrome with the following arguments:\n\n.. code-block:: text\n\n    $ google-chrome --proxy-pac-url=file:///path/to/proxy.pac --use-npn\n\nThe backend HTTP/2 connections can be tunneled through an HTTP proxy.\nThe proxy is specified using ``--backend-http-proxy-uri``.  The\nfollowing figure illustrates how nghttpx talks to the outside HTTP/2\nproxy through an HTTP proxy:\n\n.. code-block:: text\n\n    Client <-- (HTTP/2, HTTP/1.1) --> nghttpx <-- (HTTP/2) --\n\n            --===================---> HTTP/2 Proxy\n              (HTTP proxy tunnel)     (e.g., nghttpx -s)\n\nBenchmarking tool\n-----------------\n\nThe ``h2load`` program is a benchmarking tool for HTTP/2.  The UI of\n``h2load`` is heavily inspired by ``weighttp``\n(https://github.com/lighttpd/weighttp).  The typical usage is as\nfollows:\n\n.. code-block:: text\n\n    $ h2load -n100000 -c100 -m100 https://localhost:8443/\n    starting benchmark...\n    spawning thread #0: 100 concurrent clients, 100000 total requests\n    Protocol: TLSv1.2\n    Cipher: ECDHE-RSA-AES128-GCM-SHA256\n    Server Temp Key: ECDH P-256 256 bits\n    progress: 10% done\n    progress: 20% done\n    progress: 30% done\n    progress: 40% done\n    progress: 50% done\n    progress: 60% done\n    progress: 70% done\n    progress: 80% done\n    progress: 90% done\n    progress: 100% done\n\n    finished in 771.26ms, 129658 req/s, 4.71MB/s\n    requests: 100000 total, 100000 started, 100000 done, 100000 succeeded, 0 failed, 0 errored\n    status codes: 100000 2xx, 0 3xx, 0 4xx, 0 5xx\n    traffic: 3812300 bytes total, 1009900 bytes headers, 1000000 bytes data\n                         min         max         mean         sd        +/- sd\n    time for request:    25.12ms    124.55ms     51.07ms     15.36ms    84.87%\n    time for connect:   208.94ms    254.67ms    241.38ms      7.95ms    63.00%\n    time to 1st byte:   209.11ms    254.80ms    241.51ms      7.94ms    63.00%\n\nThe above example issued total 100,000 requests, using 100 concurrent\nclients (in other words, 100 HTTP/2 sessions), and a maximum of 100 streams\nper client.  With the ``-t`` option, ``h2load`` will use multiple native\nthreads to avoid saturating a single core on client side.\n\n.. warning::\n\n   **Don't use this tool against publicly available servers.** That is\n   considered a DOS attack.  Please only use it against your private\n   servers.\n\nHPACK tools\n-----------\n\nThe ``src`` directory contains the HPACK tools.  The ``deflatehd`` program is a\ncommand-line header compression tool.  The ``inflatehd`` program is a\ncommand-line header decompression tool.  Both tools read input from\nstdin and write output to stdout.  Errors are written to stderr.\nThey take JSON as input and output.  We  (mostly) use the same JSON data\nformat described at https://github.com/http2jp/hpack-test-case.\n\ndeflatehd - header compressor\n+++++++++++++++++++++++++++++\n\nThe ``deflatehd`` program reads JSON data or HTTP/1-style header fields from\nstdin and outputs compressed header block in JSON.\n\nFor the JSON input, the root JSON object must include a ``cases`` key.\nIts value has to include the sequence of input header set.  They share\nthe same compression context and are processed in the order they\nappear.  Each item in the sequence is a JSON object and it must\ninclude a ``headers`` key.  Its value is an array of JSON objects,\nwhich includes exactly one name/value pair.\n\nExample:\n\n.. code-block:: json\n\n    {\n      \"cases\":\n      [\n        {\n          \"headers\": [\n            { \":method\": \"GET\" },\n            { \":path\": \"/\" }\n          ]\n        },\n        {\n          \"headers\": [\n            { \":method\": \"POST\" },\n            { \":path\": \"/\" }\n          ]\n        }\n      ]\n    }\n\n\nWith the ``-t`` option, the program can accept more familiar HTTP/1 style\nheader field blocks.  Each header set is delimited by an empty line:\n\nExample:\n\n.. code-block:: text\n\n    :method: GET\n    :scheme: https\n    :path: /\n\n    :method: POST\n    user-agent: nghttp2\n\nThe output is in JSON object.  It should include a ``cases`` key and its\nvalue is an array of JSON objects, which has at least the following keys:\n\nseq\n    The index of header set in the input.\n\ninput_length\n    The sum of the length of the name/value pairs in the input.\n\noutput_length\n    The length of the compressed header block.\n\npercentage_of_original_size\n    ``output_length`` / ``input_length`` * 100\n\nwire\n    The compressed header block as a hex string.\n\nheaders\n    The input header set.\n\nheader_table_size\n    The header table size adjusted before deflating the header set.\n\nExamples:\n\n.. code-block:: json\n\n    {\n      \"cases\":\n      [\n        {\n          \"seq\": 0,\n          \"input_length\": 66,\n          \"output_length\": 20,\n          \"percentage_of_original_size\": 30.303030303030305,\n          \"wire\": \"01881f3468e5891afcbf83868a3d856659c62e3f\",\n          \"headers\": [\n            {\n              \":authority\": \"example.org\"\n            },\n            {\n              \":method\": \"GET\"\n            },\n            {\n              \":path\": \"/\"\n            },\n            {\n              \":scheme\": \"https\"\n            },\n            {\n              \"user-agent\": \"nghttp2\"\n            }\n          ],\n          \"header_table_size\": 4096\n        }\n        ,\n        {\n          \"seq\": 1,\n          \"input_length\": 74,\n          \"output_length\": 10,\n          \"percentage_of_original_size\": 13.513513513513514,\n          \"wire\": \"88448504252dd5918485\",\n          \"headers\": [\n            {\n              \":authority\": \"example.org\"\n            },\n            {\n              \":method\": \"POST\"\n            },\n            {\n              \":path\": \"/account\"\n            },\n            {\n              \":scheme\": \"https\"\n            },\n            {\n              \"user-agent\": \"nghttp2\"\n            }\n          ],\n          \"header_table_size\": 4096\n        }\n      ]\n    }\n\n\nThe output can be used as the input for ``inflatehd`` and\n``deflatehd``.\n\nWith the ``-d`` option, the extra ``header_table`` key is added and its\nassociated value includes the state of dynamic header table after the\ncorresponding header set was processed.  The value includes at least\nthe following keys:\n\nentries\n    The entry in the header table.  If ``referenced`` is ``true``, it\n    is in the reference set.  The ``size`` includes the overhead (32\n    bytes).  The ``index`` corresponds to the index of header table.\n    The ``name`` is the header field name and the ``value`` is the\n    header field value.\n\nsize\n    The sum of the spaces entries occupied, this includes the\n    entry overhead.\n\nmax_size\n    The maximum header table size.\n\ndeflate_size\n    The sum of the spaces entries occupied within\n    ``max_deflate_size``.\n\nmax_deflate_size\n    The maximum header table size the encoder uses.  This can be smaller\n    than ``max_size``.  In this case, the encoder only uses up to first\n    ``max_deflate_size`` buffer.  Since the header table size is still\n    ``max_size``, the encoder has to keep track of entries outside the\n    ``max_deflate_size`` but inside the ``max_size`` and make sure\n    that they are no longer referenced.\n\nExample:\n\n.. code-block:: json\n\n    {\n      \"cases\":\n      [\n        {\n          \"seq\": 0,\n          \"input_length\": 66,\n          \"output_length\": 20,\n          \"percentage_of_original_size\": 30.303030303030305,\n          \"wire\": \"01881f3468e5891afcbf83868a3d856659c62e3f\",\n          \"headers\": [\n            {\n              \":authority\": \"example.org\"\n            },\n            {\n              \":method\": \"GET\"\n            },\n            {\n              \":path\": \"/\"\n            },\n            {\n              \":scheme\": \"https\"\n            },\n            {\n              \"user-agent\": \"nghttp2\"\n            }\n          ],\n          \"header_table_size\": 4096,\n          \"header_table\": {\n            \"entries\": [\n              {\n                \"index\": 1,\n                \"name\": \"user-agent\",\n                \"value\": \"nghttp2\",\n                \"referenced\": true,\n                \"size\": 49\n              },\n              {\n                \"index\": 2,\n                \"name\": \":scheme\",\n                \"value\": \"https\",\n                \"referenced\": true,\n                \"size\": 44\n              },\n              {\n                \"index\": 3,\n                \"name\": \":path\",\n                \"value\": \"/\",\n                \"referenced\": true,\n                \"size\": 38\n              },\n              {\n                \"index\": 4,\n                \"name\": \":method\",\n                \"value\": \"GET\",\n                \"referenced\": true,\n                \"size\": 42\n              },\n              {\n                \"index\": 5,\n                \"name\": \":authority\",\n                \"value\": \"example.org\",\n                \"referenced\": true,\n                \"size\": 53\n              }\n            ],\n            \"size\": 226,\n            \"max_size\": 4096,\n            \"deflate_size\": 226,\n            \"max_deflate_size\": 4096\n          }\n        }\n        ,\n        {\n          \"seq\": 1,\n          \"input_length\": 74,\n          \"output_length\": 10,\n          \"percentage_of_original_size\": 13.513513513513514,\n          \"wire\": \"88448504252dd5918485\",\n          \"headers\": [\n            {\n              \":authority\": \"example.org\"\n            },\n            {\n              \":method\": \"POST\"\n            },\n            {\n              \":path\": \"/account\"\n            },\n            {\n              \":scheme\": \"https\"\n            },\n            {\n              \"user-agent\": \"nghttp2\"\n            }\n          ],\n          \"header_table_size\": 4096,\n          \"header_table\": {\n            \"entries\": [\n              {\n                \"index\": 1,\n                \"name\": \":method\",\n                \"value\": \"POST\",\n                \"referenced\": true,\n                \"size\": 43\n              },\n              {\n                \"index\": 2,\n                \"name\": \"user-agent\",\n                \"value\": \"nghttp2\",\n                \"referenced\": true,\n                \"size\": 49\n              },\n              {\n                \"index\": 3,\n                \"name\": \":scheme\",\n                \"value\": \"https\",\n                \"referenced\": true,\n                \"size\": 44\n              },\n              {\n                \"index\": 4,\n                \"name\": \":path\",\n                \"value\": \"/\",\n                \"referenced\": false,\n                \"size\": 38\n              },\n              {\n                \"index\": 5,\n                \"name\": \":method\",\n                \"value\": \"GET\",\n                \"referenced\": false,\n                \"size\": 42\n              },\n              {\n                \"index\": 6,\n                \"name\": \":authority\",\n                \"value\": \"example.org\",\n                \"referenced\": true,\n                \"size\": 53\n              }\n            ],\n            \"size\": 269,\n            \"max_size\": 4096,\n            \"deflate_size\": 269,\n            \"max_deflate_size\": 4096\n          }\n        }\n      ]\n    }\n\ninflatehd - header decompressor\n+++++++++++++++++++++++++++++++\n\nThe ``inflatehd`` program reads JSON data from stdin and outputs decompressed\nname/value pairs in JSON.\n\nThe root JSON object must include the ``cases`` key.  Its value has to\ninclude the sequence of compressed header blocks.  They share the same\ncompression context and are processed in the order they appear.  Each\nitem in the sequence is a JSON object and it must have at least a\n``wire`` key.  Its value is a compressed header block as a hex string.\n\nExample:\n\n.. code-block:: json\n\n    {\n      \"cases\":\n      [\n        { \"wire\": \"8285\" },\n        { \"wire\": \"8583\" }\n      ]\n    }\n\nThe output is a JSON object.  It should include a ``cases`` key and its\nvalue is an array of JSON objects, which has at least following keys:\n\nseq\n    The index of the header set in the input.\n\nheaders\n    A JSON array that includes decompressed name/value pairs.\n\nwire\n    The compressed header block as a hex string.\n\nheader_table_size\n    The header table size adjusted before inflating compressed header\n    block.\n\nExample:\n\n.. code-block:: json\n\n    {\n      \"cases\":\n      [\n        {\n          \"seq\": 0,\n          \"wire\": \"01881f3468e5891afcbf83868a3d856659c62e3f\",\n          \"headers\": [\n            {\n              \":authority\": \"example.org\"\n            },\n            {\n              \":method\": \"GET\"\n            },\n            {\n              \":path\": \"/\"\n            },\n            {\n              \":scheme\": \"https\"\n            },\n            {\n              \"user-agent\": \"nghttp2\"\n            }\n          ],\n          \"header_table_size\": 4096\n        }\n        ,\n        {\n          \"seq\": 1,\n          \"wire\": \"88448504252dd5918485\",\n          \"headers\": [\n            {\n              \":method\": \"POST\"\n            },\n            {\n              \":path\": \"/account\"\n            },\n            {\n              \"user-agent\": \"nghttp2\"\n            },\n            {\n              \":scheme\": \"https\"\n            },\n            {\n              \":authority\": \"example.org\"\n            }\n          ],\n          \"header_table_size\": 4096\n        }\n      ]\n    }\n\nThe output can be used as the input for ``deflatehd`` and\n``inflatehd``.\n\nWith the ``-d`` option, the extra ``header_table`` key is added and its\nassociated value includes the state of the dynamic header table after the\ncorresponding header set was processed.  The format is the same as\n``deflatehd``.\n\nlibnghttp2_asio: High level HTTP/2 C++ library\n----------------------------------------------\n\nlibnghttp2_asio is C++ library built on top of libnghttp2 and provides\nhigh level abstraction API to build HTTP/2 applications.  It depends\non the Boost::ASIO library and OpenSSL.  Currently libnghttp2_asio\nprovides both client and server APIs.\n\nlibnghttp2_asio is not built by default.  Use the ``--enable-asio-lib``\nconfigure flag to build libnghttp2_asio.  The required Boost libraries\nare:\n\n* Boost::Asio\n* Boost::System\n* Boost::Thread\n\nThe server API is designed to build an HTTP/2 server very easily to utilize\nC++14 anonymous functions and closures.  The bare minimum example of\nan HTTP/2 server looks like this:\n\n.. code-block:: cpp\n\n    #include <iostream>\n\n    #include <nghttp2/asio_http2_server.h>\n\n    using namespace nghttp2::asio_http2;\n    using namespace nghttp2::asio_http2::server;\n\n    int main(int argc, char *argv[]) {\n      boost::system::error_code ec;\n      http2 server;\n\n      server.handle(\"/\", [](const request &req, const response &res) {\n        res.write_head(200);\n        res.end(\"hello, world\\n\");\n      });\n\n      if (server.listen_and_serve(ec, \"localhost\", \"3000\")) {\n        std::cerr << \"error: \" << ec.message() << std::endl;\n      }\n    }\n\nHere is sample code to use the client API:\n\n.. code-block:: cpp\n\n    #include <iostream>\n\n    #include <nghttp2/asio_http2_client.h>\n\n    using boost::asio::ip::tcp;\n\n    using namespace nghttp2::asio_http2;\n    using namespace nghttp2::asio_http2::client;\n\n    int main(int argc, char *argv[]) {\n      boost::system::error_code ec;\n      boost::asio::io_service io_service;\n\n      // connect to localhost:3000\n      session sess(io_service, \"localhost\", \"3000\");\n\n      sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n        boost::system::error_code ec;\n\n        auto req = sess.submit(ec, \"GET\", \"http://localhost:3000/\");\n\n        req->on_response([](const response &res) {\n          // print status code and response header fields.\n          std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n          for (auto &kv : res.header()) {\n            std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n          }\n          std::cerr << std::endl;\n\n          res.on_data([](const uint8_t *data, std::size_t len) {\n            std::cerr.write(reinterpret_cast<const char *>(data), len);\n            std::cerr << std::endl;\n          });\n        });\n\n        req->on_close([&sess](uint32_t error_code) {\n          // shutdown session after first request was done.\n          sess.shutdown();\n        });\n      });\n\n      sess.on_error([](const boost::system::error_code &ec) {\n        std::cerr << \"error: \" << ec.message() << std::endl;\n      });\n\n      io_service.run();\n    }\n\nFor more details, see the documentation of libnghttp2_asio.\n\nPython bindings\n---------------\n\nThe ``python`` directory contains nghttp2 Python bindings.  The\nbindings currently provide HPACK compressor and decompressor classes\nand an HTTP/2 server.\n\nThe extension module is called ``nghttp2``.\n\n``make`` will build the bindings and target Python version is\ndetermined by the ``configure`` script.  If the detected Python version is not\nwhat you expect, specify a path to Python executable in a ``PYTHON``\nvariable as an argument to configure script (e.g., ``./configure\nPYTHON=/usr/bin/python3.5``).\n\nThe following example code illustrates basic usage of the HPACK compressor\nand decompressor in Python:\n\n.. code-block:: python\n\n    import binascii\n    import nghttp2\n\n    deflater = nghttp2.HDDeflater()\n    inflater = nghttp2.HDInflater()\n\n    data = deflater.deflate([(b'foo', b'bar'),\n                             (b'baz', b'buz')])\n    print(binascii.b2a_hex(data))\n\n    hdrs = inflater.inflate(data)\n    print(hdrs)\n\nThe ``nghttp2.HTTP2Server`` class builds on top of the asyncio event\nloop.  On construction, *RequestHandlerClass* must be given, which\nmust be a subclass of ``nghttp2.BaseRequestHandler`` class.\n\nThe ``BaseRequestHandler`` class is used to handle the HTTP/2 stream.\nBy default, it does nothing.  It must be subclassed to handle each\nevent callback method.\n\nThe first callback method invoked is ``on_headers()``.  It is called\nwhen HEADERS frame, which includes the request header fields, has arrived.\n\nIf the request has a request body, ``on_data(data)`` is invoked for each\nchunk of received data.\n\nOnce the entire request is received, ``on_request_done()`` is invoked.\n\nWhen the stream is closed, ``on_close(error_code)`` is called.\n\nThe application can send a response using ``send_response()`` method.\nIt can be used in ``on_headers()``, ``on_data()`` or\n``on_request_done()``.\n\nThe application can push resources using the ``push()`` method.  It must be\nused before the ``send_response()`` call.\n\nThe following instance variables are available:\n\nclient_address\n    Contains a tuple of the form (host, port) referring to the\n    client's address.\n\nstream_id\n    Stream ID of this stream.\n\nscheme\n    Scheme of the request URI.  This is a value of :scheme header\n    field.\n\nmethod\n    Method of this stream.  This is a value of :method header field.\n\nhost\n    This is a value of :authority or host header field.\n\npath\n    This is a value of :path header field.\n\nThe following example illustrates the HTTP2Server and\nBaseRequestHandler usage:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n\n    import io, ssl\n    import nghttp2\n\n    class Handler(nghttp2.BaseRequestHandler):\n\n        def on_headers(self):\n            self.push(path='/css/bootstrap.css',\n                      request_headers = [('content-length', '3')],\n                      status=200,\n                      body='foo')\n\n            self.push(path='/js/bootstrap.js',\n                      method='GET',\n                      request_headers = [('content-length', '10')],\n                      status=200,\n                      body='foobarbuzz')\n\n            self.send_response(status=200,\n                               headers = [('content-type', 'text/plain')],\n                               body=io.BytesIO(b'nghttp2-python FTW'))\n\n    ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n    ctx.options = ssl.OP_ALL | ssl.OP_NO_SSLv2\n    ctx.load_cert_chain('server.crt', 'server.key')\n\n    # give None to ssl to make the server non-SSL/TLS\n    server = nghttp2.HTTP2Server(('127.0.0.1', 8443), Handler, ssl=ctx)\n    server.serve_forever()\n\nContribution\n------------\n\n[This text was composed based on 1.2. License section of curl/libcurl\nproject.]\n\nWhen contributing with code, you agree to put your changes and new\ncode under the same license nghttp2 is already using unless stated and\nagreed otherwise.\n\nWhen changing existing source code, do not alter the copyright of\nthe original file(s).  The copyright will still be owned by the\noriginal creator(s) or those who have been assigned copyright by the\noriginal author(s).\n\nBy submitting a patch to the nghttp2 project, you (or your employer, as\nthe case may be) agree to assign the copyright of your submission to us.\n.. the above really needs to be reworded to pass legal muster.\nWe will credit you for your\nchanges as far as possible, to give credit but also to keep a trace\nback to who made what changes.  Please always provide us with your\nfull real name when contributing!\n\nSee `Contribution Guidelines\n<https://nghttp2.org/documentation/contribute.html>`_ for more\ndetails.\n\nReporting vulnerability\n-----------------------\n\nIf you find a vulnerability in our software, please send the email to\n\"tatsuhiro.t at gmail dot com\" about its details instead of submitting\nissues on github issue page.  It is a standard practice not to\ndisclose vulnerability information publicly until a fixed version is\nreleased, or mitigation is worked out.\n\nIn the future, we may setup a dedicated mail address for this purpose.\n\nRelease schedule\n----------------\n\nIn general, we follow `Semantic Versioning <http://semver.org/>`_.  We\nrelease MINOR version update every month, and usually we ship it\naround 25th day of every month.\n\nWe may release PATCH releases between the regular releases, mainly for\nsevere security bug fixes.\n\nWe have no plan to break API compatibility changes involving soname\nbump, so MAJOR version will stay 1 for the foreseeable future.\n\nLicense\n-------\n\nThe MIT License\n\n\n",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "",
        "keywords": "",
        "license": "BSD License",
        "maintainer": "<xiewenzhen>",
        "maintainer_email": "<1078207098@qq.com>",
        "name": "listlessly-detect",
        "package_url": "https://pypi.org/project/listlessly-detect/",
        "platform": "all",
        "project_url": "https://pypi.org/project/listlessly-detect/",
        "project_urls": null,
        "release_url": "https://pypi.org/project/listlessly-detect/0.1/",
        "requires_dist": [
            "xgboost (==0.81)",
            "dlib (==19.4.0)",
            "seaborn (==0.9.0)",
            "numpy (==1.15.2)",
            "scikit-image (==0.14.0)",
            "scipy (==1.1.0)",
            "Keras (==2.2.4)",
            "tensorflow (==1.10.0)",
            "imutils (==0.5.2)",
            "pandas (==0.23.4)",
            "matplotlib (==3.0.2)",
            "imageio (==2.5.0)",
            "skimage",
            "scikit-learn (==0.20.2)"
        ],
        "requires_python": "",
        "summary": "This is an installation package that detects the emotional situation of people in the video, including image segmentation, feature extraction, and video classification.",
        "version": "0.1"
    },
    "last_serial": 4810495,
    "releases": {
        "0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "70483a7b13d12c57b5a74661b2a6af3f",
                    "sha256": "9489e850c4c3a0e2e63fe91649657035a4a9caeda9bf3464a562236462feb3ed"
                },
                "downloads": -1,
                "filename": "listlessly_detect-0.1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "70483a7b13d12c57b5a74661b2a6af3f",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 21744,
                "upload_time": "2019-02-12T12:19:55",
                "url": "https://files.pythonhosted.org/packages/52/23/375fa4aff1d6243e055f8c1aa09af64aada984fa3d70bedd8da3836d9bbc/listlessly_detect-0.1-py2.py3-none-any.whl"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "70483a7b13d12c57b5a74661b2a6af3f",
                "sha256": "9489e850c4c3a0e2e63fe91649657035a4a9caeda9bf3464a562236462feb3ed"
            },
            "downloads": -1,
            "filename": "listlessly_detect-0.1-py2.py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "70483a7b13d12c57b5a74661b2a6af3f",
            "packagetype": "bdist_wheel",
            "python_version": "py2.py3",
            "requires_python": null,
            "size": 21744,
            "upload_time": "2019-02-12T12:19:55",
            "url": "https://files.pythonhosted.org/packages/52/23/375fa4aff1d6243e055f8c1aa09af64aada984fa3d70bedd8da3836d9bbc/listlessly_detect-0.1-py2.py3-none-any.whl"
        }
    ]
}