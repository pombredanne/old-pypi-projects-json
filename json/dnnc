{
    "info": {
        "author": "Rohit Sharma et. al.",
        "author_email": "rohit@find-domain-name-on-github.com",
        "bugtrack_url": null,
        "classifiers": [
            "License :: OSI Approved :: MIT License",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3"
        ],
        "description": "# dnn Compiler\n---\n\n## \ud83d\udcdb Introduction \n\ndnn Compiler is designed to **enable and perform** deep learning neural networks by focussing on features of custom ai-accelerators like FPGAs, eFPGAs and other embedded devices like [raspberry-pi](https://www.raspberrypi.org/), [odroid](https://www.hardkernel.com/), [arduino](https://www.arduino.cc/), [SparkFun Edge](https://www.sparkfun.com/products/15170), [risc-V](https://www.amazon.com/Seeed-Studio-Sipeed-Maixduino-RISC-V/dp/B07SW9ZWQQ) and others.\n\ndnn Compiler is ahead of time compiler producing optimized executable based on [LLVM compiler tool chain](https://llvm.org/) and [openAcc](https://www.openacc.org/) specialized for deep neural networks with [ONNX](https://onnx.ai/) as front end.\n\n\n## \ud83d\udcdd Design\n\nMain component of **dnn Compiler** has been designed to represent and optimize the common deep learning networks in high level graph IR and to transform the computation graph to minimize memory utilization, optimize data layout and fuse computation patterns for different hardware backends.\n\n<img width=\"800\" alt=\"Architecture\" src=\"misc/dnnCompilerArch.jpg\">\n\nRead more at [high level design document](docs/highLevelDesign.md) \n\n## \ud83d\udca7 PreRequisites\n\n* [ONNX 1.5](https://github.com/onnx/onnx/tree/rel-1.5.0#installation)\n* [LLVM 8.0](http://releases.llvm.org/8.0.0/docs/GettingStarted.html#getting-started-quickly-a-summary)\n* [Python 3.6](https://www.python.org/downloads/release/python-360/)\n* [SWIG 3.0](https://sourceforge.net/projects/swig/files/swig/swig-3.0.12/)\n\n## \u2699 Installation\nbuild and install dnn Compiler locally from source code with following steps\n\n### \u2b55 Ubuntu 18.04\nYou can install ubuntu18.04 on windows [Watch HowTo video here](https://www.youtube.com/watch?v=QbmRXJJKsvs) or [Google it](https://www.google.com/search?q=how+to+setup+ubuntu+on+virtualbox&oq=how+to+setup+ubuntu+on+virtual+box)\n\nFollow the steps to install pre-requisites\n```\nsudo apt-get update\nsudo apt-get install build-essential python3.6-dev python3-pip swig doxygen clang-format clang clang-8 llvm-8 llvm-8-dev\nsudo pip3 install numpy onnx\n# TODO: libprotobuf-dev protobuf-compiler cmake graphviz libpng-dev wget opencl-headers libgoogle-glog-dev\n```\n\nOnce you are done, build dnnCompiler\n```\ngit clone https://github.com/ai-techsystems/dnnCompiler.git \ncd dnnCompiler\nmake\n```\n\n#### \ud83d\udcdc Output\n```\nfind include src swig -name \\*.h -print0 -o -name \\*.cpp -print0 | xargs -0 -P8 -n1 clang-format -i\nmake -C src\nmake[1]: Entering directory 'dnnCompiler/src'\nmake -C core\nmake[2]: Entering directory 'dnnCompiler/src/core'\ncompiling broadcast.cpp\n/usr/bin/g++ -O3 -Wall -std=c++14 -fPIC -march=native -msse2 \\\n    -isystem ./packages/eigen-eigen-323c052e1731 -I./include \\\n    -c broadcast.cpp -o obj/broadcast.o\ncompiling tensor.cpp\n...\n...\n/usr/bin/g++ -shared  ./obj/dnnc_swig.o ./obj/dnnc_pyutils.o ./obj/dnnc_api.o -o lib/libdnnc.so\nln -s -f lib/libdnnc.so _dnnc.so\n/usr/bin/python3 ../test/swig/basic.py\n```\n\n## \ud83c\udfc3\u200d\u2642\ufe0f Usage\n```\n[build]$ wget https://onnxzoo.blob.core.windows.net/models/opset_8/mnist/mnist.tar.gz\n[build]$ tar xvf mnist.tar.gx\n[build]$ ./dnnc\n```\n*Usage:  ./dnnc onnx_model_file*\n```\n[build]$ ./dnnc mnist/model.onnx\nreading CNTK graph from mnist/model.onnx \npopulating graph ...\n```\n\n---\n\n## \u2795 Contribute\n\ndnn Compiler adopts apache committer model, we aim to create an open source project that is maintained and owned by the community. Checkout the Contributor Guide.\n\n## \ud83d\ude4f Acknowledgement \nWe acknowledge the efforts predecessor projects like [LLVM](https://llvm.org/), [ONNX](https://onnx.ai/) etc. to make this project a reality.\n\n---\n\n## \ud83d\udd75\ufe0f\u200d\u2642\ufe0f Why compiler\u2754\ndnnCompiler is targeted towards devices with small formfactor like microcontrollers, which are part of all sorts of household devices: think appliances, cars, and toys. In fact, there are around 30 billion microcontroller-powered devices produced each year. They're cheap, require very little energy, and are very reliable. \n\nBy bringing deep learning models to tiny microcontrollers, we can boost the intelligence of billions of devices that we use in our lives, without relying on expensive hardware or reliable internet connections. Imagine smart appliances that can adapt to your daily routine, intelligent industrial sensors that understand the difference between problems and normal operation, and magical toys that can help kids learn in fun and delightful ways.\n\n\n**\ud83d\udea7 Project Under Development.** *Stay tuned. We plan to release the first version in the third quarter of 2019.*\n\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/ai-techsystems/dnnCompiler",
        "keywords": "",
        "license": "",
        "maintainer": "",
        "maintainer_email": "",
        "name": "dnnc",
        "package_url": "https://pypi.org/project/dnnc/",
        "platform": "",
        "project_url": "https://pypi.org/project/dnnc/",
        "project_urls": {
            "Homepage": "https://github.com/ai-techsystems/dnnCompiler"
        },
        "release_url": "https://pypi.org/project/dnnc/0.1/",
        "requires_dist": [
            "onnx",
            "numpy"
        ],
        "requires_python": ">=3.5",
        "summary": "Deep Neural Network Compiler",
        "version": "0.1"
    },
    "last_serial": 6013190,
    "releases": {
        "0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "eb76060edb35a70f8cfd8d2409fbd1b2",
                    "sha256": "6fd0bb3762010684a462c63beec8ae129c8e463e7630fa052ce17c09ae643a04"
                },
                "downloads": -1,
                "filename": "dnnc-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "eb76060edb35a70f8cfd8d2409fbd1b2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 8055,
                "upload_time": "2019-10-22T14:37:16",
                "url": "https://files.pythonhosted.org/packages/73/03/92adb26e867e11bd61553f3f90f49fb8f923230a9ce4dd247bbe9e2ce205/dnnc-0.1-py3-none-any.whl"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "eb76060edb35a70f8cfd8d2409fbd1b2",
                "sha256": "6fd0bb3762010684a462c63beec8ae129c8e463e7630fa052ce17c09ae643a04"
            },
            "downloads": -1,
            "filename": "dnnc-0.1-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "eb76060edb35a70f8cfd8d2409fbd1b2",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.5",
            "size": 8055,
            "upload_time": "2019-10-22T14:37:16",
            "url": "https://files.pythonhosted.org/packages/73/03/92adb26e867e11bd61553f3f90f49fb8f923230a9ce4dd247bbe9e2ce205/dnnc-0.1-py3-none-any.whl"
        }
    ]
}