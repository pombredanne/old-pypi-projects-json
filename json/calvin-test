{
    "info": {
        "author": "Exosite LLC",
        "author_email": "support@exosite.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 4 - Beta",
            "License :: OSI Approved :: Apache Software License",
            "Operating System :: POSIX :: Linux",
            "Programming Language :: Python :: 2.7",
            "Programming Language :: Python :: 3.4",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Topic :: Software Development :: Embedded Systems",
            "Topic :: System :: Operating System Kernels :: Linux"
        ],
        "description": "Murano Client Library (Python)\n==================================\n\n.. image:: https://travis-ci.com/exosite/lib_murano_client_python.svg?token=tgjcyH1MG5sXqcVsD1kG&branch=master\n    :target: https://travis-ci.com/exosite/lib_murano_client_python\n\nA library for quickly testing, evaluating and writing client software for Murano devices.\n\nSupported features:\n\n* HTTPS Device API\n* MQTT Device API\n* TOKEN Auth\n* TLS Client Cert Auth\n* Command Line Interface (``gdc --help``)\n\nRequirements\n-------------------\n\n* Python 2.7.9+, 3.4, 3.5, 3.6\n* paho-mqtt (>=1.3.1)\n* requests (>=2.13.0)\n* docopt (>=0.6.2)\n* six\n\nInstallation\n-------------------\n\nRun the following command.\n\n    .. code-block::\n\n        > pip install murano-client\n\nHTTP CLI Examples\n-------------------\n\nTimestamp\n~~~~~~~~~~~~~~~~~~~~~~\n\n    .. code-block::\n\n        > gdc -H https://t41hp23nod8s00000.m2.exosite.io/ http timestamp\n        1527272454\n\nActivate\n~~~~~~~~~~~~~~~~~~~~~~\n\n    .. code-block::\n\n        > gdc -H https://t41hp23nod8s00000.m2.exosite.io/ -u myDeviceName-1 http activate\n        97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW\n\nWrite\n~~~~~~~~~~~~~~~~~~~~~~\n\n    .. code-block::\n\n        > gdc -H https://t41hp23nod8s00000.m2.exosite.io/ -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http write data_in '{\"some\": \"json data\"}'\n        [204] No content\n\nRecord\n~~~~~~~~~~~~~~~~~~~~~~\n\n    .. code-block::\n\n        > gdc -H https://t41hp23nod8s00000.m2.exosite.io/ -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http record $(date +%s) data_in '{\"historical\": \"data\"}'\n        [204] No content\n\nRead\n~~~~~~~~~~~~~~~~~~~~~~\n\n    .. code-block::\n\n        > gdc -H https://t41hp23nod8s00000.m2.exosite.io/ -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http read data_in\n        data_in={\"historical\": \"data\"}\n\nPoll\n~~~~~~~~~~~~~~~~~~~~~~\n\n    .. code-block::\n\n        > gdc  -H 'https://t41hp23nod8s00000.m2.exosite.io/' -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http poll config_io 3000\n        [304] Not modified\n\n\n    .. code-block::\n\n        > gdc  -H 'https://t41hp23nod8s00000.m2.exosite.io/' -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http poll config_io 30000\n        [200] config_io={\"some\": \"config data\"}\n\nContent\n~~~~~~~~~~~~~~~~~~~~~~\nList Content\n''''''''''''''''''''''\n\n\n    .. code-block::\n\n        > gdc -H 'https://t41hp23nod8s00000.m2.exosite.io/' -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http content list\n        requests_check.v1.tar.gz\n        ota_bundle_test.v2.tar.gz\n        ota_bundle_test.v1.tar.gz\n        gwe.v1.5.RC68.tar.gz\n        gwe.v1.5.RC59.tar.gz\n        gwe.v1.5.RC58.tar.gz\n        gwe.v1.5.RC57.tar.gz\n\nGet Content Info\n''''''''''''''''''''''\n\n    .. code-block::\n\n        > gdc -H 'https://t41hp23nod8s00000.m2.exosite.io/' -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http content info gwe.v1.5.RC68.tar.gz\n        application/gzip,691529,1513931066,\n\n\nDownload Content\n''''''''''''''''''''''\n\n    .. code-block::\n\n        > gdc -H 'https://t41hp23nod8s00000.m2.exosite.io/' -k 97eWgtm9Et5VxwuJT8NiOK7w27Ly2GS092oSxgpW http content download gwe.v1.5.RC68.tar.gz\n        WARNING:urllib3.response:Received response with both Content-Length and Transfer-Encoding set. This is expressly forbidden by RFC 7230 sec 3.3.2. Ignoring Content-Length and attempting to process response as Transfer-Encoding: chunked.\n        > file gwe.v1.5.RC68.tar.gz\n        gwe.v1.5.RC68.tar.gz: gzip compressed data, last modified: Fri Dec 22 08:24:23 2017, from Unix\n\n\nMQTT CLI Examples\n-------------------\nActivate\n~~~~~~~~~~~~~~~~~~~~~~\nActivate a client with via MQTT.\n\n\n    .. code-block::\n\n        > gdc -H mqtt://t41hp23nod8s00000.m2.exosite.io/ -u cleanup-stuff mqtt activate\n        oihLldO3f53dqyJYDmiRCijVsf4eQJeUxFSBnEsk\n\n\nPublish\n~~~~~~~~~~~~~~~~~~~~~~\nPublish a single payload with MQTT.\n\n\n    .. code-block::\n\n        > gdc -H mqtt://t41hp23nod8s00000.m2.exosite.io/ -k oihLldO3f53dqyJYDmiRCijVsf4eQJeUxFSBnEsk mqtt publish \\$resource/data_in \"{\\\"time\\\": $(date +%s)}\"\n        rc=0, mid=1: {\"time\": 1528214840}\n\n\nSubscribe\n~~~~~~~~~~~~~~~~~~~~~~\nSubscribe to a murano client.\n\n**NOTE:** MQTT Subscribe works on all resources of a Murano client. Subscribing to a specific resource is not supported. Unsubscribe is also not supported.\n\n\n    .. code-block::\n\n        > gdc -H mqtt://t41hp23nod8s00000.m2.exosite.io/ -k oihLldO3f53dqyJYDmiRCijVsf4eQJeUxFSBnEsk mqtt subscribe\n        update_interval.1528215003884000=60\n\n\nPubsub\n~~~~~~~~~~~~~~~~~~~~~~\nUse this command to publish newline-delineated date to a client resource while simultaneously subscribing to its resources.\n\n\n    .. code-block::\n\n        > while true\n        do\n            echo \"{\\\"time\\\": $(date +%s)}\"\n            sleep 0.5\n        done | gdc -H mqtt://t41hp23nod8s00000.m2.exosite.io/ \\\n                   -k oihLldO3f53dqyJYDmiRCijVsf4eQJeUxFSBnEsk \\\n                   mqtt pubsub \\\n                   \\$resource/config_io\n        update_interval.1528215003884000=60\n\n\n\nClient Applications\n-------------------\nFor examples of how to import this library, see the commands in the ``murano_client/commands/`` directory.\n\nSimple HTTP Example Application\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n    .. code-block::\n\n        #!/usr/bin/env python\n\n        # example.py\n\n        import time\n        import uuid\n        import json\n        from murano_client.http import MuranoHTTP, Http_ReadWriteCodes\n\n        HTTP_TIMEOUT = 5*60*1000 # 5 minutes\n        config_io = None\n\n        client_params = {\n            \"murano_host\": \"https://t41hp23nod8s00000.m2.exosite.io/\",\n            \"murano_id\": str(uuid.uuid4()),\n            \"http_timeout\": 5.0,\n            \"debug\": \"DEBUG\",\n        }\n\n        print(\"Client parameters: {}\".format(json.dumps(client_params)))\n\n        hc = MuranoHTTP(**client_params)\n        hc.set_http_timeout(HTTP_TIMEOUT)\n\n        while not hc.is_activated():\n            hc.http_activate()\n            print(\"TOKEN: {}\".format(hc.murano_token()))\n            if not hc.is_activated():\n                time.sleep(HTTP_TIMEOUT)\n\n        print(\"Starting long poll...\")\n\n        while True:\n            response_handler = hc.http_long_poll(\n                    'config_io',\n                    HTTP_TIMEOUT,\n                    time.time()\n                )\n\n            if response_handler.code == Http_ReadWriteCodes.NotModified:\n                print(\"no config_io yet...\")\n            elif response_handler.code == Http_ReadWriteCodes.OK:\n                print(response_handler.body)\n                config_io = json.loads(response_handler.body.strip(\"config_io=\"))\n                print(\"got config_io: {}\".format(config_io))\n                hc.http_write('config_io', \"ACK\")\n            else:\n                print(response_handler)\n\n            if config_io:\n                print(hc.http_write('data_in', str(uuid.uuid4())))\n\n\n\n\nSimple MQTT Example Application\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n    .. code-block::\n\n        #!/usr/bin/env python\n\n        # example.py\n        from __future__ import print_function\n        import time\n        import uuid\n        import json\n        from murano_client.mqtt import MuranoMQTT\n\n        client_params = {\n            \"murano_host\": \"mqtt://t41hp23nod8s00000.m2.exosite.io/\",\n            \"murano_id\": str(uuid.uuid4()),\n            # \"debug\": \"DEBUG\",\n        }\n\n        print(\"Client parameters: {}\".format(json.dumps(client_params)))\n\n        mc = MuranoMQTT(**client_params)\n        mc.start()\n\n        mc.Config_IO = None\n\n        print(\"Starting activation...\")\n        if not mc.is_activated():\n            mc.activate()\n            print(\"TOKEN: {}\".format(mc.murano_token()))\n\n        def on_message(cls, userdata, msg):\n            \"\"\" Override default on_message function. \"\"\"\n            _, resource, timestamp = msg.topic.split('/')[0:3]\n            print(\"{}.{}={}\".format(resource, timestamp, msg.payload))\n            if 'config_io' == resource:\n                try:\n                    cls.Config_IO = json.loads(msg.payload.decode())\n                    print(\"New Config_IO: {}\".format(cls.Config_IO))\n                except ValueError:\n                    print(\"Invalid JSON: {}\".format(msg.payload.decode()))\n        mc.on_message = on_message\n\n        print(\"Starting program...\")\n\n        mc.start()\n\n        while True:\n\n            if mc.Config_IO:\n                rand_data = str(uuid.uuid4())\n                rc, mid = mc.publish(\n                                     '$resource/data_in',\n                                     rand_data,\n                                     qos=0\n                                     )\n                print(\"rc={}, mid={}, data={}\"\n                      .format(rc, mid, rand_data))\n            else:\n                print(\"waiting for config_io object...\")\n\n            mc.loop()\n            time.sleep(1)\n\n\n\nSimple ``MuranoClient`` Client Applications\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe ``MuranoClient`` class takes the following constructor parameters:\n\n* ``murano_host`` - Required. The application will use the appropriate protocol to communicate with Murano according to the Product settings.\n* ``murano_id`` - This is the device identifier (e.g. serial number, etc.).\n* ``watchlist`` - Provide a list of resources from which to be notified of when new data is available. **NOTE:** Currently only one resource is supported.\n* ``http_timeout`` - Specify the length of time in between Long Poll connections when using HTTP.\n* ``debug`` - Turn the logging up or down. Valid values are the string values ``DEBUG``, ``INFO``, ``WARNING``, ``ERROR`` and ``CRITICAL``.\n\nThe application, below, uses the ``MuranoClient`` class's MQTT option to \"echo\" payloads from the ``config_io`` resource to the ``data_in`` resource.\n\n\n    .. code-block::\n\n        #!/usr/bin/env python\n\n        import sys\n        import signal\n        import time\n        from murano_client.client import MuranoClient\n\n        c = MuranoClient(\n            murano_host='mqtt://t41hp23nod8s00000.m2.exosite.io/',\n            murano_id=sys.argv[1],\n            watchlist=['config_io'],\n            http_timeout=5*60,\n            debug='DEBUG')\n\n        def stop(signal, frame):\n            print(\"stopping\")\n            c.stop_all()\n            sys.exit(0)\n\n        signal.signal(signal.SIGINT, stop)\n\n        c.client_activate()\n        c.start_client()\n\n        while True:\n            data_from_murano = c.watch()\n            if data_from_murano:\n                c.tell(\n                    resource='data_in',\n                    timestamp=time.time(),\n                    payload=data_from_murano.payload\n                )\n\n\n\nThe example below uses the HTTP option to periodically write the current time into the ``data_in`` resource.\n\n**IMPORTANT:**\n\n\n    .. code-block::\n\n        #!/usr/bin/env python\n\n        import sys\n        import signal\n        import time\n        from murano_client.client import MuranoClient\n\n        c = MuranoClient(\n            murano_host='https://t41hp23nod8s00000.m2.exosite.io/',\n            murano_id=sys.argv[1],\n            watchlist=['config_io'],\n            http_timeout=5,\n            debug='DEBUG'\n        )\n\n        def stop(signal, frame):\n            c.stop_all()\n            sys.exit(0)\n\n        signal.signal(signal.SIGINT, stop)\n\n        c.client_activate()\n        c.start_client()\n\n        while True:\n            c.tell(\n                resource='data_in',\n                timestamp=time.time(),\n                payload='chirp: {}'.format(time.time())\n            )\n            print(c.watch(timeout=1.0))\n\n\n\nINI State File\n-------------------\nRequired:\n\n* ``murano_host``\n* ``murano_id``\n* ``watchlist`` - comma delineated list of Murano resources\n\nOptional:\n\n* ``murano_port`` - (https default: 443, mqtt default: 8883)\n* ``debug``\n* ``murano_token``\n\nExample INI files:\n\n##NOTE:## If client hasn't provisioned yet, exclude ``murano_token``. The ``Device`` class will set/save it after it activates.\n\n    .. code-block::\n\n        # device.ini\n        [device]\n        murano_host = mqtt://t41hp23nod8s00000.m2.exosite.io/\n        murano_id = 4321\n        murano_port = 443\n        watchlist = config_io\n        debug = DEBUG\n        murano_token = XaFfMaOvrGxJgWk2Iftgw1cplYuZeSsUoKlKn0lb\n\nExample application code that used the INI example, above.\n\n    .. code-block::\n\n        #!/usr/bin/env python\n\n        from murano_client.ini import Device\n\n        d = Device('device.ini')\n        d.client_activate()\n        d.start_client()\n        print(d.watch()) # now set a value in the watchlist\n\nExample CLI commands that use the INI file, above.\n\n    .. code-block::\n\n        gdc -f device.ini http timestamp\n        gdc -f device.ini http activate\n        gdc -f device.ini http read config_io\n        gdc -f device.ini http write data_in '{\"a\": \"3.14\"}'\n        gdc -f device.ini http record $(date +%s) data_in '{\"a\": \"3.14\"}'\n        gdc -f device.ini mqtt timestamp\n        gdc -f device.ini mqtt activate\n        gdc -f device.ini mqtt publish \\$resource/data_in '{\"a\": \"3.14\"}'\n        gdc -f device.ini mqtt subscribe\n\n\nLogging\n-------------------------\n\nThe ``murano_client`` library has a log file rotator built in. It is utilized via system environment variables only. It supports the following parameters:\n\n* ``MURANO_CLIENT_DEBUG``           - case-insensitive, default:warning (debug|info|warning|error|critical).\n* ``MURANO_CLIENT_LOGFILE``         - case-sensitive, default:stderr, can override to stdout or any file path.\n* ``MURANO_CLIENT_LOG_MAX_BYTES``   - integer(bytes), default:1024000\n* ``MURANO_CLIENT_MAX_BACKUPS``     - integer(number-of-backups), default:3\n\n.. code-block::\n\n    export MURANO_CLIENT_DEBUG=debug\n    export MURANO_CLIENT_LOGFILE=/var/log/murano_client.log\n    export MURANO_CLIENT_LOG_MAX_BYTES=$((1024*100))\n    export MURANO_CLIENT_MAX_BACKUPS=2\n\n**NOTE:** Any application (e.g. ``edged``) can override the ``MURANO_CLIENT_DEBUG`` parameter during runtime with the ``debug=<level>`` keyword argument to ``MuranoClient`` objects.\n\nTest\n-------------------------\n\nTo execute tests:\n\n    .. code-block::\n\n        > pip install -U tox\n        > tox\n\n\n",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/exosite/lib_murano_client_python",
        "keywords": "murano exosite iot iiot client gateway",
        "license": "Apache 2.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "calvin-test",
        "package_url": "https://pypi.org/project/calvin-test/",
        "platform": "",
        "project_url": "https://pypi.org/project/calvin-test/",
        "project_urls": {
            "Homepage": "https://github.com/exosite/lib_murano_client_python"
        },
        "release_url": "https://pypi.org/project/calvin-test/18.12.19.1/",
        "requires_dist": [
            "docopt (>=0.6.2)",
            "requests (>=2.13.0)",
            "paho-mqtt",
            "six"
        ],
        "requires_python": ">= 2.7.9, <4",
        "summary": "Murano Device Client is the primary library for communicating with the Exosite Murano Platform.",
        "version": "18.12.19.1"
    },
    "last_serial": 4903988,
    "releases": {
        "18.12.19": [],
        "18.12.19.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0e6108ff50a9f6dd7e0cbeb82276f67e",
                    "sha256": "a54fe672cc6f3a713d3dcdb91c8e487506bf6de64eea214225524042654c37a0"
                },
                "downloads": -1,
                "filename": "calvin_test-18.12.19.1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0e6108ff50a9f6dd7e0cbeb82276f67e",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">= 2.7.9, <4",
                "size": 60777,
                "upload_time": "2019-03-06T07:56:21",
                "url": "https://files.pythonhosted.org/packages/56/44/1e989cd33288634f6bffab22aaf789ae9dac350ef305ff1c8be089d49b07/calvin_test-18.12.19.1-py2.py3-none-any.whl"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "0e6108ff50a9f6dd7e0cbeb82276f67e",
                "sha256": "a54fe672cc6f3a713d3dcdb91c8e487506bf6de64eea214225524042654c37a0"
            },
            "downloads": -1,
            "filename": "calvin_test-18.12.19.1-py2.py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "0e6108ff50a9f6dd7e0cbeb82276f67e",
            "packagetype": "bdist_wheel",
            "python_version": "py2.py3",
            "requires_python": ">= 2.7.9, <4",
            "size": 60777,
            "upload_time": "2019-03-06T07:56:21",
            "url": "https://files.pythonhosted.org/packages/56/44/1e989cd33288634f6bffab22aaf789ae9dac350ef305ff1c8be089d49b07/calvin_test-18.12.19.1-py2.py3-none-any.whl"
        }
    ]
}