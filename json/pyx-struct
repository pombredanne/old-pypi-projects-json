{
    "info": {
        "author": "Paton Research Group",
        "author_email": "robert.paton@colostate.edu",
        "bugtrack_url": null,
        "classifiers": [],
        "description": "[![DOI](https://zenodo.org/badge/137907550.svg)](https://zenodo.org/badge/latestdoi/137907550)\n\npyX-Struct\n=========\n\nScrape Geometric X-ray Data from the [Cambridge Structural Database](https://www.ccdc.cam.ac.uk/solutions/csd-system/components/csd/).<sup>1</sup> This code has been used to carry out a quantitative comparison of the conformational preferences of diarylureas and diarylthioureas in the solid state.<sup>2</sup> \n\n## Getting Started \n\nThis Python program is run from Terminal or Unix Shell in a Python environment that\ncontains the Cambridge Crystallographic Data Centre library (CCDC). \n\nThe program reads a SMILES string as a substructure to search the database with, along with additional optional arguments that allow the user to request measurements such as the distance between two atoms, an angle between three atoms, a\ntorsion angle between four atoms, or any combination or number of these three measurements from crystallographic data containing the input substructure. Measurements (distances, angles, torsion angles) may be compared graphically. \n\nIf the measurement type and indices of the involved atoms are known, they\nmay be included in the initial command argument, however, the program will still ask if any additional measurements should be added to the structure.\n\nThe user has the option to export the data as a .CSV file which will save the resulting molecule's CSD identifier along with any specified substructure measurements. \n\nThe program may optionally search for hydrogen bonding from urea / thiourea nitrogens and \nsave the count results as a CSV.\n\t\n#### Package Dependencies\ncsd-python-api, future, matplotlib, numpy, pandas, seaborn\n\n#### Optional Arguments\n* A SMILES string (encased in quotations if illegal characters are involved) of a molecule will search for crystal structures including the substructure.\n* The `d` argument followed by two atom indices measures the distance between the two given atoms.\n* The `a` argument followed by three atom indices will measure an angle between the three given atoms.\n* The `t` argument followed by four atom indices will measure a torsion angle of the four given atoms.\n* The `s` argument will save the crystal identifiers and specified measurement search data as a .CSV file in the current directory.\n* The `lim` argument allows the user to specify a limit to the number of search results obtained, default limit is 1000 crystal structures.\n* The `p` argument will print search result data to the command line as the found crystal structure identifiers and specified measurements.\n* The `g` argument turns graphing of two measurements off, default behavior displays graph.\n* The `h` argument permits the search of urea or thiourea hydrogen bonding activity.\n\t\n\n## Sample Inputs/Outputs\n\n#### Example 1: Search the CSD for a porphyrin ring substructure removing the search limit and exporting the results as a .CSV file\n```\npython structure_search.py 'C1=CC2=NC1=CC3=NC(=CC4=NC(=CC5=NC(=C2)C=C5)C=C4)C=C3' lim 0 s\nData will be saved.\nSearch for any specific measurements on this molecule? (y/n): n\nSearching for substructures...\nFound 18 matching substructures in 12 different molecules.\nFile saved to: ./search_16:38:39.CSV\n```\nOutput file: [search_16:38:39.CSV](https://github.com/bobbypaton/pyX-Struct/blob/master/search_16:38:39.CSV)\n\n#### Example 2: Search the CSD for a 2-chlorobut-2-ene substructure and measure a torsion angle\n```\npython structure_search.py 'CC=C(C)Cl' t 0 1 2 4 s\nTorsion TOR0 added to the search.\nData will be saved.\nSearching for substructures with a limit of 1000 max structures...\nFound 2238 matching substructures in 1000 different molecules.\nFile saved to: ./search_16:42:05.CSV\n```\nOutput file: [search_16:42:05.CSV](https://github.com/bobbypaton/pyX-Struct/blob/master/search_16:42:05.CSV)\n\n#### Example 3: Search the CSD for an ethanol substructure measuring C-O distance and C-C-O angle\n```\npython structure_search.py 'CCO' d a lim \n0 QueryAtom(C)[atom aromaticity: equal to 0]\n1 QueryAtom(C)[atom aromaticity: equal to 0]\n2 QueryAtom(O)[atom aromaticity: equal to 0]\nEnter two indices to measure a distance (# #): 0 1\nDistance D0 added to the search.\n0 QueryAtom(C)[atom aromaticity: equal to 0]\n1 QueryAtom(C)[atom aromaticity: equal to 0]\n2 QueryAtom(O)[atom aromaticity: equal to 0]\nEnter three indices to measure an angle (# # #): 2 1 0\nAngle A0 added to the search.\nEnter a number for max number of hits for the search: 400\nSearching for substructures with a limit of 400 max structures...\nFound 1804 matching substructures in 400 different molecules.\nGraphing 'D0' vs 'A0'...\n```\n<p align=\"center\">\n<img src=Example2Pic.png alt=\"Example 2 Picture\" width=400 height=400 >\n</p>\n\n\n  \n## Known Bugs\n* Unable to access indices of hydrogen atoms given a SMILES string.\n* UserWarning occurs when generating the graph since 'normed' kwarg is depricated.\n\t\n## Other Notes\n* If a SMILES string or measurement are not specified, or if indices of a measurement are not known or given,\n\tinteraction with the terminal is required.\n* The default search limit is 1000 structures. This can be changed with the `lim` argument.\n* If a measurement was added by accident and the program is asking for atom indices for a specific measurement, entering `q` will quit adding the measurement.\n\n#### References\n1. \u201cThe Cambridge Structural Database\u201d Groom, C. R.; Bruno, I. J.; Lightfoot, M. P.; Ward, S. C.; *Acta Cryst. B*, **2016**, *B72*, 171-179\n[**DOI:** 10.1107/S2052520616003954](http://dx.doi.org/10.1107/S2052520616003954)\n2. \"Data-mining the Diaryl(thio)urea Conformational Landscape: Understanding the Contrasting Behavior of Ureas and Thioureas with Quantum Chemistry\" Luchini, G.; Ascough, D. H. M.; Alegre-Requena, J. V.; Paton, R. S. *in review* **2018**\n\n---\nLicense: [CC-BY](https://creativecommons.org/licenses/by/3.0/)",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "https://github.com/bobbypaton/pyX-Struct/archive/1.0.zip",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/bobbypaton/pyX-Struct",
        "keywords": "x-ray structure,CCDC,SMILES,python",
        "license": "",
        "maintainer": "",
        "maintainer_email": "",
        "name": "pyX-Struct",
        "package_url": "https://pypi.org/project/pyX-Struct/",
        "platform": "",
        "project_url": "https://pypi.org/project/pyX-Struct/",
        "project_urls": {
            "Download": "https://github.com/bobbypaton/pyX-Struct/archive/1.0.zip",
            "Homepage": "https://github.com/bobbypaton/pyX-Struct"
        },
        "release_url": "https://pypi.org/project/pyX-Struct/1.0/",
        "requires_dist": null,
        "requires_python": ">=2.6",
        "summary": "Scrape Geometric X-ray Data from the Cambridge Structural Database",
        "version": "1.0"
    },
    "last_serial": 4601111,
    "releases": {
        "1.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a7dfa1f783126b0d5a282b28a4190f5f",
                    "sha256": "e7efd2b263290c40ed371228a6fc9311ef214f6f9b05092e77fe77c8f6cb1d94"
                },
                "downloads": -1,
                "filename": "pyX-Struct-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a7dfa1f783126b0d5a282b28a4190f5f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=2.6",
                "size": 8320,
                "upload_time": "2018-12-14T23:34:52",
                "url": "https://files.pythonhosted.org/packages/18/b6/5c6e190945498d63ac4bc0c38c6ae9f1b454332ff5fa860833124f2c57ad/pyX-Struct-1.0.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "a7dfa1f783126b0d5a282b28a4190f5f",
                "sha256": "e7efd2b263290c40ed371228a6fc9311ef214f6f9b05092e77fe77c8f6cb1d94"
            },
            "downloads": -1,
            "filename": "pyX-Struct-1.0.tar.gz",
            "has_sig": false,
            "md5_digest": "a7dfa1f783126b0d5a282b28a4190f5f",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=2.6",
            "size": 8320,
            "upload_time": "2018-12-14T23:34:52",
            "url": "https://files.pythonhosted.org/packages/18/b6/5c6e190945498d63ac4bc0c38c6ae9f1b454332ff5fa860833124f2c57ad/pyX-Struct-1.0.tar.gz"
        }
    ]
}