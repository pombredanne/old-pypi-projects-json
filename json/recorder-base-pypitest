{
    "info": {
        "author": "Bryant Chhun",
        "author_email": "bchhun@gmail.com",
        "bugtrack_url": null,
        "classifiers": [
            "License :: OSI Approved :: BSD License",
            "Operating System :: MacOS",
            "Operating System :: Microsoft :: Windows",
            "Operating System :: POSIX",
            "Operating System :: Unix",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3 :: Only",
            "Topic :: Scientific/Engineering",
            "Topic :: Scientific/Engineering :: Bio-Informatics",
            "Topic :: Scientific/Engineering :: Information Analysis",
            "Topic :: Scientific/Engineering :: Visualization",
            "Topic :: Utilities"
        ],
        "description": "# recOrder\n\nrecord Order (recOrder): A framework for live-processing birefringence data \n\n# dependencies\n* numpy\n* py4j\n* opencv\n* pyqt5\n* napari\n* ReconstructOrder\n\npypi install coming soon!\n\n# this repo\nrecOrder is a framework to enable microscopy acquisition, analysis, and visualization pipelines.  In particular\nit is developed to accelerate computational microscopy workflows.\n\nrecOrder is an abstraction on top of the pyqt5 backend that simplifies pyqt5's signal/slot mechanism.  recOrder enables \na traditional 'publish-subscribe' pattern through simple function decorations.  It does not use QtDBus, and thus does not\nrequire installation of D-bus for your OS.\n\nplease see the examples for a sense of how to construct a program.\nIn particular, look at \"example_reconstruct_order\"\n\n## Installation\n\n### Create a new conda environment (optional, but recommended)\n>Install conda package management system by installing anaconda or miniconda (https://conda.io/). \n>Creating a conda environment dedicated to ReconstructOrder will avoid version conflicts among packages required by ReconstructOrder and packages required by other python software.\n>\n>```buildoutcfg\n>conda create -n <your-environment-name> python=3.7\n>conda activate <your-environment-name>\n>```\n### pip install via pypi\n> (COMING SOON)\n\n## Usage\nThere are three primary modules in this framework\n- acquisition\n- analysis\n- visualization\n\nAnd one program construction module:\n- program\n\nAcquisition, analysis and visualization contain one base class named  \nAcquisitionBase,  \nAnalysisBase,  \nVisualizationBase, respectively.\n\nProgram contains one class that connects any number of the earlier three modules together.\n\nThe typical pattern of usage is to define a class that inherits any of the above bases:\n\n>   ```buildoutcfg\n>   class MyTestClass(AcquisitionBase):\n>         def __init__(self):\n>                super().__init__()\n>   ```\n\nNext, to have a class's method broadcast or receive on a channel, simply decorate it:\n\n>   ```buildoutcfg\n>   class MyAcquisitionClass(AcquisitionBase):\n>          def __init__(self):\n>                super().__init__()\n>\n>           @AcquisitionBase.emitter(channel=0)\n>           def broadcast_to_channel():\n>                pass\n>\n>            @AcquisitionBase.receiver(channel=1)\n>            der receive_from_channel(from_signal):\n>                 pass\n>\n>   ```\n\nIf you want the same method to both receive and broadcast on a channel, use bidirectional:\n\n>   ```buildoutcfg\n>   class MyVisualizationClass(VisualizeBase):\n>          def __init__(self):\n>                super().__init__()\n>\n>           @VisualizeBase.bidirectional(emitter_channel=1, receiver_channel=0):\n>            def emit_and_receive_from_channels(from_signal):\n>                pass\n>\n>   ```\n\n####Note, a method does not need to return a value to emit a signal.  However, a method needs to declare parameter in order to receive a signal.\n\nFinally, to build and run an entire program, use the program class:\n\n>   ```buildoutcfg\n>     acq = MyAcquisitionClass()\n>     vis = MyVisualizationClass()\n>     program = Program(acquire=acq, visualize=vis)\n>     program.build()\n>   ```\n\nAny number of primary modules can be instantiated and passed to the \"program\" builder:\nprogram = Program(acquire=<acquisition_module>, analyze=<analysis_module>, visualize=<visualization_module>)\nUpon calling \"program.build()\", signals will be connected and the program is run.\n\n\n##\nFor computational microscopy workflows, there are additionally four datastructures and some microscope control utilities:\n\nFour datastructures:\n- Intensity\n- Stokes\n- Physical\n- Background\n\n## LICENSE\n\nChan Zuckerberg Biohub Software License\n\nThis software license is the 2-clause BSD license plus clause a third clause\nthat prohibits redistribution and use for commercial purposes without further\npermission.\n\nCopyright \u00a9 2019. Chan Zuckerberg Biohub.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1.\tRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2.\tRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3.\tRedistributions and use for commercial purposes are not permitted without\nthe Chan Zuckerberg Biohub's written permission. For purposes of this license,\ncommercial purposes are the incorporation of the Chan Zuckerberg Biohub's\nsoftware into anything for which you will charge fees or other compensation or\nuse of the software to perform a commercial service for a third party.\nContact ip@czbiohub.org for commercial licensing opportunities.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/czbiohub/recOrder",
        "keywords": "",
        "license": "Chan Zuckerberg Biohub Software License",
        "maintainer": "",
        "maintainer_email": "",
        "name": "recOrder-base-pypitest",
        "package_url": "https://pypi.org/project/recOrder-base-pypitest/",
        "platform": "",
        "project_url": "https://pypi.org/project/recOrder-base-pypitest/",
        "project_urls": {
            "Homepage": "https://github.com/czbiohub/recOrder"
        },
        "release_url": "https://pypi.org/project/recOrder-base-pypitest/0.0.1/",
        "requires_dist": null,
        "requires_python": ">=3.6",
        "summary": "Framework to enable acquisition, analysis, visualization of computational microscopy workflows",
        "version": "0.0.1"
    },
    "last_serial": 6388640,
    "releases": {
        "0.0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "26b6133c4bc289aa03689ee737b9a193",
                    "sha256": "3b0076baeae9f4578035be286612e79b724da6003109f6ce8985f6a2d4eafb19"
                },
                "downloads": -1,
                "filename": "recOrder_base_pypitest-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "26b6133c4bc289aa03689ee737b9a193",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 13780,
                "upload_time": "2020-01-02T22:58:22",
                "upload_time_iso_8601": "2020-01-02T22:58:22.781813Z",
                "url": "https://files.pythonhosted.org/packages/ff/cc/928928f74a6e8dd65c9e3dae224c39af28e2484f6052ad12f52264c72038/recOrder_base_pypitest-0.0.1.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "26b6133c4bc289aa03689ee737b9a193",
                "sha256": "3b0076baeae9f4578035be286612e79b724da6003109f6ce8985f6a2d4eafb19"
            },
            "downloads": -1,
            "filename": "recOrder_base_pypitest-0.0.1.tar.gz",
            "has_sig": false,
            "md5_digest": "26b6133c4bc289aa03689ee737b9a193",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.6",
            "size": 13780,
            "upload_time": "2020-01-02T22:58:22",
            "upload_time_iso_8601": "2020-01-02T22:58:22.781813Z",
            "url": "https://files.pythonhosted.org/packages/ff/cc/928928f74a6e8dd65c9e3dae224c39af28e2484f6052ad12f52264c72038/recOrder_base_pypitest-0.0.1.tar.gz"
        }
    ]
}