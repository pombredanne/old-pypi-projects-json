{
    "info": {
        "author": "The GenICam Committee",
        "author_email": "genicam@list.stemmer-imaging.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 3 - Alpha",
            "Intended Audience :: Developers",
            "Intended Audience :: Education",
            "Intended Audience :: Science/Research",
            "License :: OSI Approved :: Apache Software License",
            "Operating System :: MacOS :: MacOS X",
            "Operating System :: Microsoft :: Windows",
            "Operating System :: POSIX",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3.4",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6"
        ],
        "description": ".. figure:: https://user-images.githubusercontent.com/8652625/40595190-1e16e90e-626e-11e8-9dc7-207d691c6d6d.jpg\n    :align: center\n    :alt: The Harvesters\n    :scale: 55 %\n\n    Pieter Bruegel the Elder, The Harvesters, 1565, oil on wood, \u00a9 2000\u20132018 The Metropolitan Museum of Art\n\n.. contents:: Table of Contents\n    :depth: 1\n\n###############\nAbout Harvester\n###############\n\nHarvester is a friendly companion for people who those want to learn computer vision.\n\nTechnically speaking, Harvester is a Python library which is responsible for the following tasks:\n\n* Image acquisition\n* Image data visualization (optional)\n\nHarvester consumes image acquisition libraries, so-called GenTL Producers. If you have an officially certified GenTL Producer and GenICam compliant machine vision cameras, then Harvester supply you the acquired image data as `numpy <http://www.numpy.org>`_ array to make your image processing task productive.\n\nYou can freely use, modify, distribute Harvester under `Apache License-2.0 <https://www.apache.org/licenses/LICENSE-2.0>`_ without worrying about the use of your software: personal, internal or commercial.\n\nCurrently, Harvester is being developed and maintained by the motivated volunteer contributors from all over the world.\n\n################\nAsking Questions\n################\n\nWe have prepared a chat room in Gitter. Please don't hesitate to drop your message when you get a question regarding Harvester!\n\nhttps://gitter.im/genicam-harvester/chatroom\n\n#############\nCollaborators\n#############\n\nSo far, Harvester has tested GenTL Producers and GenICam compliant devices from the following companies and they gave Harvester opportunities to improve its quality:\n\n.. list-table::\n    :header-rows: 1\n    :align: center\n\n    - - Company Name\n      - GigE Vision\n      - USB3 Vision\n      - Devices\n    - - `Active Silicon <https://www.activesilicon.com/>`_\n      - \\-\n      - \\-\n      - N/A\n    - - `Adimec <https://www.adimec.com/>`_\n      - N/A\n      - N/A\n      - \\-\n    - - `Allied Vision <https://www.alliedvision.com/en/digital-industrial-camera-solutions.html>`_\n      - \\-\n      - \\-\n      - \\-\n    - - `Autometion Technology <https://www.automationtechnology.de/cms/en/>`_\n      - N/A\n      - N/A\n      - Tested\n    - - `Baumer Optronic <https://www.baumer.com/se/en/>`_\n      - Tested\n      - Tested\n      - Tested\n    - - `DAHENG VISION <http://en.daheng-image.com/main.html>`_\n      - \\-\n      - Tested\n      - Tested\n    - - `Euresys <https://www.euresys.com/Homepage>`_\n      - \\-\n      - \\-\n      - N/A\n    - - `FLIR <https://www.flir.com>`_\n      - N/A\n      - N/A\n      - \\-\n    - - `Gardasoft <http://www.gardasoft.com>`_\n      - N/A\n      - N/A\n      - Tested\n    - - `JAI <https://www.jai.com>`_\n      - \\-\n      - Tested\n      - \\-\n    - - `Lucid Vision Labs <https://thinklucid.com>`_\n      - \\-\n      - N/A\n      - \\-\n    - - `MATRIX VISION <https://www.matrix-vision.com/home-en.html>`_\n      - Tested\n      - Tested\n      - \\-\n    - - `OMRON SENTECH <https://sentech.co.jp/en/>`_\n      - \\-\n      - Tested\n      - Tested\n    - - `PCO <https://www.pco-imaging.com/>`_\n      - \\-\n      - \\-\n      - \\-\n    - - `Roboception <https://roboception.com/en/>`_\n      - N/A\n      - N/A\n      - Tested\n    - - `SICK <https://www.sick.com/ag/en/>`_\n      - \\-\n      - N/A\n      - \\-\n    - - `Silicon Software <https://silicon.software/>`_\n      - \\-\n      - \\-\n      - N/A\n    - - `STEMMER IMAGING <https://www.stemmer-imaging.com/en/>`_\n      - Tested\n      - Tested\n      - N/A\n    - - `Vieworks <http://www.vieworks.com/eng/main.html>`_\n      - \\-\n      - \\-\n      - \\-\n    - - `XIMEA <https://www.ximea.com/>`_\n      - \\-\n      - \\-\n      - \\-\n\n\nPlease don't hesitate to tell us if you have tested Harvester with your GenTL Producer or GenICam compliant device. We will add your company/organization name to the list.\n\n###########\nTerminology\n###########\n\nBefore start talking about the detail, let's take a look at some important terminologies that frequently appear in this document. These terminologies are listed as follows:\n\n* **The GenApi-Python Binding**:\n\n  | A Python module that communicates with the GenICam reference implementation.\n\n* **A GenTL Producer**:\n\n  | A C/C++ library that offers consumers a way to communicate with cameras over physical transport layer dependent technology hiding the detail from the consumer.\n\n* **The GenTL-Python Binding**:\n\n  | A Python module that communicates with GenTL Producers.\n\n* **Harvester**:\n\n  | A Python module that consists of Harvester Core and Harvester GUI.\n\n* **Harvester Core**:\n\n  | A part of Harvester that works as an image acquisition engine.\n\n* **Harvester GUI**:\n\n  | A part of Harvester that works as a graphical user interface of Harvester Core.\n\n* **A GenICam compliant device**:\n\n  | It's typically a camera. Just involving the GenICam reference implementation, it offers consumers a way to dynamically configure/control the target devices.\n\nThe following diagram shows the hierarchy and relationship of the relevant modules:\n\n.. figure:: https://user-images.githubusercontent.com/8652625/41278759-9d0a5ea0-6e65-11e8-976b-2db8d085b9aa.png\n    :align: center\n    :alt: Module hierarchy\n    :scale: 40 %\n\n########\nFeatures\n########\n\nHarvester mainly consists of the following two Python modules:\n\n* **Harvester Core**: An image acquisition engine\n* **Harvester GUI**: Graphical user interface between users & Harvester Core\n\nIn this section, we will learn what Harvester offers us through these components.\n\n**************\nHarvester Core\n**************\n\nHarvester Core is an image acquisition engine. No GUI. You can use it as an image acquisition library which acquires images from GenTL Producers through the GenTL-Python Binding and control the target device (it's typically a camera) through the GenApi-Python Binding.\n\nHarvester Core works as a minimalistic front-end for image acquisition. Just importing it from your Python script, you should immediately be able to set images on your table.\n\nYou'll be able to download the these language binding runtime libraries from the `EMVA website <https://www.emva.org/standards-technology/genicam/genicam-downloads/>`_, however, it's not available as of May 2018, because they have not officially released yet. Fortunately they are in the final reviewing process so hopefully they'll be release by the end of 2018.\n\nIf you don't have to visualize acquired images at high frame rate, the combination of Harvester Core and `Matplotlib <https://matplotlib.org>`_ might be ideal for that purpose.\n\nHarvester Core's Main Features\n==============================\n\nThe main features of Harvester Core are listed as follows:\n\n* Image acquisition over GenTL Producers\n* Multiple loading of GenTL Producers in a single Python script\n* GenICam feature node manipulation of the target device\n\nNote that the second item implies you can involve multiple types of transport layers in your Python script. Each transport layer has own advantages and disadvantages and you should choose appropriate transport layers following your application's requirement. You just need to acquire images for some purposes and the GenTL Producers deliver the images somehow. It truly is the great benefit of encapsulation by the GenTL Standard!\n\nOn the other hand, Harvester Core could be considered as a simplified version of the GenTL-Python Binding; actually Harvester Core hides it in its back and shows only intuitive interfaces to its clients. Harvester Core just offers you a relationship between you and a device. Nothing more. We say it again, just you and a device. If you need to manipulate more relevant GenTL modules or have to achieve something over a hardcore way, then you should directly work with the GenTL-Python Binding.\n\n*************\nHarvester GUI\n*************\n\nHarvester GUI works on the top of Harvester Core and offers you high-performance image data visualization on the fly. It involves VisPy for controlling OpenGL functionality and PyQt for providing GUI.\n\nHarvester GUI's Main Features\n=============================\n\nThe main features of Harvester GUI are listed as follows:\n\n* Image data visualization of the acquired images\n* Image magnification using a mouse wheel or a trackpad\n* Image dragging using a mouse or a trackpad\n* An arbitrary selection of image displaying point in the data path (Not implemented yet)\n\nUnlike Harvester Core, Harvester GUI limits the number of GenTL Producers to load just one. This is just a limitation to not make the GUI complicated. In general, the user should know which GenTL Producer should be loaded to control his target device. It's not necessary to load multiple GenTL Producers for this use case. However, this is just an idea in an early stage. We might support multiple loading on even Harvester GUI in the future.\n\nSupported Pixel Formats\n=======================\n\nCurrently Harvester GUI supports the following pixel formats that are defined by the Pixel Format Naming Convention:\n\n* ``Mono8``\n* ``RGB8``\n* ``BayerRG8``, ``BayerGR8``, ``BayerBG8``, and ``BayerGB8`` (No demosaicing supported)\n\n###########\nScreenshots\n###########\n\nIn this section, we see some useful windows which Harvester offers you.\n\n****************************\nImage Data Visualizer Window\n****************************\n\nThe image data visualizer window (below) offers you a visualization of the acquired images. In this screenshot, Harvester is acquiring a 4000 x 3000 pixel of RGB8 image at 30 fps; it means it's acquiring images at 8.6 Gbps. It's quite fast isn't it?\n\n.. image:: https://user-images.githubusercontent.com/8652625/41188277-e7735f90-6bf5-11e8-8642-9e8c97b51100.png\n    :align: center\n    :alt: Image data visualizer\n    :scale: 40 %\n\n***************************\nAttribute Controller Window\n***************************\n\nThe attribute controller window (below) offers you to manipulate GenICam feature nodes of the target device. Changing exposure time, triggering the target device for image acquisition, storing a set of camera configuration so-called User Set, etc, you can manually control the target device anytime when you want to. It supports visibility filter feature and regular expression feature. These features are useful in a case where you need to display only the features you are interested.\n\n.. image:: https://user-images.githubusercontent.com/8652625/41112507-25b7c1ac-6aba-11e8-86e1-0920e96bdcda.png\n    :align: center\n    :alt: Attribute Controller\n    :scale: 40 %\n\n*************************\nHarvester Core on IPython\n*************************\n\nThe following screenshot shows Harvester Core is running on IPython. Harvester Core returns the latest image data at the moment as a Numpy array every time its user call the ``get_image()`` method. Once you get an image you should be able to immediately start image processing. If you're running on Jupyter notebook, you should be able to visualize the image data using Matplotlib. This step should be helpful to check what's going on your trial in the image processing flow.\n\n.. image:: https://user-images.githubusercontent.com/8652625/42694062-0de16f58-86ec-11e8-9c28-fceffa1774db.png\n    :align: center\n    :alt: Harvester on IPython\n    :scale: 40 %\n\n.. code-block:: python\n\n    (genicam) kznr@Kazunaris-MacBook:~% ipython\n    Python 3.5.3 |Continuum Analytics, Inc.| (default, Mar  6 2017, 12:15:08)\n    Type 'copyright', 'credits' or 'license' for more information\n    IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.\n\n    In [1]: from harvester.core import Harvester\n\n    In [2]: h = Harvester()\n\n    In [3]: h.add_cti_file('/Users/kznr/dev/genicam/bin/Maci64_x64/TLSimu.cti')\n\n    In [4]: h.update_device_info_list()\n\n    In [5]: for i, info in enumerate(h.device_info_list):\n       ...:     print('{0}: {1}'.format(i, info.display_name))\n       ...:\n    0: Test_Mono (SN0)\n    1: Test_Color (SN1)\n    2: Test_Mono (SN0)\n    3: Test_Color (SN1)\n\n    In [6]: h.connect_device(0)\n\n    In [7]: h.device.node_map.Width.value = 16\n\n    In [8]: h.device.node_map.Height.value = 8\n\n    In [9]: h.device.node_map.PixelFormat.value = 'Mono8'\n\n    In [10]: h.start_image_acquisition()\n\n    In [11]: with h.fetch_buffer() as b:\n        ...:     print('1D: {0}'.format(b.image.ndarray))\n        ...:     print('2D: {0}'.format(b.image.ndarray.reshape(b.image.height, b.image.width)))\n        ...:\n    1D: [ 6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  7  8  9 10 11 12 13 14\n     15 16 17 18 19 20 21 22  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n      9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 10 11 12 13 14 15 16 17\n     18 19 20 21 22 23 24 25 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n     12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 13 14 15 16 17 18 19 20\n     21 22 23 24 25 26 27 28]\n    2D: [[ 6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21]\n     [ 7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22]\n     [ 8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]\n     [ 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]\n     [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]\n     [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]\n     [12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]\n     [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28]]\n\n    In [12]: h.stop_image_acquisition()\n\n############\nRequirements\n############\n\n*******************\nSystem Requirements\n*******************\n\n* Python 3.4 or higher\n* Officially certifiled GenTL Producers\n* GenICam compliant machine vision cameras\n\n***************************\nSupported Operating Systems\n***************************\n\n* macOS\n* Ubuntu\n* Windows\n\n############\nInstallation\n############\n\nIn this section, we will learn how to instruct procedures to get Harvester work.\n\n********\nOverview\n********\n\nIn short, you may think which tools are required to get Harvester work. The answer is listed as follows:\n\n* The GenApi-Python Binding\n* The GenTL-Python Binding\n* The GenICam reference implementation\n* A certified GenTL Producer\n* A GenICam compliant machine vision camera\n\nThe first three items will be able to downloaded from the EMVA website in the future. Regarding the 4th item, you should be able to get proprietary product from software vendors who sell image acquisition library. Regarding the 5th item, you should be able to purchase from machine vision camera manufactures all over the world.\n\n***********************************************************************************\nTHIS IS A TEMPORAL INSTRUCTION BUT PLEASE FOLLOW THIS WAY TO GET HARVESTER WORKING!\n***********************************************************************************\n\nWe are still working in the development stage so people who those are want to get Harvester working have to prepare everything by themselves (sorry about that!). In this section, we will learn how to prepare required tools/libraries.\n\nFirst, invoking the following command clone the Harvester from the GitHub :\n\n.. code-block:: shell\n\n    $ git clone https://github.com/genicam/harvester.git\n\nHarvester requires some Python modules. To install the required modules, please invoke the following command; we're planning to isolate these modules from Harvester Core because these modules are relevant to visualization task but please install them anyway for now:\n\n.. code-block:: shell\n\n    $ pip install numpy PyQt5 vispy\n\nAfter that, you'll have to build the Python bindings by yourself. The source code can be downloaded from the following URL using Subversion:\n\n.. code-block:: shell\n\n    $ svn co --username your_account_name https://genicam.mvtec.com/svn/genicam/branches/_dev_teli_kazunari_1881_20180121/\n\nNote that you need to be a member of EMVA to download a working copy from their repository. To learn about the detail please visit the following EMVA website:\n\nhttps://www.emva.org/about-emva/membership/\n\nTo build the library, please read the ``README`` file which is located at the following directory in the source package:\n\n``genicam/source/Bindings/README.rst``\n\nReading that file, you should be able to learn everything you need to build the Python Bindings by yourself.\n\nBefore closing this section, please remind that you need to be careful when you choose a Python version (especially Anaconda Python, maybe?) because some distributions have different directory structure or linking symbols. It simply breaks the Python Bindings. We have started collecting some results from our experiences and have listed them in the \"System Configuration Matrix\" section in the ``README`` file. We hope it helps you to save your time.\n\n********************************************************************************************\nInstalling an official release (Under construction; please do not follow this way for now)\n********************************************************************************************\n\n**NOTE: This way is not available as of May 2018. Thank you for your patience!**\n\nThe Harvester project is planning to support distribution via PyPI but it's not done yet. If once we supported it, you should be able to install Harvester invoking the following command:\n\n.. code-block:: shell\n\n    $ pip install genicam.harvester\n\n###########################\nInstructions for Developers\n###########################\n\n*****************\nSetting Up an IDE\n*****************\n\nWhen you finished building the Python bindings, then you can launch Harvester. To launch Harvester Core or Harvester GUI, we would recommend you to do it on an IDE called PyCharm. You can download the community version of PyCharm for free at the following URL:\n\nhttps://www.jetbrains.com/pycharm/download\n\nAfter installing PyCharm, open the Harvester package, that you have downloaded from GitHub, from PyCharm.\n\n***************\nModule Location\n***************\n\nBy default, PyCharm doesn't know where the Python Bings are located. You can tell PyCharm the location in the Preference dialog. You should be able to find the right place just searching from the top-left corner. Then clicking ``Add Content Root`` button in the top-right corner and specify the directory.\n\n.. image:: https://user-images.githubusercontent.com/8652625/40595910-7df63826-6272-11e8-807a-96c0fb4229d7.png\n    :align: center\n    :alt: Project Structure\n    :scale: 40 %\n\nIn the Project Structure page, please add content root where the Python Bindings are located. In general, you should point at the following directory:\n\n``genicam_root/bin/[target dependent]``\n\nHaving that information, PyCharm can find out those modules which Harvester asks Python to import.\n\nUsing ``PAYTHONPATH`` is also a way to tell Python an additional directory where Python modules are located. If your intended modules are located at ``path/to/module_dir``, you should set up ``PYTHONPATH`` as follows:\n\n.. code-block:: shell\n\n    $ PYTHONPATH=path/to/module_dir\n\n***********************\nLaunching Harvester GUI\n***********************\n\nAfter that, you're ready to launch Harvester GUI (not only Harvester Core). To launch Harvester GUI, selecting ``frontend/pyqt/harvester.py`` in the project pane, then right click it. There you should be able to find ``Run harvester`` in the popped up menu. Just click it. Harvester GUI should pop up.\n\n.. image:: https://user-images.githubusercontent.com/8652625/40917805-70b4f8f0-683f-11e8-8d8e-0a710875833e.png\n    :align: center\n    :alt: Run harvester\n    :scale: 40 %\n\n*************************************\nLoading a GenTL Producer on Harvester\n*************************************\n\nNow it is the time to select a GenTL Producer to load. In the toolbar, clicking the left most button, select a CTI file to load. Then a file selection dialog should pop up. In the following example, we chose a GenTL Producer simulator so-called TLSimu.\n\n.. image:: https://user-images.githubusercontent.com/8652625/40985679-96c03c7c-691f-11e8-9e6e-cddae618dc37.png\n    :align: center\n    :alt: Loaded TLSimu\n    :scale: 40 %\n\n#############\nHarvester GUI\n#############\n\n*********************************************\nHarvester GUI :: Image Data Visualizer Window\n*********************************************\n\nImage Data Visualizer Window :: Toolbar\n=======================================\n\nMost of Harvester GUI's features can be used through its toolbox. In this section, we describe each button's functionality and how to use it. Regarding shortcut keys, replace ``Ctrl`` with ``Command`` on macOS.\n\n.. image:: https://user-images.githubusercontent.com/8652625/41112688-a693c3ac-6aba-11e8-849b-94d41c229049.png\n    :align: center\n    :alt: Toolbar\n    :scale: 40 %\n\nSelecting a CTI file\n--------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596073-7e1b6a82-6273-11e8-9045-68bbbd034281.png\n    :align: left\n    :alt: Open file\n    :scale: 40 %\n\nThis button is used to select a GenTL Producer file to load. The shortcut key is ``Ctrl+o``.\n\nUpdating GenTL information\n--------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596091-9354283a-6273-11e8-8c6f-559db511339a.png\n    :align: left\n    :alt: Update\n    :scale: 40 %\n\nThis button is used to update GenTL information of the GenTL Producer that you are loading on Harvester. The shortcut key is ``Ctrl+u``. It might be useful when you newly connect a device to your system.\n\nSelecting a GenICam compliant device\n------------------------------------\n\nThis combo box shows a list of available GenICam compliant devices. You can select a device that you want to control. The shortcut key is ``Ctrl+D``, i.e., ``Ctrl+Shift+d``.\n\nConnecting a selected device to Harvester\n-----------------------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596045-49c61d54-6273-11e8-8424-d16e923b5b3f.png\n    :align: left\n    :alt: Connect\n    :scale: 40 %\n\nThis button is used to connect a device which is being selected by the former combo box. The shortcut key is ``Ctrl+c``. Once you connect the device, the device is exclusively controlled.\n\nDisconnecting the connecting device from Harvester\n--------------------------------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596046-49f0fd9e-6273-11e8-83e3-7ba8aad3c4f7.png\n    :align: left\n    :alt: Disconnect\n    :scale: 40 %\n\nThis button is used to disconnect the connecting device from Harvester. The shortcut key is ``Ctrl+d``.\n\nStarting image acquisition\n--------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596022-34d3d486-6273-11e8-92c3-2349be5fd98f.png\n    :align: left\n    :alt: Start image acquisition\n    :scale: 40 %\n\nThis button is used to start image acquisition. The shortcut key is ``Ctrl+j``. The acquired images will be drawing in the following canvas pane.\n\nPausing/Resuming image drawing\n------------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596063-6cae1aba-6273-11e8-9049-2430a042c671.png\n    :align: left\n    :alt: Pause\n    :scale: 40 %\n\nThis button is used to pausing/resuming drawing images on the canvas pane while it's keep acquiring images in the background. The shortcut key is ``Ctrl+k``. If you want to resume drawing images, just click the button again. You can do the same thing with the start image acquisition button (``Ctrl+j``).\n\nStopping image acquisition\n--------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596024-35d84c86-6273-11e8-89b8-9368db740f22.png\n    :align: left\n    :alt: Stop image acquisition\n    :scale: 40 %\n\nThis button is used to stop image acquisition. The shortcut key is ``Ctrl+l``.\n\nShowing the device attribute dialog\n-----------------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596224-7b2cf0e2-6274-11e8-9088-bb48163968d6.png\n    :align: left\n    :alt: Device attribute\n    :scale: 40 %\n\nThis button is used to show the device attribute dialog. The shortcut key is ``Ctrl+a``. The device attribute dialog offers you to a way to intuitively control device attribute over a GUI.\n\nShowing the about dialog\n------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/40596039-449ddc36-6273-11e8-9f91-1eb7830b8e8c.png\n    :align: left\n    :alt: About\n    :scale: 40 %\n\nThis button is used to show the about dialog.\n\nImage Data Visualizer Window :: Canvas\n======================================\n\nThe canvas of Harvester GUI offers you not only image data visualization but also some intuitive object manipulations.\n\n.. image:: https://user-images.githubusercontent.com/8652625/40985884-f0513eb2-691f-11e8-8727-2a236aa0fe72.png\n    :align: center\n    :alt: Canvas\n    :scale: 40 %\n\nZooming into the displayed image\n--------------------------------\n\nIf you're using a mouse, spin the wheel to your pointing finger points at. If you are using a trackpad on a macOS, slide two fingers to the display side.\n\nZooming out from the displayed image\n------------------------------------\n\nIf you're using a mouse, spin the wheel to your side. If you are using a trackpad on a macOS, slide two fingers to your side.\n\nChanging the part being displayed\n---------------------------------\n\nIf you're using a mouse, grab any point in the canvas and drag the pointer as if you're physically grabbing the image. The image will follow the pointer. If you are using a trackpad on a macOS, it might be useful if you assign the three finger slide for dragging.\n\n********************************************\nHarvester GUI :: Attribute Controller Window\n********************************************\n\nThe attribute controller offers you an interface to each GenICam feature node that the the target device provides.\n\nAttribute Controller Window :: Toolbar\n======================================\n\n.. image:: https://user-images.githubusercontent.com/8652625/41112521-2e3a778e-6aba-11e8-856b-818cdcd2ab08.png\n    :align: center\n    :alt: Toolbar\n    :scale: 40 %\n\nFiltering GenICam feature nodes by visibility\n---------------------------------------------\n\nThis combo box offers you to apply visibility filter to the GenICam feature node tree. The shortcut key is ``Ctrl+v``\n\nGenICam defines the following visibility levels:\n\n* **Beginner**: Features that should be visible for all users via the GUI and API.\n* **Expert**: Features that require a more in-depth knowledge of the camera functionality.\n* **Guru**: Advanced features that might bring the cameras into a state where it will not work properly anymore if it is set incorrectly for the cameras current mode of operation.\n* **Invisible**: Features that should be kept hidden for the GUI users but still be available via the API.\n\nThe following table shows each item in the combo box and the visibility status of each visibility level:\n\n.. list-table::\n    :header-rows: 1\n    :align: center\n\n    - - Combo box item\n      - Beginner\n      - Expert\n      - Guru\n      - Invisible\n    - - Beginner\n      - Visible\n      - Invisible\n      - Invisible\n      - Invisible\n    - - Expert\n      - Visible\n      - Visible\n      - Invisible\n      - Invisible\n    - - Guru\n      - Visible\n      - Visible\n      - Visible\n      - Invisible\n    - - All\n      - Visible\n      - Visible\n      - Visible\n      - Visible\n\nFiltering GenICam feature nodes by regular expression\n-----------------------------------------------------\n\nThis text edit box offers you to filter GenICam feature nodes by regular expression.\n\nExpanding the feature node tree\n-------------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/41112454-f7471566-6ab9-11e8-93a4-d2d56c7bbd31.png\n    :align: left\n    :alt: Expand feature node tree\n    :scale: 40 %\n\nThis button is used to expand the feature node tree. The shortcut key is ``Ctrl+e``.\n\nCollapsing the feature node tree\n--------------------------------\n\n.. image:: https://user-images.githubusercontent.com/8652625/41112453-f712498a-6ab9-11e8-9f9f-160c0e0d8866.png\n    :align: left\n    :alt: Collapse feature node tree\n    :scale: 40 %\n\nThis button is used to collapse the feature node tree. The shortcut key is ``Ctrl+c``.\n\n##############\nHarvester Core\n##############\n\nTODO: Finish writing article.\n\n################\nAcknowledgements\n################\n\n*********************\nOpen Source Resources\n*********************\n\nHarvester Core uses the following open source libraries/resources:\n\n* Pympler\n\n  | License: `Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0.html>`_\n  | Copyright (c) Jean Brouwers, Ludwig Haehne, Robert Schuppenies\n\n  | https://pythonhosted.org/Pympler/\n  | https://github.com/pympler/pympler\n  | https://pypi.org/project/Pympler/\n\n* Versioneer\n\n  | License: `The Creative Commons \"Public Domain Dedication\" license  (CC0-1.0) <https://creativecommons.org/publicdomain/zero/1.0/>`_\n  | Copyright (c) 2018 Brian Warner\n\n  | https://github.com/warner/python-versioneer\n\nHarvester GUI uses the following open source libraries/resources:\n\n* VisPy\n\n  | License: `BSD 3-Clause <https://opensource.org/licenses/BSD-3-Clause>`_\n  | Copyright (c) 2013-2018 VisPy developers\n\n  | http://vispy.org\n  | https://github.com/vispy/vispy\n\n* PyQt5\n\n  | License: `GPLv3 <https://www.gnu.org/licenses/gpl-3.0.en.html>`_\n  | Copyright (c) 2018 Riverbank Computing Limited\n\n  | https://www.riverbankcomputing.com\n  | https://pypi.org/project/PyQt5/\n\n* Icons8\n\n  | License: `Creative Commons Attribution-NoDerivs 3.0 Unported <https://creativecommons.org/licenses/by-nd/3.0/>`_\n  | Copyright (c) Icons8 LLC\n\n  | https://icons8.com\n\n##############\nWhy Harvester?\n##############\n\nHarvester's name was derived from the great Flemish painter, Pieter Bruegel the Elder's painting so-called \"The Harvesters\". Harvesters harvest a crop every season that has been fully grown and the harvested crop is passed to the consumers. On the other hand, image acquisition libraries acquire images as their crop and the images are passed to the following processes. We found the similarity between them and decided to name our library Harvester.\n\nApart from anything else, we love its peaceful and friendly name. We hope you also like it ;-)\n\n##############\nExternal Links\n##############\n\n* `Harvester at GitHub <https://github.com/genicam/harvester>`_\n* `Harvester at PyPI <https://pypi.org/project/genicam.harvester/>`_\n\n\n#######\nCredits\n#######\n\nThe initial idea about Harvester suddenly came up to Kazunari Kudo's head in the early April 2018 and he decided to bring the first prototype to the following International Vision Standards Meeting. During the Frankfurt International Vision Standards Meeting which was held in May 2018, people confirmed Harvester really worked using machine vision cameras provided by well-known machine vision camera manufacturers in the world. Having that fact, the attendees warmly welcomed Harvester.\n\nThe following individuals have directly or indirectly contributed to the development activity of Harvester or encouraged the developers by their thoughtful warm words:\n\nRod Barman, Stefan Battmer, David Beek, Jan Becvar, David Bernecker, Chris Beynon, Eric Bourbonnais, George Chamberlain, Thomas Detjen, Friedrich Dierks, Dana Diezemann, Emile Dodin, Reynold Dodson, Sascha Dorenbeck, Erik Eloff, Katie Ensign, Andreas Ertl, James Falconer, Werner Feith, Maciej Gara, Andreas Gau, Sebastien Gendreau, Francois Gobeil, Werner Goeman, Jean-Paul Goglio, Markus Grebing, Eric Gross, Ioannis Hadjicharalambous, Uwe Hagmaier, Tim Handschack, Christopher Hartmann, Reinhard Heister, Gerhard Helfrich, Jochem Herrmann, Heiko Hirschmueller, Tom Hopfner, David Hoese, Karsten Ingeman Christensen, Severi Jaaskelainen, Mattias Johannesson, Mark Jones, Mattias Josefsson, Martin Kersting, Stephan Kieneke, Tom Kirchner, Lutz Koschorreck, Frank Krehl, Maarten Kuijk, Max Larin, Ralf Lay, Min Liu, Sergey Loginonvskikh, Thomas Lueck, Alain Marchand, Rocco Matano, Masahide Matsubara, Stephane Maurice, Robert McCurrach, Mike Miethig, Thies Moeller, Roman Moie, Marcel Naggatz, Hartmut Nebelung, Damian Nesbitt, Quang Nhan Nguyen, Klaus-Henning Noffz, Neerav Patel, Jan Pech, Merlin Plock, Joerg Preckwinkel, Benjamin Pussacq, Dave Reaves, Thomas Reuter, Andreas Rittinger, Ryan Robe, Nicolas P. Rougier, Matthias Schaffland, Michael Schmidt, Jan Scholze, Martin Schwarzbauer, Rupert Stelz, Madhura Suresh, Chendra Hadi Suryanto, Timo Teifel, Albert Theuwissen, Laval Tremblay, Tim Vlaar, Silvio Voitzsch, Stefan Von Weihe, Frederik Voncken, Roman Wagner, Ansger Waschki, Anne Wendel, Jean-Michel Wintgens, Manfred Wuetschner, Jang Xu, Christoph Zierl, and Juraj Zopp\n\n\n",
        "description_content_type": "text/x-rst",
        "docs_url": null,
        "download_url": "https://pypi.org/project/genicam.harvester/",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/genicam/harvester",
        "keywords": "",
        "license": "Apache Software License V2.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "genicam.harvester",
        "package_url": "https://pypi.org/project/genicam.harvester/",
        "platform": "any",
        "project_url": "https://pypi.org/project/genicam.harvester/",
        "release_url": "https://pypi.org/project/genicam.harvester/0.post0.dev293/",
        "requires_dist": [
            "numpy"
        ],
        "requires_python": "",
        "summary": "Image acquisition & data visualization with Python",
        "version": "0.post0.dev293"
    },
    "last_serial": 4074532,
    "releases": {
        "0.post0.dev213": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d072e84d9f7fae847b18bc6e5f2d82c2",
                    "sha256": "0386ecaccc28de536f3b38f6c219fdddf9826b718bea90e0c0447d37ecbfac91"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev213-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d072e84d9f7fae847b18bc6e5f2d82c2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "size": 47566,
                "upload_time": "2018-06-13T15:16:32",
                "url": "https://files.pythonhosted.org/packages/28/d9/7c58c52e61a474e8468d5393b9dde7e760b1fae878e19989634d7e481736/genicam.harvester-0.post0.dev213-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5286a62edd26fe545df6fd95fb380de8",
                    "sha256": "1433a2494a60a535fd7fa55d4b9a14bafdf6c4a70c2f854328c1b95811710756"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev213.tar.gz",
                "has_sig": false,
                "md5_digest": "5286a62edd26fe545df6fd95fb380de8",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 74355,
                "upload_time": "2018-06-13T15:16:35",
                "url": "https://files.pythonhosted.org/packages/12/08/ccf54c82679afea7b8b9dd383111027f557bfaaf1827b1b9cbeeb4b6629a/genicam.harvester-0.post0.dev213.tar.gz"
            }
        ],
        "0.post0.dev288": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dc0e720af024e44a85d9422f128531bd",
                    "sha256": "e3819406f94b275f0c29e6881149f6a71dbc5e72fccb7b8c3b9765c419bf067f"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev288-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dc0e720af024e44a85d9422f128531bd",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "size": 45208,
                "upload_time": "2018-07-17T15:07:02",
                "url": "https://files.pythonhosted.org/packages/31/75/df1128f4fbbba8211a4ad89febf0cab8344bed7d868c4bbde65354f5590d/genicam.harvester-0.post0.dev288-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3d3d651b14118c22862898431af8ae57",
                    "sha256": "5b9f1651a17e353a35847d0381759e2394a394c4e03826a37dd127224a84f053"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev288.tar.gz",
                "has_sig": false,
                "md5_digest": "3d3d651b14118c22862898431af8ae57",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 74962,
                "upload_time": "2018-07-17T15:07:04",
                "url": "https://files.pythonhosted.org/packages/b7/20/e067cb7938fe1b8d3b5a3a87af629e26375c272af5f34c731ef431ba2a7e/genicam.harvester-0.post0.dev288.tar.gz"
            }
        ],
        "0.post0.dev289": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6bbfb7123978e3c5ed732a76433e8d7f",
                    "sha256": "efa73afaeb416e79523d7b98d157b2ca4bbbe3a810f07fe732bf3f0e90c29f0f"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev289-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6bbfb7123978e3c5ed732a76433e8d7f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "size": 52757,
                "upload_time": "2018-07-17T15:41:14",
                "url": "https://files.pythonhosted.org/packages/fc/1c/f86820fe626dad3a97685b1d96ea5f8470ca9c713d11d30b3f338ca5b4c8/genicam.harvester-0.post0.dev289-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "83ef69851bfd07634b32972190076b80",
                    "sha256": "826475757a1fb0708fa6e885fd4e9ccfa51f0698a52d7c32af481260f498f874"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev289.tar.gz",
                "has_sig": false,
                "md5_digest": "83ef69851bfd07634b32972190076b80",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 79622,
                "upload_time": "2018-07-17T15:41:16",
                "url": "https://files.pythonhosted.org/packages/5e/c0/a8a93c31066459ab650436e1fc8d5147c3de82ca2bdad6a60992237357cc/genicam.harvester-0.post0.dev289.tar.gz"
            }
        ],
        "0.post0.dev290": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1cd783303888d714ac63cb10e168a036",
                    "sha256": "cf4a3d268b9c875fde6f83f4c5ab98de9fcdcd09c7f57636c6c5e8fd910abfc0"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev290-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1cd783303888d714ac63cb10e168a036",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "size": 11962,
                "upload_time": "2018-07-17T15:44:00",
                "url": "https://files.pythonhosted.org/packages/72/76/ceb1ccf31f02cf13b488d147d71f9d5f56937676d1e1a8dbc6a0f6e22db4/genicam.harvester-0.post0.dev290-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9876955d2a369df97f7fe88d0aeb02e7",
                    "sha256": "47e840c257b87f834d55ac6b39a1bb79c45baa9c48c248bb05cc734eef2fe2c8"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev290.tar.gz",
                "has_sig": false,
                "md5_digest": "9876955d2a369df97f7fe88d0aeb02e7",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 58315,
                "upload_time": "2018-07-17T15:44:02",
                "url": "https://files.pythonhosted.org/packages/21/6b/d293500e16ac6ac1fc29bcffab62fe94663619276a00671252a041e476ae/genicam.harvester-0.post0.dev290.tar.gz"
            }
        ],
        "0.post0.dev292": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "61d63954057f457ebe59b8934e2e4625",
                    "sha256": "7d400ab1a7abd6891ee1944152555a4d93651fa79c6c08a45be8005eb5e1adda"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev292-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "61d63954057f457ebe59b8934e2e4625",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "size": 11959,
                "upload_time": "2018-07-17T16:14:16",
                "url": "https://files.pythonhosted.org/packages/e2/62/27ac4c82029267ca5508df88d2d97bd8e634bc2da26508f147784dacbd6c/genicam.harvester-0.post0.dev292-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cd9f65d55dc5fa5c141699852d8575d3",
                    "sha256": "fbec687c53af25c776a9c6abeb7441804d10fffb1bff216b5c5e45db194628a5"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev292.tar.gz",
                "has_sig": false,
                "md5_digest": "cd9f65d55dc5fa5c141699852d8575d3",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 1537817,
                "upload_time": "2018-07-17T16:14:19",
                "url": "https://files.pythonhosted.org/packages/83/90/fac049d2bc8f447fd24099660737ac3133bb0be82cc65b806de0c72fa5f2/genicam.harvester-0.post0.dev292.tar.gz"
            }
        ],
        "0.post0.dev293": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0da9e73d723f4cbd069156662cfdf539",
                    "sha256": "a606f67ed64e38b8b18765cfff595b15b4806aa7ef4f6e449c0f60774487cda4"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev293-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0da9e73d723f4cbd069156662cfdf539",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "size": 11960,
                "upload_time": "2018-07-17T16:48:08",
                "url": "https://files.pythonhosted.org/packages/d9/31/1494398233c0eb718f845e7e1f7496374db3c4a96ac083f1826fc23ed079/genicam.harvester-0.post0.dev293-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "dae34911de7d3590746482ccf478cdc6",
                    "sha256": "205f6c20dd4d673c48030f20fa8bc04625f54326fcfa5fd13ebdae8ead4be1cf"
                },
                "downloads": -1,
                "filename": "genicam.harvester-0.post0.dev293.tar.gz",
                "has_sig": false,
                "md5_digest": "dae34911de7d3590746482ccf478cdc6",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 1537815,
                "upload_time": "2018-07-17T16:48:11",
                "url": "https://files.pythonhosted.org/packages/ca/a4/9433ec91a0301634034fce3edebb959edaa0ab083946dd9211a51c7f4012/genicam.harvester-0.post0.dev293.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "0da9e73d723f4cbd069156662cfdf539",
                "sha256": "a606f67ed64e38b8b18765cfff595b15b4806aa7ef4f6e449c0f60774487cda4"
            },
            "downloads": -1,
            "filename": "genicam.harvester-0.post0.dev293-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "0da9e73d723f4cbd069156662cfdf539",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "size": 11960,
            "upload_time": "2018-07-17T16:48:08",
            "url": "https://files.pythonhosted.org/packages/d9/31/1494398233c0eb718f845e7e1f7496374db3c4a96ac083f1826fc23ed079/genicam.harvester-0.post0.dev293-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "dae34911de7d3590746482ccf478cdc6",
                "sha256": "205f6c20dd4d673c48030f20fa8bc04625f54326fcfa5fd13ebdae8ead4be1cf"
            },
            "downloads": -1,
            "filename": "genicam.harvester-0.post0.dev293.tar.gz",
            "has_sig": false,
            "md5_digest": "dae34911de7d3590746482ccf478cdc6",
            "packagetype": "sdist",
            "python_version": "source",
            "size": 1537815,
            "upload_time": "2018-07-17T16:48:11",
            "url": "https://files.pythonhosted.org/packages/ca/a4/9433ec91a0301634034fce3edebb959edaa0ab083946dd9211a51c7f4012/genicam.harvester-0.post0.dev293.tar.gz"
        }
    ]
}