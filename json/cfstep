{
    "info": {
        "author": "Dimitris Poulopoulos",
        "author_email": "dimitris.a.poulopoulos@gmail.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 4 - Beta",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Natural Language :: English",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8"
        ],
        "description": "<!--\n\n#################################################\n### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###\n#################################################\n# file to edit: nbs/index.ipynb\n# command to build the docs after a change: nbdev_build_docs\n\n-->\n\n# CFSTEP - Incremental Collaborative Filtering\n\n> Incremental learning for recommender systems\n\n\nCFSTEP is an open-source library, written in python, that enables fast implementation of incremental learning recommender systems. It uses a MYSQL database as a caching mechanism, but the user can easily connect to any SQL database through a JDBC driver and use the latter. This was a design decision, as the library is a by-product of the reasearch project [CloudDBAppliance](https://clouddb.eu/). Also, the library uses Pytorch as an autograd mechanism to compute the loss and update the parameters via any Pytorch optimizer.\n\n## Install\n\nRun `pip install cfstep` to install the library in your environment.\n\n## How to use - Movielens tutorial\n\nIn this example, a MySQL database is utilized as a caching mechanism. The database should have three tables, recording users, items and interactions, depicted below:\n\n``` \nuser                              item                             interaction\n-------                           -------                          -------\nuser_id                           item_id                          user_number\nuser_number                       item_number                      item_number\n[A column for each vector dim]    [A column for each vector dim]   count\n```\n\nHaving this setup, we will use the popular [movielens](https://grouplens.org/datasets/movielens/) dataset. The dataset has collected and made available rating data sets from the [MovieLens](http://movielens.org) web site. The data sets were collected over various periods of time, depending on the size of the set.\n\nFirst let us load the data in a pandas `DataFrame`. We assume that the reader has downloaded the 1m movielense dataset and have unziped it in the `/tmp` folder.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ncol_names = ['User_Id', 'Movie_Id', 'Rating', 'Timestamp']\nratings_df = pd.read_csv('/tmp/ratings.dat', delimiter='::', names=col_names, engine='python')\nratings_df.head()\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>User_Id</th>\n      <th>Movie_Id</th>\n      <th>Rating</th>\n      <th>Timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1193</td>\n      <td>5</td>\n      <td>978300760</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>661</td>\n      <td>3</td>\n      <td>978302109</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>914</td>\n      <td>3</td>\n      <td>978301968</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>3408</td>\n      <td>4</td>\n      <td>978300275</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>2355</td>\n      <td>5</td>\n      <td>978824291</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n</div>\n\n</div>\n\nWe will sort the data by `Timestamp` so as to simulate streaming events.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ndata_df = ratings_df.sort_values(by='Timestamp')\n```\n\n</div>\n\n</div>\n\nThe `ICF` model supports only positive feedback. Thus, we will consider a rating of 4 and more as positive feedback and discard any other. We want to identify likes with `1` and dislikes with `0`.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ndata_df['Preference'] = np.where(data_df['Rating'] > 3, 1, 0) # more than 3 -> 1, less than 4 ->0\ndata_df_cleaned = data_df.loc[data_df['Preference'] == 1]     # keep only ones and discard the others\n```\n\n</div>\n\n</div>\n\nFollowing, let us initialize out model with a database connection. For everything else (e.g. `learning rate`, `optimizer`, `loss function` etc.) we will use the defaults.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ndatabase_configuration = {\n    'conn_string': 'jdbc:mysql://localhost:3306/movielens',\n    'driver_path': '/usr/bin/mysql-connector-java-8.0.19.jar', \n    'classpath': 'com.mysql.cj.jdbc.Driver',\n    'schema': 'movielens', \n    'options': ['root', 'root']\n}\n\nmodel = ICF(database_configuration, optimizer=AdaMod)\n```\n\n</div>\n\n</div>\n\nFinally, let us get 1% of the data to fit the model for bootstrapping and create the Pytorch Dataset that we will use.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\npct = int(data_df_cleaned.shape[0] * .01)\nbootstrapping_data = data_df_cleaned[:pct]\n```\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\nclass MovieLens(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        user = self.df['User_Id'].iloc[idx]\n        item = self.df['Movie_Id'].iloc[idx]\n        rating = 1. \n        return (user, item, rating)\n```\n\n</div>\n\n</div>\n\nCreate the Pytorch Dataset and DataLoader that we will use. Batch size should always be `1` for online training.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ndata_set = MovieLens(bootstrapping_data)\ndata_loader = DataLoader(data_set, batch_size=1, shuffle=False)\n```\n\n</div>\n\n</div>\n\nBootrap the model using the `ICF.fit` method, that performs batch training.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\nmodel.fit(data_loader)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5752/5752 [05:51<00:00, 16.34it/s]\n\n\n</div>\n\n</div>\n\nThen, to simulate streaming we get the remaining data and create a different data set.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ndata_df_step = data_df_cleaned.drop(bootstrapping_data.index)[['User_Id', 'Movie_Id', 'Rating']]\n```\n\n</div>\n\n</div>\n\nSimulate the stream...\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\nk = 10 # we keep only the top 10 recommendations\nrecommendations = {}\nknown_users = []\n\nwith tqdm(total=len(data_df_step[:100])) as pbar:\n    for _, row in data_df_step[:100].iterrows():\n        user = row['User_Id']\n        item = row['Movie_Id']\n        rtng = row['Rating']\n\n        if user in known_users:\n            predictions = [i for i, _ in model.predict(user)]\n            if predictions == -1:\n                continue\n            recommendations[user] = predictions[:k]\n            model.step(user, item, rtng)\n        else:\n            model.step(user, item, rtng)\n\n        known_users.append(user)\n        pbar.update(1)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100/100 [01:08<00:00,  1.45it/s]\n\n\n</div>\n\n</div>\n\nBelow we can see the recommendations results for known users by our model. We hope that there is some consistency in the movies it recommends, based on the genre and the previously watched movies by this user.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\ncol_names = ['Movie_Id', 'Title', 'Genre']\nmovies_df = pd.read_csv('/tmp/movies.dat', delimiter='::', engine='python', names=col_names, index_col=0)\n```\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\n#local\nfor k, v in recommendations.items():\n    print(f'For user {k} the recommendations are:')\n    for movie_id in v:\n        print(movies_df.loc[movie_id]['Title'])\n    print()\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n    For user 5958 the recommendations are:\n    One Flew Over the Cuckoo's Nest (1975)\n    Mission: Impossible (1996)\n    Manchurian Candidate, The (1962)\n    Godfather: Part II, The (1974)\n    Eyes Wide Shut (1999)\n    Verdict, The (1982)\n    Once Were Warriors (1994)\n    Birds, The (1963)\n    American Beauty (1999)\n    Twelve Monkeys (1995)\n\n    For user 5957 the recommendations are:\n    One Flew Over the Cuckoo's Nest (1975)\n    Twelve Monkeys (1995)\n    American Beauty (1999)\n    Little Shop of Horrors, The (1960)\n    Godfather: Part II, The (1974)\n    Braveheart (1995)\n    Once Were Warriors (1994)\n    Star Wars: Episode IV - A New Hope (1977)\n    Fifth Element, The (1997)\n    Indiana Jones and the Last Crusade (1989)\n\n\n\n</div>\n\n</div>\n\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/dpoulopoulos/cfstep",
        "keywords": "recommender systems,recommendation systems,matrix factorization,incremental learning,machine learning,pytorch",
        "license": "Apache Software License 2.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "cfstep",
        "package_url": "https://pypi.org/project/cfstep/",
        "platform": "",
        "project_url": "https://pypi.org/project/cfstep/",
        "project_urls": {
            "Homepage": "https://github.com/dpoulopoulos/cfstep"
        },
        "release_url": "https://pypi.org/project/cfstep/0.1.0/",
        "requires_dist": [
            "torch (>=1.3.0)",
            "tqdm",
            "pandas",
            "jaydebeapi",
            "JPype1 (==0.6.3)"
        ],
        "requires_python": ">=3.6",
        "summary": "Incremental collaborative filtering algorithms for recommender systems",
        "version": "0.1.0"
    },
    "last_serial": 6465723,
    "releases": {
        "0.1.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "011b4945e96a5e6c3a48f9e36030ec93",
                    "sha256": "6245130f3bdfb0dee1defb83d76f2616f54bbe072d437eebe429bae101f85ef7"
                },
                "downloads": -1,
                "filename": "cfstep-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "011b4945e96a5e6c3a48f9e36030ec93",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 13994,
                "upload_time": "2020-01-16T12:35:40",
                "upload_time_iso_8601": "2020-01-16T12:35:40.112836Z",
                "url": "https://files.pythonhosted.org/packages/83/44/bf54c78ea0e9769e05ec3d8b514c263998ff2c05d10d15df23ec24647158/cfstep-0.1.0-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a6a313b9a22eb02e25dc7423471dbbbe",
                    "sha256": "143255d13fdee77db23b8183a9fc82b8779a9c6aaa816ff7a43597c1b097af31"
                },
                "downloads": -1,
                "filename": "cfstep-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a6a313b9a22eb02e25dc7423471dbbbe",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 16591,
                "upload_time": "2020-01-16T12:35:42",
                "upload_time_iso_8601": "2020-01-16T12:35:42.412739Z",
                "url": "https://files.pythonhosted.org/packages/5d/f4/c89a73a3dad148d1e0cd6d94b6956ece3c965139c7ce16e382223e84a5e9/cfstep-0.1.0.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "011b4945e96a5e6c3a48f9e36030ec93",
                "sha256": "6245130f3bdfb0dee1defb83d76f2616f54bbe072d437eebe429bae101f85ef7"
            },
            "downloads": -1,
            "filename": "cfstep-0.1.0-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "011b4945e96a5e6c3a48f9e36030ec93",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.6",
            "size": 13994,
            "upload_time": "2020-01-16T12:35:40",
            "upload_time_iso_8601": "2020-01-16T12:35:40.112836Z",
            "url": "https://files.pythonhosted.org/packages/83/44/bf54c78ea0e9769e05ec3d8b514c263998ff2c05d10d15df23ec24647158/cfstep-0.1.0-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "a6a313b9a22eb02e25dc7423471dbbbe",
                "sha256": "143255d13fdee77db23b8183a9fc82b8779a9c6aaa816ff7a43597c1b097af31"
            },
            "downloads": -1,
            "filename": "cfstep-0.1.0.tar.gz",
            "has_sig": false,
            "md5_digest": "a6a313b9a22eb02e25dc7423471dbbbe",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.6",
            "size": 16591,
            "upload_time": "2020-01-16T12:35:42",
            "upload_time_iso_8601": "2020-01-16T12:35:42.412739Z",
            "url": "https://files.pythonhosted.org/packages/5d/f4/c89a73a3dad148d1e0cd6d94b6956ece3c965139c7ce16e382223e84a5e9/cfstep-0.1.0.tar.gz"
        }
    ]
}