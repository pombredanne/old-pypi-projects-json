{
    "info": {
        "author": "Christoph Zwerschke",
        "author_email": "cito@online.de",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7"
        ],
        "description": "# GraphQL4py\n\nGraphQL4py is a Python port of [GraphQL.js](https://github.com/graphql/graphql-js),\nthe JavaScript reference implementation for [GraphQL](https://graphql.org/),\na query language for APIs created by Facebook.\n\nThe current version 1.0.0rc1 of GraphQL4py is up-to-date with GraphQL.js\nversion 14.0.0rc2. All parts of the API are covered by an extensive test\nsuite of currently 1529 unit tests.\n\n\n## Getting started\n\nAn overview of GraphQL in general is available in the\n[README](https://github.com/facebook/graphql/blob/master/README.md) for the\n[Specification for GraphQL](https://github.com/facebook/graphql). That overview\ndescribes a simple set of GraphQL examples that exist as [tests](tests)\nin this repository. A good way to get started with this repository is to walk\nthrough that README and the corresponding tests in parallel.\n\n\n## Documentation\n\nA more detailed documentation for GraphQL4py can be found at\n[graphql4py.readthedocs.io](https://graphql4py.readthedocs.io/).\n\nThere will be also [blog articles](https://cito.github.io/tags/graphql/)\nwith more usage examples.\n\n\n## Installation\n\nGraphQL4py can be installed from PyPI using the built-in pip command:\n\n    python -m pip install graphql4py\n\nAlternatively, you can also use [pipenv](https://docs.pipenv.org/) for\ninstallation in a virtual environment:\n\n    pipenv install graphql4py\n\n\n## Usage\n\nGraphQL4py provides two important capabilities: building a type schema, and\nserving queries against that type schema.\n\nFirst, build a GraphQL type schema which maps to your code base:\n\n```python\nfrom graphql import (\n    GraphQLSchema, GraphQLObjectType, GraphQLField, GraphQLString)\n\nschema = GraphQLSchema(\n    query=GraphQLObjectType(\n        name='RootQueryType',\n        fields={\n            'hello': GraphQLField(\n                GraphQLString,\n                resolve=lambda obj, info: 'world')\n        }))\n```\n\nThis defines a simple schema with one type and one field, that resolves\nto a fixed value. The `resolve` function can return a value, a co-routine\nobject or a list of these. It takes two positional arguments; the first one\nprovides the root or the resolved parent field, the second one provides a\n`GraphQLResolveInfo` object which contains information about the execution\nstate of the query, including a `context` attribute holding per-request state\nsuch as authentication information or database session. Any GraphQL arguments\nare passed to the `resolve` functions as individual keyword arguments.\n\nNote that the signature of the resolver functions is a bit different in\nGraphQL.js, where the context is passed separately and arguments are passed\nas a single object. Also note that GraphQL fields must be passed as a\n`GraphQLField` object explicitly. Similarly, GraphQL arguments must be\npassed as `GraphQLArgument` objects.\n\nA more complex example is included in the top level [tests](tests) directory.\n\nThen, serve the result of a query against that type schema.\n\n```python\nfrom graphql import graphql_sync\n\nquery = '{ hello }'\n\nprint(graphql_sync(schema, query))\n```\n\nThis runs a query fetching the one field defined, and then prints the result:\n\n```python\nExecutionResult(data={'hello': 'world'}, errors=None)\n```\n\nThe `graphql_sync` function will first ensure the query is syntactically\nand semantically valid before executing it, reporting errors otherwise.\n\n```python\nfrom graphql import graphql_sync\n\nquery = '{ boyhowdy }'\n\nprint(graphql_sync(schema, query))\n```\n\nBecause we queried a non-existing field, we will get the following result:\n\n```python\nExecutionResult(data=None, errors=[GraphQLError(\n    \"Cannot query field 'boyhowdy' on type 'RootQueryType'.\",\n    locations=[SourceLocation(line=1, column=3)])])\n```\n\nThe `graphql_sync` function assumes that all resolvers return values\nsynchronously. By using coroutines as resolvers, you can also create\nresults in an asynchronous fashion with the `graphql` function.\n\n```python\nimport asyncio\nfrom graphql import (\n    graphql, GraphQLSchema, GraphQLObjectType, GraphQLField, GraphQLString)\n\n\nasync def resolve_hello(obj, info):\n    await asyncio.sleep(3)\n    return 'world'\n\nschema = GraphQLSchema(\n    query=GraphQLObjectType(\n        name='RootQueryType',\n        fields={\n            'hello': GraphQLField(\n                GraphQLString,\n                resolve=resolve_hello)\n        }))\n\n\nasync def main():\n    query = '{ hello }'\n    print('Fetching the result...')\n    result = await graphql(schema, query)\n    print(result)\n\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(main())\nfinally:\n    loop.close()\n```\n\n\n## Goals and restrictions\n\nGraphQL4py tries to reproduce the code of the reference implementation\nGraphQL.js in Python as closely as possible and to stay up-to-date with\nthe latest development of GraphQL.js.\n\nIt has been created as an alternative to\n[GraphQL-core](https://github.com/graphql-python/graphql-core),\na prior work by Syrus Akbary, which was based on an older version of\nGraphQL.js and targeted older Python versions. Some parts of the code base\nof GraphQL.js have been inspired by GraphQL-core or directly taken over with\nonly slight modifications, but most of the code base has been re-implemented\nfrom scratch, replicating the latest code in GraphQL.js and adding type hints.\nRecently, GraphQL-core has also been modernized, but its focus is primarily to serve as as a solid base library for [Graphene](http://graphene-python.org/),\na more high-level framework for building GraphQL APIs in Python.\n\nDesign goals for the GraphQL4py library are:\n\n* to be a simple, cruft-free, state-of-the-art implementation of GraphQL using\n  current library and language versions\n* to be very close to the GraphQL.js reference implementation, while still\n  using a Pythonic API and code style\n* making use of Python type hints, similar to how GraphQL.js makes use of Flow\n* replicate the complete Mocha-based test suite of GraphQL.js using\n  [pytest](https://docs.pytest.org/)\n\nSome restrictions (mostly in line with the design goals):\n\n* requires Python >= 3.6\n* does not support a few deprecated methods and options of GraphQL.js\n* supports asynchronous operations only via async.io\n* does not support additional executors and middleware like GraphQL-core\n* the benchmarks have not yet been ported to Python\n\n\n## Changelog\n\nChanges are tracked as [GitHub releases](https://github.com/cito/graphql4py/releases).\n\n\n## Credits\n\nThe GraphQL4py library\n* has been created and is maintained by Christoph Zwerschke\n* uses ideas and code from GraphQL-core, a prior work by Syrus Akbary\n* is a Python port of GraphQL.js which has been created and is maintained\n  by Facebook, Inc.\n\n\n## License\n\nGraphQL4py is [MIT-licensed](https://github.com/cito/graphql4py/blob/master/LICENSE).\n\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/cito/graphql4py",
        "keywords": "graphql",
        "license": "MIT license",
        "maintainer": "",
        "maintainer_email": "",
        "name": "GraphQL4py",
        "package_url": "https://pypi.org/project/GraphQL4py/",
        "platform": "",
        "project_url": "https://pypi.org/project/GraphQL4py/",
        "project_urls": {
            "Homepage": "https://github.com/cito/graphql4py"
        },
        "release_url": "https://pypi.org/project/GraphQL4py/1.0.0rc1/",
        "requires_dist": null,
        "requires_python": ">=3.6",
        "summary": "GraphQL4py is a Python port of GraphQL.js, the JavaScript reference implementation for GraphQL.",
        "version": "1.0.0rc1"
    },
    "last_serial": 4111813,
    "releases": {
        "1.0.0rc1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6486b547a05ef6395eee3a5166bc8276",
                    "sha256": "767b276a18eeca75fe202e477f637b6618ecf344787bf2f95378854fe1113e38"
                },
                "downloads": -1,
                "filename": "GraphQL4py-1.0.0rc1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6486b547a05ef6395eee3a5166bc8276",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 154447,
                "upload_time": "2018-07-28T15:04:22",
                "url": "https://files.pythonhosted.org/packages/0d/ec/9cd933c2e298cb80763cb12f00f17496969a7ce88490c7f9f67b6d0dc3ce/GraphQL4py-1.0.0rc1-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "80684ac71ac16c9d2f954dec4f3200f6",
                    "sha256": "17b60f8d99c52af34cbf0f53f3c440de5bc3fe918e292cf1c5587c97300efd3d"
                },
                "downloads": -1,
                "filename": "GraphQL4py-1.0.0rc1.tar.gz",
                "has_sig": false,
                "md5_digest": "80684ac71ac16c9d2f954dec4f3200f6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 241690,
                "upload_time": "2018-07-28T15:04:25",
                "url": "https://files.pythonhosted.org/packages/36/b8/8df2c64ebd9a3b3ab99b1e3009149d4111519de75bd4b2c49b430aa63d64/GraphQL4py-1.0.0rc1.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "6486b547a05ef6395eee3a5166bc8276",
                "sha256": "767b276a18eeca75fe202e477f637b6618ecf344787bf2f95378854fe1113e38"
            },
            "downloads": -1,
            "filename": "GraphQL4py-1.0.0rc1-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "6486b547a05ef6395eee3a5166bc8276",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.6",
            "size": 154447,
            "upload_time": "2018-07-28T15:04:22",
            "url": "https://files.pythonhosted.org/packages/0d/ec/9cd933c2e298cb80763cb12f00f17496969a7ce88490c7f9f67b6d0dc3ce/GraphQL4py-1.0.0rc1-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "80684ac71ac16c9d2f954dec4f3200f6",
                "sha256": "17b60f8d99c52af34cbf0f53f3c440de5bc3fe918e292cf1c5587c97300efd3d"
            },
            "downloads": -1,
            "filename": "GraphQL4py-1.0.0rc1.tar.gz",
            "has_sig": false,
            "md5_digest": "80684ac71ac16c9d2f954dec4f3200f6",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.6",
            "size": 241690,
            "upload_time": "2018-07-28T15:04:25",
            "url": "https://files.pythonhosted.org/packages/36/b8/8df2c64ebd9a3b3ab99b1e3009149d4111519de75bd4b2c49b430aa63d64/GraphQL4py-1.0.0rc1.tar.gz"
        }
    ]
}