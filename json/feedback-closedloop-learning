{
    "info": {
        "author": "Bernd Porr, Paul Miller",
        "author_email": "bernd@glasgowneuro.tech",
        "bugtrack_url": null,
        "classifiers": [
            "Intended Audience :: Developers",
            "Operating System :: POSIX",
            "Programming Language :: Python"
        ],
        "description": "=========================================\nFeedback closed loop learning library/API\n=========================================\n\nThe documentation of all functions can be obtained with::\n  >>> import feedback_closedloop_learning as fcl\n  >>> help(fcl)\n\nThe detailed documentation can be generated by doxygen.\n\nThe best way to get started is to look at the script\nin `tests_py` from:\nhttps://github.com/glasgowneuro/feedback_closed_loop_learning\n\nA full application using the Python API is our vizdoom\nagent: https://github.com/glasgowneuro/fcl_demos\n\n\nAPI\n===\n\nThe API is identical to the C++ API: `fcl.h`,\n`neuron.h` and `layer.h` contain docstrings for\nall important calls.\n\nConstructors::\n\n  num_of_inputs: number of inputs in the input layer\n  num_of_hidden_neurons_per_layer_array: number of neurons in each layer\n  num_hid_layers: number of hidden layer (needs to match with array above)\n  num_outputs: number of output in the output layer\n\n  FeedbackClosedloopLearning(\n\t\t\tnum_of_inputs,\n\t\t\tnum_of_hidden_neurons_per_layer_array,\n\t\t\t_num_hid_layers,\n\t\t\tnum_outputs)\n\n\n\n  filter number >0 means: filterbank\n  filter number = 0 means layer without filters\n  num_of_inputs: number of inputs in the input layer\n  num_of_hidden_neurons_per_layer_array: number of neurons in each layer\n  num_hid_layers: number of hidden layer (needs to match with array above)\n  num_outputs: number of output in the output layer\n  num_filtersInput: number of filters at the input layer\n  num_filtersHidden: number of filters in the hiddel layers (usually zero)\n  minT: minimum/first temporal duration of the 1st filter\n  maxT: maximum/last temporal duration of the last filter\n  \n  FeedbackClosedloopLearning(\n\t\t\tnum_of_inputs,\n\t\t\tnum_of_hidden_neurons_per_layer_array,\n\t\t\tnum_hid_layers,\n\t\t\tnum_outputs,\n\t\t\tnum_filtersInput,\n\t\t\tnum_filtersHidden,\n\t\t\tminT,\n\t\t\tmaxT)\n\n\t\t\t\nPerforms the simulation step::\n\n  input: Array with the input values\n  error: Array of the error signals\n\n  doStep(input, error)\n\n  \nGets the output from one of the output neurons::\n\n  double getOutput(index)\n\n  \nSets globally the learning rate::\n\n  learningRate: for all layers and neurons\n  \n  setLearningRate(learningRate)\n\n  \nSets how the learnign rate increases or decreases from layer to layer::\n\n  learningRateDiscountFactor: >1 means higher learning rate in deeper layers\n\n  setLearningRateDiscountFactor(learningRateDiscountFactor)\n\n  \nSets a typical weight decay scaled with the learning rate::\n\n  decay: >0, the larger the faster the decay\n  \n  setDecay(double decay)\n\n  \nSets the global momentum for all layers::\n\n  setMomentum(double momentum)\n\n  \nSets the activation function of the Neuron::\n\n  activationFunction: see Neuron.ActivationFunction for the different options\n  \n  setActivationFunction(activationFunction);\n\n  \nInits the weights in all layers::\n\n  max: Maximum value of the weights\n  initBias: If the bias also should be initialised\n  weightInitMethod: see Neuron::WeightInitMethod for the options\n  \n  initWeights(max = 0.001,\n              initBias = 1,\n              weightInitMethod = Neuron.MAX_OUTPUT_RANDOM);\n\n\t\t    \nSeeds the random number generator::\n\n  seedRandom(s)\n\n\t\nSets globally the bias::\n\n  setBias(bias);\n\n\t\nReturns the number of hidden layers::\n\n  getNumHidLayers()\n\n\t\nGets the total number of layers::\n\n  getNumLayers()\n\n  \nGets a pointer to a layer::\n\n  getLayer(i)\n\n  \nGets the output layer::\n\n  getOutputLayer()\n\n  \nReturns all Layers::\n\n  getLayers()\n\n  \nSaves the whole network::\n\n  bool saveModel(const char* name);\n\n  \nLoads the network::\n\n  bool loadModel(const char* name);\n",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/glasgowneuro/feedback_closedloop_learning",
        "keywords": "",
        "license": "GPL 3.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "feedback_closedloop_learning",
        "package_url": "https://pypi.org/project/feedback_closedloop_learning/",
        "platform": "",
        "project_url": "https://pypi.org/project/feedback_closedloop_learning/",
        "project_urls": {
            "Homepage": "https://github.com/glasgowneuro/feedback_closedloop_learning"
        },
        "release_url": "https://pypi.org/project/feedback_closedloop_learning/1.1.1/",
        "requires_dist": null,
        "requires_python": "",
        "summary": "Feedback closed loop learning",
        "version": "1.1.1"
    },
    "last_serial": 4557598,
    "releases": {
        "1.1.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "40af5473b4f899c140978bcb6a01ac85",
                    "sha256": "bd0d7cdfabad50185675a7e4a876af1d054745b1dede72eadcc65fa3550b5107"
                },
                "downloads": -1,
                "filename": "feedback_closedloop_learning-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "40af5473b4f899c140978bcb6a01ac85",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 27511,
                "upload_time": "2018-12-03T16:54:00",
                "url": "https://files.pythonhosted.org/packages/d4/e4/2bfce55830ee58964d6906598fe5006bc30594fcd18362f141ba67d0adb3/feedback_closedloop_learning-1.1.0.tar.gz"
            }
        ],
        "1.1.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "32f5f998fbb6b5cc64022e9db5d0b457",
                    "sha256": "83c3d4a2df5a2b81d2ff1b4a76e1e545d21eed3ff1a42328c0b4e7177b4630ae"
                },
                "downloads": -1,
                "filename": "feedback_closedloop_learning-1.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "32f5f998fbb6b5cc64022e9db5d0b457",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 27967,
                "upload_time": "2018-12-03T22:37:56",
                "url": "https://files.pythonhosted.org/packages/79/7d/3b4be7d75f756979f0663a220fb0b8f4c6b41f0ce6a8ff7b4a9e8f4cb28b/feedback_closedloop_learning-1.1.1.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "32f5f998fbb6b5cc64022e9db5d0b457",
                "sha256": "83c3d4a2df5a2b81d2ff1b4a76e1e545d21eed3ff1a42328c0b4e7177b4630ae"
            },
            "downloads": -1,
            "filename": "feedback_closedloop_learning-1.1.1.tar.gz",
            "has_sig": false,
            "md5_digest": "32f5f998fbb6b5cc64022e9db5d0b457",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": null,
            "size": 27967,
            "upload_time": "2018-12-03T22:37:56",
            "url": "https://files.pythonhosted.org/packages/79/7d/3b4be7d75f756979f0663a220fb0b8f4c6b41f0ce6a8ff7b4a9e8f4cb28b/feedback_closedloop_learning-1.1.1.tar.gz"
        }
    ]
}