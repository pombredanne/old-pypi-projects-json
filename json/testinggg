{
    "info": {
        "author": "APIMatic SDK Generator",
        "author_email": "support@apimatic.io",
        "bugtrack_url": null,
        "classifiers": [],
        "description": "# Getting started\n\n\nThe Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.\n\nIt also allows your application to track the delivery status of both sent and received SMS messages.\n\n\n## How to Build\n\n\nYou must have Python ```2 >=2.7.9``` or Python ```3 >=3.4``` installed on your system to install and run this SDK. This SDK package depends on other Python packages like nose, jsonpickle etc. \nThese dependencies are defined in the ```requirements.txt``` file that comes with the SDK.\nTo resolve these dependencies, you can use the PIP Dependency manager. Install it by following steps at [https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/).\n\nPython and PIP executables should be defined in your PATH. Open command prompt and type ```pip --version```.\nThis should display the version of the PIP Dependency Manager installed if your installation was successful and the paths are properly defined.\n\n* Using command line, navigate to the directory containing the generated files (including ```requirements.txt```) for the SDK.\n* Run the command ```pip install -r requirements.txt```. This should install all the required dependencies.\n\n![Building SDK - Step 1](https://apidocs.io/illustration/python?step=installDependencies&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python)\n\n\n## How to Use\n\nThe following section explains how to use the Telstrasmsmessagingapi SDK package in a new project.\n\n### 1. Open Project in an IDE\n\nOpen up a Python IDE like PyCharm. The basic workflow presented here is also applicable if you prefer using a different editor or IDE.\n\n![Open project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=pyCharm)\n\nClick on ```Open``` in PyCharm to browse to your generated SDK directory and then click ```OK```.\n\n![Open project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=openProject0&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python)     \n\nThe project files will be displayed in the side bar as follows:\n\n![Open project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=openProject1&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python&projectName=testinggg)     \n\n### 2. Add a new Test Project\n\nCreate a new directory by right clicking on the solution name as shown below:\n\n![Add a new project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=createDirectory&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python&projectName=testinggg)\n\nName the directory as \"test\"\n\n![Add a new project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=nameDirectory)\n   \nAdd a python file to this project with the name \"testsdk\"\n\n![Add a new project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=createFile&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python&projectName=testinggg)\n\nName it \"testsdk\"\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=nameFile)\n\nIn your python file you will be required to import the generated python library using the following code lines\n\n```Python\nfrom testinggg.testinggg_client import TestingggClient\n```\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=projectFiles&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python&libraryName=testinggg.testinggg_client&projectName=testinggg&className=TestingggClient)\n\nAfter this you can write code to instantiate an API client object, get a controller object and  make API calls. Sample code is given in the subsequent sections.\n\n### 3. Run the Test Project\n\nTo run the file within your test project, right click on your Python file inside your Test project and click on ```Run```\n\n![Run Test Project - Step 1](https://apidocs.io/illustration/python?step=runProject&workspaceFolder=Telstra%20SMS%20Messaging%20API-Python&libraryName=testinggg.testinggg_client&projectName=testinggg&className=TestingggClient)\n\n\n## How to Test\n\nYou can test the generated SDK and the server with automatically generated test\ncases. unittest is used as the testing framework and nose is used as the test\nrunner. You can run the tests as follows:\n\n  1. From terminal/cmd navigate to the root directory of the SDK.\n  2. Invoke ```pip install -r test-requirements.txt```\n  3. Invoke ```nosetests```\n\n## Initialization\n\n### Authentication\nIn order to setup authentication and initialization of the API client, you need the following information.\n\n| Parameter | Description |\n|-----------|-------------|\n| o_auth_client_id | OAuth 2 Client ID |\n| o_auth_client_secret | OAuth 2 Client Secret |\n\n\n\nAPI client can be initialized as following.\n\n```python\n# Configuration parameters and credentials\no_auth_client_id = 'o_auth_client_id' # OAuth 2 Client ID\no_auth_client_secret = 'o_auth_client_secret' # OAuth 2 Client Secret\n\nclient = TestingggClient(o_auth_client_id, o_auth_client_secret)\n```\n\n\nYou must now authorize the client.\n\n### Authorizing your client\n\nThis SDK uses *OAuth 2.0 authorization* to authorize the client.\n\nThe `authorize()` method will exchange the OAuth client credentials for an *access token*.\nThe access token is an object containing information for authorizing client requests.\n\n You must pass the *[scopes](#scopes)* for which you need permission to access.\n```python\ntry:\n    client.auth.authorize([OAuthScopeEnum.NSMS])\nexcept OAuthProviderException as ex:\n    # handle exception\n```\n\nThe client can now make authorized endpoint calls.\n\n\n### Scopes\n\nScopes enable your application to only request access to the resources it needs while enabling users to control the amount of access they grant to your application. Available scopes are defined in the `testinggg.models.o_auth_scope_enum.OAuthScopeEnum` enumeration.\n\n| Scope Name | Description |\n| --- | --- |\n| `NSMS` | Access to use messaging APIs |\n\n### Storing an access token for reuse\n\nIt is recommended that you store the access token for reuse.\n\nYou can store the access token in a file or a database.\n\n```python\n# store token\nsave_token_to_database(client.config.o_auth_token)\n```\n\n### Creating a client from a stored token\n\nTo authorize a client from a stored access token, just set the access token after creating the client:\n\n```python\nclient = TestingggClient()\nclient.config.o_auth_token = load_token_from_database()\n```\n\n### Complete example\n\n```python\nfrom testinggg.testinggg_client import TestingggClient\nfrom testinggg.models.o_auth_scope_enum import OAuthScopeEnum\nfrom testinggg.exceptions.o_auth_provider_exception import OAuthProviderException\n\n# function for storing token to database\ndef save_token_to_database(token):\n    # code to save the token to database\n\n# function for loading token from database\ndef load_token_from_database():\n    # load token from database and return it (return None if no token exists)\n\n# Configuration parameters and credentials\no_auth_client_id = 'o_auth_client_id' # OAuth 2 Client ID\no_auth_client_secret = 'o_auth_client_secret' # OAuth 2 Client Secret\n\n#  create a new client\nclient = TestingggClient(o_auth_client_id, o_auth_client_secret)\n\n# obtain access token, needed for client to be authorized\nprevious_token = load_token_from_database()\nif previous_token:\n    # restore previous access token\n    client.config.o_auth_token = previous_token\nelse:\n    # obtain new access token\n    try:\n        token = client.auth.authorize([OAuthScopeEnum.NSMS])\n        save_token_to_database(token)\n    except OAuthProviderException as ex:\n        # handle exception\n\n# the client is now authorized and you can use controllers to make endpoint calls\n```\n\n\n# Class Reference\n\n## <a name=\"list_of_controllers\"></a>List of Controllers\n\n* [SMSController](#sms_controller)\n\n## <a name=\"sms_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".SMSController\") SMSController\n\n### Get controller instance\n\nAn instance of the ``` SMSController ``` class can be accessed from the API Client.\n\n```python\n sms_controller = client.sms\n```\n\n### <a name=\"create_send_message\"></a>![Method: ](https://apidocs.io/img/method.png \".SMSController.create_send_message\") create_send_message\n\n> Send an SMS to a Australian or International mobile phone.\n\n```python\ndef create_send_message(self,\n                            payload)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| payload |  ``` Required ```  | A JSON or XML payload containing the recipient's phone number and text message.\n\nThe recipient number should be in the format '04xxxxxxxx' where x is a digit |\n\n\n\n#### Example Usage\n\n```python\npayload = SendSMSRequest()\n\nresult = sms_controller.create_send_message(payload)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 400 | Invalid or missing request parameters |\n| 401 | Invalid or no credentials passed in the request |\n| 403 | Authorization credentials passed and accepted but account does<br>not have permission |\n| 404 | The requested URI does not exist |\n| 405 | The requested resource does not support the supplied verb |\n| 415 | API does not support the requested content type |\n| 422 | The request is formed correctly, but due to some condition<br>the request cannot be processed e.g. email is required and it is not provided<br>in the request |\n| 501 | The HTTP method being used has not yet been implemented for<br>the requested resource |\n| 503 | The service requested is currently unavailable |\n| 0 | An internal error occurred when processing the request |\n\n\n\n\n### <a name=\"get_message_status\"></a>![Method: ](https://apidocs.io/img/method.png \".SMSController.get_message_status\") get_message_status\n\n> Retrieve the status of a single outgoing SMS message.\n\n```python\ndef get_message_status(self,\n                           message_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| messageId |  ``` Required ```  | Unique identifier of a message - it is the value returned from\na previous POST call to https://api.telstra.com/v2/messages/sms |\n\n\n\n#### Example Usage\n\n```python\nmessage_id = 'messageId'\n\nresult = sms_controller.get_message_status(message_id)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 400 | Invalid or missing request parameters |\n| 401 | Invalid or no credentials passed in the request |\n| 403 | Authorization credentials passed and accepted but account does<br>not have permission |\n| 404 | The requested URI does not exist |\n| 405 | The requested resource does not support the supplied verb |\n| 415 | API does not support the requested content type |\n| 422 | The request is formed correctly, but due to some condition<br>the request cannot be processed e.g. email is required and it is not provided<br>in the request |\n| 501 | The HTTP method being used has not yet been implemented for<br>the requested resource |\n| 503 | The service requested is currently unavailable |\n| 0 | An internal error occurred when processing the request |\n\n\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n\n\n",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://apimatic.io/",
        "keywords": "",
        "license": "",
        "maintainer": "",
        "maintainer_email": "",
        "name": "testinggg",
        "package_url": "https://pypi.org/project/testinggg/",
        "platform": "",
        "project_url": "https://pypi.org/project/testinggg/",
        "release_url": "https://pypi.org/project/testinggg/123.0.0/",
        "requires_dist": null,
        "requires_python": "",
        "summary": " The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. ",
        "version": "123.0.0"
    },
    "last_serial": 3687062,
    "releases": {
        "123.0.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "298f26e9d0fe2c2de6257bb05034673c",
                    "sha256": "bcac51fe58dd99f39de66314fd25421183ef81e471e5346dc0669b32df72f430"
                },
                "downloads": -1,
                "filename": "testinggg-123.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "298f26e9d0fe2c2de6257bb05034673c",
                "packagetype": "sdist",
                "python_version": "source",
                "size": 20295,
                "upload_time": "2018-03-20T09:39:31",
                "url": "https://files.pythonhosted.org/packages/94/0d/541a4929c7396759f25edd4b40b4e3a97a0ffe9b5745f184d86b9b10084f/testinggg-123.0.0.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "298f26e9d0fe2c2de6257bb05034673c",
                "sha256": "bcac51fe58dd99f39de66314fd25421183ef81e471e5346dc0669b32df72f430"
            },
            "downloads": -1,
            "filename": "testinggg-123.0.0.tar.gz",
            "has_sig": false,
            "md5_digest": "298f26e9d0fe2c2de6257bb05034673c",
            "packagetype": "sdist",
            "python_version": "source",
            "size": 20295,
            "upload_time": "2018-03-20T09:39:31",
            "url": "https://files.pythonhosted.org/packages/94/0d/541a4929c7396759f25edd4b40b4e3a97a0ffe9b5745f184d86b9b10084f/testinggg-123.0.0.tar.gz"
        }
    ]
}