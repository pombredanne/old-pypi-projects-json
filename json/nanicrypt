{
    "info": {
        "author": "TaizoGem",
        "author_email": "thegaglicher@ya.ru",
        "bugtrack_url": null,
        "classifiers": [],
        "description": "# NaniCrypt\n> end-to-end client-server encryption\n## About\nNaniCrypt is a simple wrapper over AES and RSA to distribute best safe experience to end user.\nWritten in pure python and used libraries are also pure python.\n## Installation\n - Install it as a usual library:  \n`pip install nanicrypt`\n - or clone from source and install dependencies\n### Dependencies\n - pyaes\n - rsa\n - (optional) requests\n\n## Usage\nUsage of NaniCrypt is pretty straightforward.\n#### Client-side\n```python\nimport nanicrypt\npub = \"-----BEGIN RSA PUBLIC KEY-----...\"\nsalt = \"example app\"\nclient = nanicrypt.ClientNaniCrypt(pub, salt)\ndata = {\"example\": True, \"list\": [1, 2, 3]}\n\nencrypted = client.encrypt(data)\n# send to server\nserver_rsp_decrypted = client.decrypt(server_rsp, encrypted.key)\n```\n#### Server-side\n```python\nimport nanicrypt\npriv = \"-----BEGIN RSA PRIVATE KEY-----...\"\nsalt = \"example app\"\nserver = nanicrypt.ServerNaniCrypt(priv, salt)\nclient_req = {\"m\": \"some data\", \"k\": \"from client\"}\n\nclient_req_decrypted = server.decrypt(client_req, client_sign)\n# do something\nresponse_encrypted = server.encrypt({\"success\": True}, client_req_decrypted.key)\n# send back to client\n\n```\n#### Using built-in networking\n```python\nimport nanicrypt\npub = \"-----BEGIN RSA PUBLIC KEY-----...\"\nsalt = \"example app\"\ndata = {\"example\": True, \"list\": [1, 2, 3]}\nnet = nanicrypt.NaniCryptNetworking(pub, \"http://127.0.0.1/nanicrypt\", salt)\n\nserver_rsp = net.make_request(\"example.php\", data)\n```\n\n## Docs\n\n### Classes\n#### ClientNaniCrypt\n##### Constructor:\n`ClientNaniCrypt(pubkey, sign_salt)`  \n> `pubkey`: `str` or `bytes` - public rsa key  \n> `sign_salt`: (optional) `str` - sign salt. must be same on both client and server\n##### Methods:\n`.encrypt(data, key) -> ClientEncrypted` - encrypting data before sending  \n> `data`: `dict` - data to be encrypted. must only contain as key/value: `list/dict/bool/str`  \n> `key`: (optional) `bytes` - key for `data` to be encrypted. if not specified or is `None`, random will be generated  \n\n`.decrypt(data, key) -> dict` - decrypting server-sent data\n> `data`: `dict` - parsed json sent from server.  \n> `key`: `bytes` - aes key used to encrypt payload\n\n`.make_sign(payload) -> str` - used to create sign to validate requests\n> `payload`: `dict` - encrypted client data.  \n#### ClientEncrypted\n##### Constructor:\n`ClientEncrypted(data, key, sign)` - container for client-encrypted data\n###### Fields:\n> `data`: `dict` - dict with encrypted data  \n> `key`: `bytes` - random (or not) key used to encrypt  \n> `sign`: `str` - autogenerated request sign  \n> `base64_key`: `str` - base64-encoded `.key` \n> `json`: `str` - json representation of `.data`  \n> `sign_header`: `dict[str, str]` - dictionary with `.sign` for using in `requests`\n\n#### ServerNaniCrypt\n##### Constructor:\n`ServerNaniCrypt(privkey, sign_salt)`  \n> `privkey`: `str` or `bytes` - private rsa key  \n> `sign_salt`: (optional) `str` - sign salt. must be same on both client and server\n##### Methods:\n`.decrypt(data, sign) -> ServerDecrypted` - decrypting user-sent data\n> `data`: `dict` - parsed json sent from client.  \n> `sign`: (optional) `str` - request signature  \n\n`.encrypt(data, key) -> dict` - encrypting data before sending back  \n> `data`: `dict` - data to be encrypted. must only contain as key/value: `list/dict/bool/str`  \n> `key`: `bytes` - key for `data` to be encrypted. MUST be same as for decryption.  \n\n`.make_sign(payload) -> str` - used to create sign to validate requests\n> `payload`: `dict` - encrypted client data.\n\n`.check_sign(payload) -> bool` - used to check sign to validate requests\n> `payload`: `dict` - encrypted client data.\n\n#### ServerEncrypted\n##### Constructor:\n`ServerEncrypted(data, key, sign)` - container for client-encrypted data\n###### Fields:\n> `data`: `dict` - dict with encrypted data  \n> `key`: `bytes` - random (or not) key used to encrypt  \n> `sign_valid`: `bool` - whether `sign` was valid  \n> `json`: `str` - json representation of `.data`  \n> `base64_key`: `str` - base64-encoded `.key`",
        "description_content_type": "",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "http://taizogem.ml?page=nanicrypt",
        "keywords": "",
        "license": "MIT license",
        "maintainer": "",
        "maintainer_email": "",
        "name": "NaniCrypt",
        "package_url": "https://pypi.org/project/NaniCrypt/",
        "platform": "",
        "project_url": "https://pypi.org/project/NaniCrypt/",
        "project_urls": {
            "Homepage": "http://taizogem.ml?page=nanicrypt"
        },
        "release_url": "https://pypi.org/project/NaniCrypt/0.1.0/",
        "requires_dist": null,
        "requires_python": "",
        "summary": "end-to-end client-server encryption",
        "version": "0.1.0"
    },
    "last_serial": 4374263,
    "releases": {
        "0.1.0": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3ee688c3653cfbceb5a85e7ce875919d",
                    "sha256": "1b665c895be64adb1c84c20a86e187ab41874cca60d55e5ea5ef7fe60cb82c7a"
                },
                "downloads": -1,
                "filename": "NaniCrypt-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3ee688c3653cfbceb5a85e7ce875919d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5622,
                "upload_time": "2018-10-14T13:38:32",
                "url": "https://files.pythonhosted.org/packages/4e/36/2914947d167db7772262bcdd277b2a0cbdca2fa0add199bced418f9cc266/NaniCrypt-0.1.0.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "3ee688c3653cfbceb5a85e7ce875919d",
                "sha256": "1b665c895be64adb1c84c20a86e187ab41874cca60d55e5ea5ef7fe60cb82c7a"
            },
            "downloads": -1,
            "filename": "NaniCrypt-0.1.0.tar.gz",
            "has_sig": false,
            "md5_digest": "3ee688c3653cfbceb5a85e7ce875919d",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": null,
            "size": 5622,
            "upload_time": "2018-10-14T13:38:32",
            "url": "https://files.pythonhosted.org/packages/4e/36/2914947d167db7772262bcdd277b2a0cbdca2fa0add199bced418f9cc266/NaniCrypt-0.1.0.tar.gz"
        }
    ]
}