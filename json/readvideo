{
    "info": {
        "author": "Rahul Somani",
        "author_email": "rsomani95@gmail.com",
        "bugtrack_url": null,
        "classifiers": [
            "Development Status :: 3 - Alpha",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Natural Language :: English",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8"
        ],
        "description": "<!--\n\n#################################################\n### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###\n#################################################\n# file to edit: nbs/index.ipynb\n# command to build the docs after a change: nbdev_build_docs\n\n-->\n\n# Video Utilities for OpenCV\n\n> `videoutils` lets you get rid of writing boilerplate code for reading video and adds some convenience on top of that.\n\n\n## Install\n\n`pip install videoutils`\n\n## How to use\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nfrom videoutils.io import read_video, as_tensor, bgr2rgb, resize\nfname = 'files/interstellar-waves-edit.mp4'\n```\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname)\nlen(x)\nx[0].shape\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    1578\n\n\n\n\n\n\n    (480, 720, 3)\n\n\n\n</div>\n\n</div>\n\nBy default, `read_video` returns a list of `np.array`s of shape `(height, width, channels)`. <br>\nHowever, you can define precisely which frames you'd like to grab in a number of ways. This is done by using either the {`start_idx`, `end_idx`, `frame_stride`} or `target_frames` arguments. \n\n### Grab the first `n` frames\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nn = 50\nx  = read_video(fname, end_idx=n)\nx2 = read_video(fname, target_frames=(0,n))\n\nlen(x)\nlen(x) == len(x2)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    50\n\n\n\n\n\n\n    True\n\n\n\n</div>\n\n</div>\n\n---\n\n### Grab every `n`th frame\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nn=5\nx = read_video(fname, frame_stride=n, end_idx=50)\nlen(x)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    10\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, frame_stride=50) # total frames = 1578\nlen(x)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    32\n\n\n\n</div>\n\n</div>\n\n---\n\n### Grab frames at specific indices\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, target_frames=[10, 50, 76, 420])\nlen(x)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    4\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx  = read_video(fname, start_idx=10, end_idx=15)\nx2 = read_video(fname, target_frames=(10, 15))\n\nlen(x)\nlen(x) == len(x2)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    5\n\n\n\n\n\n\n    True\n\n\n\n</div>\n\n</div>\n\n---\n\n### Return as `torch.Tensor`\n\nYou can pass any function that transforms a `np.array` of shape `(height, width, channels)` to the `apply` argument. `Videoutils` provides `as_tensor` for convenience -- if you use this function, `read_video` will automatically call `torch.stack` and return the collection of frames as a 4D tensor, else it will return a `list` of 3D arrays/tensors.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nimport torch\nfrom functools import partial\n\nx  = read_video(fname, end_idx=10, apply=as_tensor)\nx2 = read_video(fname, end_idx=10, apply=partial(as_tensor, normalise=True))\nx2 = torch.stack(x2) # since we aren't using `as_tensor`, but a partial (thus different) function\n\nx.shape\nx.shape == x2.shape\nx.mean(), x2.mean()\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    torch.Size([10, 480, 720, 3])\n\n\n\n\n\n\n    True\n\n\n\n\n\n\n    (tensor(36.8276), tensor(0.1443))\n\n\n\n</div>\n\n</div>\n\n---\n\n### Resize Video\n\n`read_video` has an optional argument `resize_func` which is meant to be a function that resizes a `np.array` of shape `(height, width, channels)`. <br>\nYou can use the predefined `resize` function or pass in a custom function here.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nhelp(resize)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n    Help on function resize in module videoutils.utils:\n\n    resize(image, height=None, width=None, keep_aspect_ratio=True, scale_factor=1.0)\n        Resize by `scale_factor` if preserving aspect ratio else\n        resize by custom `height` and `width`\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, target_frames=[0,1,2], apply=as_tensor,\n               resize_func=partial(resize, scale_factor=2.))\nx.shape\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    torch.Size([3, 960, 1440, 3])\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, target_frames=[0,1,2], apply=as_tensor,\n               resize_func=partial(resize, width=200, height=100, keep_aspect_ratio=False))\nx.shape\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    torch.Size([3, 100, 200, 3])\n\n\n\n</div>\n\n</div>\n\n---\n\n\n",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "https://github.com/rsomani95/readvideo",
        "keywords": "cv2 openCV video utilities read helper data",
        "license": "Apache Software License 2.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "readvideo",
        "package_url": "https://pypi.org/project/readvideo/",
        "platform": "",
        "project_url": "https://pypi.org/project/readvideo/",
        "project_urls": {
            "Homepage": "https://github.com/rsomani95/readvideo"
        },
        "release_url": "https://pypi.org/project/readvideo/0.0.1/",
        "requires_dist": null,
        "requires_python": ">=3.6",
        "summary": "Skip writing boilerplate OpenCV code for reading videos, and then some",
        "version": "0.0.1"
    },
    "last_serial": 6438945,
    "releases": {
        "0.0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b00fafd8e36c619273692a58192b86ae",
                    "sha256": "975e5045fbb018f377199240c802e80d6d186c2ca6f19efbfdbfa2e55460cfc9"
                },
                "downloads": -1,
                "filename": "readvideo-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b00fafd8e36c619273692a58192b86ae",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 10401,
                "upload_time": "2020-01-12T07:46:54",
                "upload_time_iso_8601": "2020-01-12T07:46:54.069329Z",
                "url": "https://files.pythonhosted.org/packages/65/fa/9acc4727f4369f3feb84b3ea6a543aea702dea47b6d48002e2ddd98000d5/readvideo-0.0.1-py3-none-any.whl"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8d7dbd262d15679e01500ac53d6eead6",
                    "sha256": "3e88b70e251f8f8c3dc7a8e2257a7e705f33136222b27c9cf7ebdc9d5e8dea2d"
                },
                "downloads": -1,
                "filename": "readvideo-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "8d7dbd262d15679e01500ac53d6eead6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 5911,
                "upload_time": "2020-01-12T07:46:56",
                "upload_time_iso_8601": "2020-01-12T07:46:56.772917Z",
                "url": "https://files.pythonhosted.org/packages/96/59/9c31941e7bb9300d63906b34b2af9bb4fa98bafb03b216204f8fbbeac0e1/readvideo-0.0.1.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "b00fafd8e36c619273692a58192b86ae",
                "sha256": "975e5045fbb018f377199240c802e80d6d186c2ca6f19efbfdbfa2e55460cfc9"
            },
            "downloads": -1,
            "filename": "readvideo-0.0.1-py3-none-any.whl",
            "has_sig": false,
            "md5_digest": "b00fafd8e36c619273692a58192b86ae",
            "packagetype": "bdist_wheel",
            "python_version": "py3",
            "requires_python": ">=3.6",
            "size": 10401,
            "upload_time": "2020-01-12T07:46:54",
            "upload_time_iso_8601": "2020-01-12T07:46:54.069329Z",
            "url": "https://files.pythonhosted.org/packages/65/fa/9acc4727f4369f3feb84b3ea6a543aea702dea47b6d48002e2ddd98000d5/readvideo-0.0.1-py3-none-any.whl"
        },
        {
            "comment_text": "",
            "digests": {
                "md5": "8d7dbd262d15679e01500ac53d6eead6",
                "sha256": "3e88b70e251f8f8c3dc7a8e2257a7e705f33136222b27c9cf7ebdc9d5e8dea2d"
            },
            "downloads": -1,
            "filename": "readvideo-0.0.1.tar.gz",
            "has_sig": false,
            "md5_digest": "8d7dbd262d15679e01500ac53d6eead6",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": ">=3.6",
            "size": 5911,
            "upload_time": "2020-01-12T07:46:56",
            "upload_time_iso_8601": "2020-01-12T07:46:56.772917Z",
            "url": "https://files.pythonhosted.org/packages/96/59/9c31941e7bb9300d63906b34b2af9bb4fa98bafb03b216204f8fbbeac0e1/readvideo-0.0.1.tar.gz"
        }
    ]
}