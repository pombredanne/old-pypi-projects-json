{
    "info": {
        "author": "Globus Team",
        "author_email": "support@globus.org",
        "bugtrack_url": null,
        "classifiers": [
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Operating System :: POSIX",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3.4",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Topic :: Communications :: File Sharing",
            "Topic :: Internet :: WWW/HTTP",
            "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "description": "# Multiprovider Authentication\n\nMultiprovider Authentication is an easy to setup authentication middleware with support for\n[Django REST Framework][drf] and multiple OAuth2/OIDC Identity Providers that issue opaque\nor JWT access tokens, e.g. [Auth0][auth0], [Globus][globus], etc.\n\n## Rationale\n\nMany authentication middleware packages have been writted for Django REST Framework with\nsupport for OAuth2 opaque or JWT token. Most popular ones are listed with a short description\non [Django REST Framework - Authentication][drf_auth]. But all of them that support opaque tokens\nrequire access to the Identity Provider database to verify the access tokens. Or they cannot be\nstack up with other authentication classes to authenticate a bearer token against multiple\nIdentity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all\nIdentity Providers that issue JWT tokens and [Globus][globus] that issues opaque access tokens. Support\nfor other Identity Providers can easily be added by creating a new backend in `mp_auth/backends`.\nEach backend can be used separately as an Django REST Framework authentication class, or can be a part of\nlist of authentication class that Django REST Framework will go through to authenticate an HTTP request.\n`mp_auth.backend.mp.MultiproviderAuthentication` is a special authentication class that calls all\nauthentication classes configured in `settings.py`.\n\n## Setup\n\nInstall the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)\n```shell\npip install git+git://github.com/lukaszlacinski/mp_auth.git\n```\nand in `settings.py` set the following:\n```python\nINSTALLED_APPS [\n    ...\n    'mp_auth',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'mp_auth.backends.mp.MultiproviderAuthentication',\n    )\n}\n\nMULTIPROVIDER_AUTH = {\n    \"BearerTokens\": {\n        \"globus\": {\n            \"scope\": [<scopes>],\n            \"aud\": <audience>\n        }\n    },\n    \"JWT\": {\n        <issuer>\": {\n            \"aud\": <audience>\n        }\n    }\n}\n\nGLOBUS_CLIENT_ID = <OAuth2 client id>\nGLOBUS_CLIENT_SECRET = <OAuth2 client secret>\n```\nThen any view can be protected by `JWTAuthentication` or `GlobusAuthentication`, or, if you want to\nauthenticate an HTTP request against both `JWTAuthentication` or `GlobusAuthentication`, by\n `MultiproviderAuthentication` class.\n```\nfrom mp_auth.backends.mp import MultiproviderAuthentication\n\nclass MyAPIView(APIView):\n    authentication_classes = (MultiproviderAuthentication,)\n    renderer_classes = (JSONRenderer,)\n\n    def get(self, request, format=None):\n        user = request.user\n        return Response({\"username\": user.username})\n```\n\n[drf]: http://www.django-rest-framework.org/\n[auth0]: https://auth0.com/\n[globus]: https://globus.org/\n[drf_auth]: http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages",
        "description_content_type": "text/markdown",
        "docs_url": null,
        "download_url": "",
        "downloads": {
            "last_day": -1,
            "last_month": -1,
            "last_week": -1
        },
        "home_page": "",
        "keywords": "globus,django",
        "license": "apache 2.0",
        "maintainer": "",
        "maintainer_email": "",
        "name": "multi-provider-auth",
        "package_url": "https://pypi.org/project/multi-provider-auth/",
        "platform": "",
        "project_url": "https://pypi.org/project/multi-provider-auth/",
        "project_urls": null,
        "release_url": "https://pypi.org/project/multi-provider-auth/0.1/",
        "requires_dist": null,
        "requires_python": "",
        "summary": "Add Multi-provider auth for various providers",
        "version": "0.1"
    },
    "last_serial": 6352278,
    "releases": {
        "0.1": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "24938dec4de4c92c2c7758246244c302",
                    "sha256": "a464e580be800a1ce5e546f911f891ab97180be31b5db5ae98a86ea5af2049f8"
                },
                "downloads": -1,
                "filename": "multi-provider-auth-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "24938dec4de4c92c2c7758246244c302",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 3758,
                "upload_time": "2019-12-23T20:30:30",
                "upload_time_iso_8601": "2019-12-23T20:30:30.838364Z",
                "url": "https://files.pythonhosted.org/packages/9a/98/eae3269f85b342e2e375ca3662fc21152bdb4e74395d9633319ad1e81ad9/multi-provider-auth-0.1.tar.gz"
            }
        ]
    },
    "urls": [
        {
            "comment_text": "",
            "digests": {
                "md5": "24938dec4de4c92c2c7758246244c302",
                "sha256": "a464e580be800a1ce5e546f911f891ab97180be31b5db5ae98a86ea5af2049f8"
            },
            "downloads": -1,
            "filename": "multi-provider-auth-0.1.tar.gz",
            "has_sig": false,
            "md5_digest": "24938dec4de4c92c2c7758246244c302",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": null,
            "size": 3758,
            "upload_time": "2019-12-23T20:30:30",
            "upload_time_iso_8601": "2019-12-23T20:30:30.838364Z",
            "url": "https://files.pythonhosted.org/packages/9a/98/eae3269f85b342e2e375ca3662fc21152bdb4e74395d9633319ad1e81ad9/multi-provider-auth-0.1.tar.gz"
        }
    ]
}